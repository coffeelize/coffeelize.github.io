<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Anki 学习笔记</title>
    <url>/posts/Anki-Study-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>插件官网： <a href="https://ankiweb.net/shared/addons/2.1">Add-ons for Anki 2.1</a></p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul>
<li>Review Heatmap： <a href="https://ankiweb.net/shared/info/1771074083">Review Heatmap</a></li>
<li> 缩放 Anki 界面： <a href="https://ankiweb.net/shared/info/538879081">Anki Zoom</a></li>
<li> 查看卡片时编辑卡片： <a href="https://ankiweb.net/shared/info/1020366288">Edit Field During Review</a></li>
<li> 和网页插件等搭配使用： <a href="https://ankiweb.net/shared/info/2055492159">AnkiConnect</a></li>
<li> 视频制卡： <a href="https://ankiweb.net/shared/info/1213145732">Create subs2srs cards with mpv video player</a></li>
<li> 图形遮挡： <a href="https://ankiweb.net/shared/info/1374772155">Image Occlusion Enhanced</a></li>
<li> 快速添加单词各字段信息： <a href="https://ankiweb.net/shared/info/1807206748">Fast Word Query: Multi-threaded queries for words from local or web dictionaries</a></li>
<li> 同时打开多个窗口（比如添加卡片时可以同时打开两个添加窗口，分别设置好不同的模板，就不用老是切换模板了）：<a href="https://ankiweb.net/shared/info/354407385">Opening the same window multiple time</a></li>
<li> 了解更多：The Anking：<a href="https://www.ankipalace.com/best-add-ons">Best Anki Add-ons</a> 清单</li>
</ul>
]]></content>
      <tags>
        <tag>Anki</tag>
      </tags>
  </entry>
  <entry>
    <title>Anki 笔记读取器</title>
    <url>/posts/Anki-Note-Reader.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Anki-笔记数据库"><a href="#Anki-笔记数据库" class="headerlink" title="Anki 笔记数据库"></a>Anki 笔记数据库</h2><p>Anki 的笔记数据都存储在&nbsp;<code>collection.anki2</code>&nbsp;文件中，包含了用户的所有笔记、卡片、标签等信息</p>
<figure class="highlight python"><figcaption><span>文件路径 </span></figcaption><table><tbody><tr><td class="code"><pre><span class="line">C:\Users\Administrator\AppData\Roaming\Anki2\账户<span class="number">1</span>\collection.anki2</span><br></pre></td></tr></tbody></table></figure>

<p>可以使用 SQLite 或 Python 的&nbsp;<code>sqlite3</code>&nbsp;模块连接并查询该数据库，查看具体的表和字段。</p>
<h2 id="本地笔记检索"><a href="#本地笔记检索" class="headerlink" title="本地笔记检索"></a>本地笔记检索</h2><h3 id="使用-sqlite3-链接数据库"><a href="#使用-sqlite3-链接数据库" class="headerlink" title="使用 sqlite3 链接数据库"></a>使用 sqlite3 链接数据库</h3><figure class="highlight python"><figcaption><span>打印 collection.anki2 数据库中的所有表格 </span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 连接到 Anki 数据库（此处注意替换为自己的文件路径）  </span></span><br><span class="line">anki_db_path = <span class="string">r'C:\Users\Administrator\AppData\Roaming\Anki2\本地账户\collection.anki2'</span>  </span><br><span class="line">conn = sqlite3.connect(anki_db_path)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 查看 notes 表的结构  </span></span><br><span class="line">cursor = conn.cursor()  </span><br><span class="line">cursor.execute(<span class="string">"PRAGMA table_info(notes);"</span>)  </span><br><span class="line">columns = cursor.fetchall()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印字段名  </span></span><br><span class="line"><span class="keyword">for</span> column <span class="keyword">in</span> columns:  </span><br><span class="line">    <span class="built_in">print</span>(column)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 关闭连接  </span></span><br><span class="line">conn.close()</span><br></pre></td></tr></tbody></table></figure>

<p>输出结果为</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">(<span class="number">0</span>, <span class="string">'id'</span>, <span class="string">'INTEGER'</span>, <span class="number">0</span>, <span class="literal">None</span>, <span class="number">1</span>)  </span><br><span class="line">(<span class="number">1</span>, <span class="string">'guid'</span>, <span class="string">'TEXT'</span>, <span class="number">1</span>, <span class="literal">None</span>, <span class="number">0</span>)  </span><br><span class="line">(<span class="number">2</span>, <span class="string">'mid'</span>, <span class="string">'INTEGER'</span>, <span class="number">1</span>, <span class="literal">None</span>, <span class="number">0</span>)  </span><br><span class="line">(<span class="number">3</span>, <span class="string">'mod'</span>, <span class="string">'INTEGER'</span>, <span class="number">1</span>, <span class="literal">None</span>, <span class="number">0</span>)  </span><br><span class="line">(<span class="number">4</span>, <span class="string">'usn'</span>, <span class="string">'INTEGER'</span>, <span class="number">1</span>, <span class="literal">None</span>, <span class="number">0</span>)  </span><br><span class="line">(<span class="number">5</span>, <span class="string">'tags'</span>, <span class="string">'TEXT'</span>, <span class="number">1</span>, <span class="literal">None</span>, <span class="number">0</span>)  </span><br><span class="line">(<span class="number">6</span>, <span class="string">'flds'</span>, <span class="string">'TEXT'</span>, <span class="number">1</span>, <span class="literal">None</span>, <span class="number">0</span>)  </span><br><span class="line">(<span class="number">7</span>, <span class="string">'sfld'</span>, <span class="string">'INTEGER'</span>, <span class="number">1</span>, <span class="literal">None</span>, <span class="number">0</span>)  </span><br><span class="line">(<span class="number">8</span>, <span class="string">'csum'</span>, <span class="string">'INTEGER'</span>, <span class="number">1</span>, <span class="literal">None</span>, <span class="number">0</span>)  </span><br><span class="line">(<span class="number">9</span>, <span class="string">'flags'</span>, <span class="string">'INTEGER'</span>, <span class="number">1</span>, <span class="literal">None</span>, <span class="number">0</span>)  </span><br><span class="line">(<span class="number">10</span>, <span class="string">'data'</span>, <span class="string">'TEXT'</span>, <span class="number">1</span>, <span class="literal">None</span>, <span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>说明可以正常连接数据库，准备工作已做好</p>
<h3 id="制作一个-Python-小程序读取数据库"><a href="#制作一个-Python-小程序读取数据库" class="headerlink" title="制作一个 Python 小程序读取数据库"></a>制作一个 Python 小程序读取数据库</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> (</span><br><span class="line">    QApplication, QWidget, QVBoxLayout, QPushButton,</span><br><span class="line">    QLineEdit, QTextEdit, QMessageBox</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnkiNoteReader</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">        self.notes_df = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'Anki 笔记读取器'</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        self.load_button = QPushButton(<span class="string">'加载笔记'</span>, self)</span><br><span class="line">        self.load_button.clicked.connect(self.load_notes)</span><br><span class="line">        layout.addWidget(self.load_button)</span><br><span class="line"></span><br><span class="line">        self.search_box = QLineEdit(self)</span><br><span class="line">        self.search_box.setPlaceholderText(<span class="string">'搜索关键词'</span>)</span><br><span class="line">        layout.addWidget(self.search_box)</span><br><span class="line"></span><br><span class="line">        self.search_button = QPushButton(<span class="string">'搜索'</span>, self)</span><br><span class="line">        self.search_button.clicked.connect(self.search_notes)</span><br><span class="line">        layout.addWidget(self.search_button)</span><br><span class="line"></span><br><span class="line">        self.text_area = QTextEdit(self)</span><br><span class="line">        layout.addWidget(self.text_area)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_notes</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 连接到 Anki 数据库</span></span><br><span class="line">            anki_db_path = <span class="string">r'C:\Users\Administrator\AppData\Roaming\Anki2\本地账户\collection.anki2'</span></span><br><span class="line">            conn = sqlite3.connect(anki_db_path)</span><br><span class="line">            query = <span class="string">'SELECT id, flds FROM notes'</span></span><br><span class="line">            self.notes_df = pd.read_sql_query(query, conn)</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line">            self.display_notes(self.notes_df)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            QMessageBox.critical(self, <span class="string">"错误"</span>, <span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display_notes</span>(<span class="params">self, notes</span>):</span></span><br><span class="line">        self.text_area.clear()</span><br><span class="line">        <span class="keyword">for</span> index, row <span class="keyword">in</span> notes.iterrows():</span><br><span class="line">            <span class="comment"># 清除不可见字符，保留中文和其他可见字符</span></span><br><span class="line">            fields = re.sub(<span class="string">r'[^\u4e00-\u9fa5\x20-\x7E]'</span>, <span class="string">' '</span>, row[<span class="string">'flds'</span>])  <span class="comment"># 保留中文和可见字符</span></span><br><span class="line">            self.text_area.append(<span class="string">f"Note ID: <span class="subst">{row[<span class="string">'id'</span>]}</span>\nFields: <span class="subst">{fields.strip()}</span>\n"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_notes</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.notes_df <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            search_term = self.search_box.text()</span><br><span class="line">            <span class="keyword">if</span> search_term:</span><br><span class="line">                filtered_notes = self.notes_df[self.notes_df[<span class="string">'flds'</span>].<span class="built_in">str</span>.contains(search_term, na=<span class="literal">False</span>)]</span><br><span class="line">                self.display_notes(filtered_notes)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.display_notes(self.notes_df)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            QMessageBox.warning(self, <span class="string">"警告"</span>, <span class="string">"请先加载笔记！"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    ex = AnkiNoteReader()</span><br><span class="line">    ex.resize(<span class="number">600</span>, <span class="number">400</span>)</span><br><span class="line">    ex.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20241005153729.png" alt="image.png"></p>
<p>加载笔记以及搜索笔记如下图<br><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20241005153806.png" alt="image.png"></p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20241005153811.png" alt="image.png"></p>
<h2 id="远程笔记检索"><a href="#远程笔记检索" class="headerlink" title="远程笔记检索"></a>远程笔记检索</h2><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify  </span><br><span class="line"><span class="keyword">import</span> sqlite3  </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  </span><br><span class="line">  </span><br><span class="line">app = Flask(__name__)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 数据库文件路径  </span></span><br><span class="line">DATABASE_PATH = <span class="string">r'C:\Users\Administrator\AppData\Roaming\Anki2\本地账户\collection.anki2'</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_database</span>(<span class="params">query</span>):</span>  </span><br><span class="line">    <span class="string">"""执行 SQL 查询并返回结果为 DataFrame"""</span>    conn = sqlite3.connect(DATABASE_PATH)  </span><br><span class="line">    df = pd.read_sql_query(query, conn)  </span><br><span class="line">    conn.close()  </span><br><span class="line">    <span class="keyword">return</span> df  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/search'</span>, methods=[<span class="string">'GET'</span>]</span>)  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_notes</span>():</span>  </span><br><span class="line">    <span class="string">"""根据查询词搜索笔记"""</span>  </span><br><span class="line">    search_term = request.args.get(<span class="string">'term'</span>, <span class="string">''</span>)  </span><br><span class="line">    query = <span class="string">f"SELECT id, flds FROM notes WHERE flds LIKE '%<span class="subst">{search_term}</span>%'"</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        results = query_database(query)  </span><br><span class="line">        notes = results.to_dict(orient=<span class="string">'records'</span>)  </span><br><span class="line">        <span class="keyword">return</span> jsonify(notes)  </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line">        <span class="keyword">return</span> jsonify({<span class="string">'error'</span>: <span class="built_in">str</span>(e)})  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  </span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">5000</span>)  <span class="comment"># 可访问所有 IP</span></span><br></pre></td></tr></tbody></table></figure>

<p>运行后提示：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"> * Serving Flask app <span class="string">'app'</span></span><br><span class="line"> * Debug mode: off</span><br><span class="line">WARNING: This <span class="keyword">is</span> a development server. Do <span class="keyword">not</span> use it <span class="keyword">in</span> a production deployment. Use a production WSGI server instead.</span><br><span class="line"> * Running on <span class="built_in">all</span> addresses (<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>)</span><br><span class="line"> * Running on http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line"> * Running on http://<span class="number">192.168</span><span class="number">.1</span><span class="number">.94</span>:<span class="number">5000</span></span><br></pre></td></tr></tbody></table></figure>

<p>这时，我们可以在浏览器输入</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">http://<span class="number">192.168</span><span class="number">.1</span><span class="number">.94</span>:<span class="number">5000</span>/search?term= 要搜索的内容</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20241005154109.png" alt="image.png"></p>
<h3 id="完善输出"><a href="#完善输出" class="headerlink" title="完善输出"></a>完善输出</h3><ul>
<li>增加搜索按钮</li>
<li>优化输出前端效果</li>
<li>表格形式输出</li>
<li>添加图片显示（需添加图片数据库地址）</li>
<li>添加导出 CSV 功能</li>
</ul>
<p>项目结构为：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">/project</span><br><span class="line">    /static</span><br><span class="line">        styles.css</span><br><span class="line">        javascript.js</span><br><span class="line">    /templates</span><br><span class="line">        index.html</span><br><span class="line">    app.py</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20241005161807.png" alt="image.png"></p>
<p><img data-src="https://s2.loli.net/2024/10/05/tYkZlIS1r2TyfoX.gif" alt="Anki.gif"></p>
<h4 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h4><p>以下代码中，需要将 Anki 数据库路径及图片媒体路径替换为自己电脑对应的路径</p>
<figure class="highlight python"><figcaption><span>app.py</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, send_from_directory, render_template, send_file</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库文件路径（需要替换成自己Anki数据库及图片路径）</span></span><br><span class="line">DATABASE_PATH = <span class="string">r'C:\Users\Administrator\Desktop\collection.anki2'</span></span><br><span class="line">MEDIA_PATH = <span class="string">r'C:\Users\Administrator\AppData\Roaming\Anki2\账户1\collection.media'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许访问媒体文件</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/media/&lt;path:filename&gt;'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">media</span>(<span class="params">filename</span>):</span></span><br><span class="line">    full_path = os.path.join(MEDIA_PATH, filename)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"Attempting to access: <span class="subst">{full_path}</span>"</span>)</span><br><span class="line">    <span class="keyword">return</span> send_from_directory(MEDIA_PATH, filename)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_database</span>(<span class="params">query, params</span>):</span></span><br><span class="line">    <span class="string">"""执行 SQL 查询并返回结果为 DataFrame"""</span></span><br><span class="line">    conn = sqlite3.connect(DATABASE_PATH)</span><br><span class="line">    df = pd.read_sql_query(query, conn, params=params)</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span>, methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    results = []</span><br><span class="line">    message = <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        search_term = request.form.get(<span class="string">'term'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"Searching for: <span class="subst">{search_term}</span>"</span>)</span><br><span class="line">        <span class="comment"># query = "SELECT id, flds FROM notes WHERE flds LIKE ?"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新查询，获取 flags 字段</span></span><br><span class="line">        <span class="comment"># query = """</span></span><br><span class="line">        <span class="comment">#     SELECT id, flds, flags</span></span><br><span class="line">        <span class="comment">#     FROM notes</span></span><br><span class="line">        <span class="comment">#     WHERE flds LIKE ?</span></span><br><span class="line">        <span class="comment"># """</span></span><br><span class="line"></span><br><span class="line">        query = <span class="string">"""</span></span><br><span class="line"><span class="string">            SELECT id, flds</span></span><br><span class="line"><span class="string">            FROM notes </span></span><br><span class="line"><span class="string">            WHERE flds LIKE ?</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            results_df = query_database(query, (<span class="string">f'%<span class="subst">{search_term}</span>%'</span>,))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"Query results: <span class="subst">{results_df}</span>"</span>)</span><br><span class="line">            <span class="keyword">if</span> results_df.empty:</span><br><span class="line">                message = <span class="string">"未找到相关结果。"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> _, row <span class="keyword">in</span> results_df.iterrows():</span><br><span class="line">                    fields = row[<span class="string">'flds'</span>].split(<span class="string">'\x1f'</span>)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f"Fields content: <span class="subst">{fields}</span>"</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> i, field <span class="keyword">in</span> <span class="built_in">enumerate</span>(fields):</span><br><span class="line">                        matches = re.findall(<span class="string">r'src="([^"]+\.(?:jpg|png|gif))"'</span>, field)</span><br><span class="line">                        <span class="keyword">for</span> match <span class="keyword">in</span> matches:</span><br><span class="line">                            img_tag = <span class="string">f' class="image" src="/media/<span class="subst">{match}</span>" alt="Image" '</span></span><br><span class="line">                            field = re.sub(<span class="string">r'src="[^"]*"'</span>, img_tag, field, count=<span class="number">1</span>)</span><br><span class="line">                        fields[i] = field.strip()</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># results.append({'id': row['id'], 'flds': fields})</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 添加 flags 数据</span></span><br><span class="line">                    <span class="comment"># results.append({'id': row['id'], 'flds': fields, 'flags': row['flags']})</span></span><br><span class="line">                    results.append({<span class="string">'id'</span>: row[<span class="string">'id'</span>], <span class="string">'flds'</span>: fields})</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            message = <span class="string">f"查询错误: <span class="subst">{<span class="built_in">str</span>(e)}</span>"</span></span><br><span class="line">            <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 render_template 加载 HTML 模板</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>, results=results, message=message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/export'</span>, methods=[<span class="string">'GET'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export_notes</span>():</span></span><br><span class="line">    search_term = request.args.get(<span class="string">'term'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"导出请求，搜索词: <span class="subst">{search_term}</span>"</span>)  <span class="comment"># 确认请求是否到达</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># query = """</span></span><br><span class="line">    <span class="comment">#     SELECT id, flds, flags</span></span><br><span class="line">    <span class="comment">#     FROM notes</span></span><br><span class="line">    <span class="comment">#     WHERE flds LIKE ?</span></span><br><span class="line">    <span class="comment"># """</span></span><br><span class="line"></span><br><span class="line">    query = <span class="string">"""</span></span><br><span class="line"><span class="string">        SELECT id, flds</span></span><br><span class="line"><span class="string">        FROM notes </span></span><br><span class="line"><span class="string">        WHERE flds LIKE ?</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        results_df = query_database(query, (<span class="string">f'%<span class="subst">{search_term}</span>%'</span>,))</span><br><span class="line">        temp_file = <span class="string">'exported_notes.csv'</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 使用 utf-8-sig 编码</span></span><br><span class="line">        results_df.to_csv(temp_file, index=<span class="literal">False</span>, encoding=<span class="string">'utf-8-sig'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> send_file(temp_file, as_attachment=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"导出错误: <span class="subst">{<span class="built_in">str</span>(e)}</span>"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"导出失败"</span>, <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></tbody></table></figure>

<h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Anki 笔记查询<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"{{ url_for('static', filename='styles.css') }}"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"static/javascript.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!-- 引入 JavaScript 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Anki 笔记查询<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"term"</span> <span class="attr">placeholder</span>=<span class="string">"输入搜索关键词"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"searchInput"</span> <span class="attr">placeholder</span>=<span class="string">"搜索内容并导出内容"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"exportNotes()"</span>&gt;</span>导出笔记<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>查询结果<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message"</span>&gt;</span>{{ message }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Note ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>Fields<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;th&gt;flags&lt;/th&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        {% for note in results %}</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>{{ note.id }}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>{{ note.flds | join('<span class="tag">&lt;<span class="name">br</span>&gt;</span>') | safe }}<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 展示旗帜数据 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;td&gt;{{ note.flags }}&lt;/td&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        {% endfor %}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><figure class="highlight javascript"><figcaption><span>javascript.js</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exportNotes</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">const</span> searchTerm = <span class="built_in">document</span>.getElementById(<span class="string">'searchInput'</span>).value; <span class="comment">// 获取搜索词</span></span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">`/export?term=<span class="subst">${<span class="built_in">encodeURIComponent</span>(searchTerm)}</span>`</span>; <span class="comment">// 构建请求 URL</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.location.href = url; <span class="comment">// 直接跳转到 URL 下载文件</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><figure class="highlight css"><figcaption><span>styles.css</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* styles.css */</span></span><br><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>; <span class="comment">/* 背景颜色 */</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse; <span class="comment">/* 确保边框合并 */</span></span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>); <span class="comment">/* 添加阴影 */</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">th</span>, <span class="selector-tag">td</span> {</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>; <span class="comment">/* 添加边框 */</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">12px</span>; <span class="comment">/* 增加内边距 */</span></span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">th</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#4CAF50</span>; <span class="comment">/* 表头背景色 */</span></span><br><span class="line">    <span class="attribute">color</span>: white; <span class="comment">/* 表头字体颜色 */</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(even) {</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>; <span class="comment">/* 偶数行背景色 */</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:hover</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e0f7fa</span>; <span class="comment">/* 鼠标悬停行的背景色 */</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.message</span> {</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image</span> {</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">600px</span>; <span class="comment">/* 调整图片尺寸 */</span></span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>; <span class="comment">/* 圆角 */</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>Anki</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Anki 的个性化配置</title>
    <url>/posts/Anki-Custom-Configuration.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="自定义发音"><a href="#自定义发音" class="headerlink" title="自定义发音"></a>自定义发音</h3><p>模板中配置如下信息，安卓和 Windows 都是可以使用在线发音的，可不知为何 Mac 上不行</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[sound:https://dict.youdao.com/dictvoice?audio={{单词}}]</span><br></pre></td></tr></tbody></table></figure>

<h3 id="自定义-Anki-字体"><a href="#自定义-Anki-字体" class="headerlink" title="自定义 Anki 字体"></a>自定义 Anki 字体</h3><figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> {</span><br><span class="line">    <span class="attribute">font-family</span>: myfont;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'_LXGWWenKai-Regular.ttf'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="attribute">font-family</span>: myfont;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="复习时可编辑"><a href="#复习时可编辑" class="headerlink" title="复习时可编辑"></a>复习时可编辑</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{{#正文}}</span><br><span class="line">	{{{edit:正文}}</span><br><span class="line">{{/正文}}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>Anki</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX 简明笔记</title>
    <url>/posts/AJAX-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a>AJAX 简介</h3><p>AJAX(Asynchronous JavaScirpt And XML)：<strong>异步</strong> 的 JavaScript 和 XML</p>
<p>同步和异步的比较如图所示<br><img data-src="https://s2.loli.net/2022/12/07/pX1lt9kHqKyhiZB.png" alt="03-同步和异步的比较.png"></p>
<p>AJAX 作用：</p>
<ol>
<li>与服务器进行数据交换：通过 AJAX 可以给服务器发送请求，并获取服务器响应的数据<ol>
<li>使用 AJAX 和服务器进行通信，就可以使用 HTML+AJAX 来替换 JSP 页面了</li>
<li>使用它的一个重要原因是可以用来替换 JSP 页面；JSP 做不到前后端分离</li>
</ol>
</li>
<li>异步交互：可以在 <strong>不重新加载整个页面</strong> 的情况下，与服务器交换数据并 <strong>更新部分</strong> 网页端技术，如：搜索联想，用户名是否可用校验等等</li>
</ol>
<p>之前的做法：JSP<br><img data-src="https://s2.loli.net/2022/12/07/O9PYR4Xtsy7Tqch.png" alt="01-响应请求JSP做法.png"></p>
<p>现在的做法：AJAX<br><img data-src="https://s2.loli.net/2022/12/07/mhD2onQgtAJT5qZ.png" alt="02-响应请求AJAX做法.png"></p>
<h3 id="AJAX-快速入门"><a href="#AJAX-快速入门" class="headerlink" title="AJAX 快速入门"></a>AJAX 快速入门</h3><ol>
<li>编写 AjaxServlet，并使用 response 输出字符串（后端代码）</li>
<li>创建 XMLHttpRequest 对象：损失和服务器交换数据（前端代码）</li>
<li>想服务器发送请求（前端代码）</li>
<li>获取服务器响应数据（前端代码）</li>
</ol>
<p>一、编写 AjaxServlet，并使用 response 输出字符串</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet("/ajaxServlet")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//1.响应数据  </span></span><br><span class="line">        response.getWriter().write(<span class="string">"hello AJAX"</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>二、创建核心对象</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhttp;  </span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) {  </span><br><span class="line">  xhttp = <span class="keyword">new</span> XMLHttpRequest();  </span><br><span class="line">} <span class="keyword">else</span> {  </span><br><span class="line">  <span class="comment">// code for IE6, IE5  </span></span><br><span class="line">  xhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>代码可参考 W3C：<a href="https://www.w3school.com.cn/js/js_ajax_http.asp">AJAX - XMLHttpRequest 对象</a></p>
<p>三、发送请求</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line">xhttp.open(<span class="string">"GET"</span>, <span class="string">"http://localhost:8080/ajax-dmeo/ajaxServlet"</span>);</span><br><span class="line">xhttp.send();</span><br></pre></td></tr></tbody></table></figure>

<p>注意：这里的路径是全路径，因为后期项目的前端和后端需要部署在不同的服务器上，需要使用绝对路径而不是相对路径</p>
<p>代码可参考 W3C：<a href="https://www.w3school.com.cn/js/js_ajax_http_send.asp">AJAX - XMLHttpRequest</a></p>
<p>四、获取响应</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">xhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{  </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status == <span class="number">200</span>) {  </span><br><span class="line">            alert(<span class="built_in">this</span>.responseText)  </span><br><span class="line">    }  </span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>

<p>代码参考 W3C：<a href="https://www.w3school.com.cn/js/js_ajax_http_response.asp">AJAX - 服务器响应</a></p>
<h3 id="AJAX-完整案例"><a href="#AJAX-完整案例" class="headerlink" title="AJAX 完整案例"></a>AJAX 完整案例</h3><p>注意：还需要我们在服务器端创建一个用于响应浏览器的 Servlet，如以上步骤一所示（一、编写 AjaxServlet，并使用 response 输出字符串）</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">  </span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.创建核心对象  </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> xhttp;  </span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) {  </span></span><br><span class="line"><span class="javascript">      xhttp = <span class="keyword">new</span> XMLHttpRequest();  </span></span><br><span class="line"><span class="javascript">    } <span class="keyword">else</span> {  </span></span><br><span class="line"><span class="javascript">      <span class="comment">// code for IE6, IE5  </span></span></span><br><span class="line"><span class="javascript">      xhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);  </span></span><br><span class="line"><span class="javascript">    }  </span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.发送请求  </span></span></span><br><span class="line"><span class="javascript">    xhttp.open(<span class="string">"GET"</span>, <span class="string">"http://localhost:8080/ajax-dmeo/ajaxServlet"</span>);  </span></span><br><span class="line"><span class="javascript">    xhttp.send();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//3.获取响应</span></span></span><br><span class="line"><span class="javascript">    xhttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{  </span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="built_in">this</span>.status == <span class="number">200</span>) {  </span></span><br><span class="line"><span class="javascript">                alert(<span class="built_in">this</span>.responseText)  </span></span><br><span class="line"><span class="javascript">        }  </span></span><br><span class="line"><span class="javascript">    };  </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Beamer 教程之框架篇</title>
    <url>/posts/Beamer-Tutorial-Framework.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="为什么使用-Beamer"><a href="#为什么使用-Beamer" class="headerlink" title="为什么使用 Beamer"></a>为什么使用 Beamer</h3><ul>
<li><del>学术偏好，就是任性</del></li>
<li>和 LATEX 搭配，兼容 LATEX 命令</li>
<li>高度可读性与清晰的逻辑</li>
<li>输出为 PDF，跨平台显示无差异</li>
<li>详见为什么使用 LaTeX</li>
</ul>
<h3 id="指定文档类"><a href="#指定文档类" class="headerlink" title="指定文档类"></a>指定文档类</h3><p>beamer 的文档类（顺便设置一下整个文档的字体大小），也可以指定幻灯片的比例</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%\documentclass{beamer} %使用默认的格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 指定beamer文档文字大小</span></span><br><span class="line"><span class="keyword">\documentclas</span>[14pt]{beamer}</span><br><span class="line"></span><br><span class="line"><span class="comment">% 43是幻灯片比例4:3，同理如果想设置16:9的格式则用169即可</span></span><br><span class="line"><span class="comment">%\documentclass[aspectratio=43,19pt, utf8, mathserif]{beamer}</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="设置中文环境"><a href="#设置中文环境" class="headerlink" title="设置中文环境"></a>设置中文环境</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">% 中文环境设置</span></span><br><span class="line"><span class="keyword">\usepackage</span>{xeCJK} <span class="comment">%导入中文包，关键</span></span><br><span class="line"><span class="keyword">\setCJKmainfont</span>{SimHei} <span class="comment">%中文字体采用宋体</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="设置图片环境"><a href="#设置图片环境" class="headerlink" title="设置图片环境"></a>设置图片环境</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">% 设置图片环境</span></span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx} <span class="comment">% 插入图片宏包</span></span><br><span class="line"><span class="keyword">\graphicspath</span>{images/} <span class="comment">% 设置图片路径</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="设置目录"><a href="#设置目录" class="headerlink" title="设置目录"></a>设置目录</h3><p>在每一小节前插入一张带有该节标题高亮的目录<br>需要理解的是：我们创建了多张带有不同命名的幻灯片，但是在程序看来，他们不会将这些不同名称的幻灯片标题作为该文档的目录结构，而是和普通的科技论文格式一样，需要使用到 section、subsection 等带有语义的命令来实现文档结构的划分</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%...</span></span><br><span class="line"><span class="comment">%\begin{document}</span></span><br><span class="line"><span class="comment">%--------------</span></span><br><span class="line"><span class="comment">% 每个章节都有小目录</span></span><br><span class="line"><span class="comment">%--------------</span></span><br><span class="line"><span class="keyword">\AtBeginSection</span>[]</span><br><span class="line">{</span><br><span class="line">  <span class="keyword">\begin</span>{frame}</span><br><span class="line">    <span class="keyword">\frametitle</span>{Table of Contents}</span><br><span class="line">    <span class="keyword">\tableofcontents</span>[currentsection]</span><br><span class="line">  <span class="keyword">\end</span>{frame}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>如下代码，创建了 5 张幻灯片，但使用 tableofcontent 命令，不会有任何的标题被生成</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%--------------目录页--------------</span></span><br><span class="line"><span class="comment">%需要在frame环境当中，通过frametitle给该页添加幻灯片标题</span></span><br><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line"> <span class="keyword">\frametitle</span>{目录}</span><br><span class="line"> <span class="comment">%插入目录</span></span><br><span class="line"> <span class="keyword">\tableofcontents</span></span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br><span class="line"></span><br><span class="line"><span class="comment">%--------------第1节--------------</span></span><br><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line"> <span class="keyword">\frametitle</span>{选题依据}</span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br><span class="line"></span><br><span class="line"><span class="comment">%--------------第2节--------------</span></span><br><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line"> <span class="keyword">\frametitle</span>{研究内容和研究目标}</span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br><span class="line"></span><br><span class="line"><span class="comment">%--------------第3节--------------</span></span><br><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line"> <span class="keyword">\frametitle</span>{技术路线和已取得成果}</span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br><span class="line"></span><br><span class="line"><span class="comment">%--------------第4节--------------</span></span><br><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line"> <span class="keyword">\frametitle</span>{可行性分析及创新点}</span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br><span class="line"></span><br><span class="line"><span class="comment">%--------------第5节--------------</span></span><br><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line"> <span class="keyword">\frametitle</span>{研究计划及预期结果}</span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h3><p>按照如下的框架往 beamer 当中填写内容，即可编译出自动为我们排好版的 PDF，当然这只是冰山一角，能够实现一些最基础的功能和最基本的框架，希望能够对你有所帮助呀 o (^▽^) o</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[11pt]{beamer}</span><br><span class="line"><span class="comment">% 中文环境设置</span></span><br><span class="line"><span class="keyword">\usepackage</span>{xeCJK} <span class="comment">%导入中文包，关键</span></span><br><span class="line"><span class="keyword">\setCJKmainfont</span>{SimHei} <span class="comment">%中文字体采用宋体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 作者信息</span></span><br><span class="line"><span class="keyword">\title</span>{智朋的笔记}</span><br><span class="line"><span class="keyword">\author</span>{智朋}</span><br><span class="line"><span class="keyword">\institute</span>{机械工程学院}</span><br><span class="line"></span><br><span class="line"><span class="comment">%类型为presentation</span></span><br><span class="line"><span class="keyword">\mode</span>&lt;presentation&gt; </span><br><span class="line">{</span><br><span class="line"> <span class="comment">%使用Madrid主题</span></span><br><span class="line"> <span class="keyword">\usetheme</span>{Madrid}</span><br><span class="line"> <span class="comment">%字体主题，布局主题和颜色主题</span></span><br><span class="line"> <span class="comment">%\usefonttheme{structuresmallcapsserif} </span></span><br><span class="line"> <span class="comment">%\usetheme{Berlin}</span></span><br><span class="line"> <span class="comment">%\usecolortheme{beaver}</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">% 设置图片环境</span></span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx} <span class="comment">% 插入图片宏包</span></span><br><span class="line"><span class="keyword">\graphicspath</span>{images/} <span class="comment">% 设置图片路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%--------------前言--------------</span></span><br><span class="line"><span class="comment">% 在每一个section开始的部分，tableofcontent插入一个目录页，并且会强调当前section章节</span></span><br><span class="line"><span class="keyword">\AtBeginSection</span>[]</span><br><span class="line">{</span><br><span class="line"> <span class="keyword">\begin</span>{frame}</span><br><span class="line">  <span class="keyword">\frametitle</span>{Table of Contents}</span><br><span class="line">  <span class="keyword">\tableofcontents</span>[currentsection]</span><br><span class="line"> <span class="keyword">\end</span>{frame}</span><br><span class="line">}</span><br><span class="line"><span class="comment">%--------------正文开始--------------</span></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> </span><br><span class="line"><span class="comment">%--------------封面--------------</span></span><br><span class="line"><span class="keyword">\frame</span>{<span class="keyword">\titlepage</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment">%--------------目录页--------------</span></span><br><span class="line"><span class="comment">%需要在frame环境当中，通过frametitle给该页添加幻灯片标题</span></span><br><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line"> <span class="keyword">\frametitle</span>{目录}</span><br><span class="line"> <span class="comment">%插入目录</span></span><br><span class="line"> <span class="keyword">\tableofcontents</span></span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br><span class="line"></span><br><span class="line"><span class="comment">%--------------第1节--------------</span></span><br><span class="line"><span class="keyword">\section</span>{选题依据}</span><br><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line"> <span class="keyword">\frametitle</span>{研究背景}</span><br><span class="line">  研究背景研究背景研究背景研究背景研究背景研究背景研究背景研究背景研究背景研究背景</span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line"> <span class="keyword">\frametitle</span>{国内外研究现状}</span><br><span class="line"> 国内外研究现状国内外研究现状国内外研究现状国内外研究现状国内外研究现状国内外研究现状</span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line"> <span class="keyword">\frametitle</span>{存在的问题}</span><br><span class="line">  <span class="keyword">\item</span> 问题1</span><br><span class="line">  存在的问题存在的问题存在的问题存在的问题存在的问题</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">\item</span> 问题2</span><br><span class="line">  存在的问题存在的问题存在的问题存在的问题存在的问题</span><br><span class="line">  </span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br><span class="line"></span><br><span class="line"><span class="comment">%--------------第2节--------------</span></span><br><span class="line"><span class="keyword">\section</span>{研究内容和研究目标}</span><br><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line"> <span class="keyword">\frametitle</span>{研究内容和研究目标}</span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br><span class="line"></span><br><span class="line"><span class="comment">%--------------第3节--------------</span></span><br><span class="line"><span class="keyword">\section</span>{技术路线和已取得成果}</span><br><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line"> <span class="keyword">\frametitle</span>{技术路线和已取得成果}</span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br><span class="line"></span><br><span class="line"><span class="comment">%--------------第4节--------------</span></span><br><span class="line"><span class="keyword">\section</span>{可行性分析及创新点}</span><br><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line"> <span class="keyword">\frametitle</span>{可行性分析及创新点}</span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br><span class="line"></span><br><span class="line"><span class="comment">%--------------第5节--------------</span></span><br><span class="line"><span class="keyword">\section</span>{研究计划及预期结果}</span><br><span class="line"><span class="keyword">\begin</span>{frame}</span><br><span class="line"> <span class="keyword">\frametitle</span>{研究计划及预期结果}</span><br><span class="line"><span class="keyword">\end</span>{frame}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/03/z31gATxKupUMeFR.png" alt="01-beamer框架导出的PDF.png"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Latex 工作室：<a href="https://www.latexstudio.net/archives/51704.html">Beamer v3.0 指南 (黄旭华译)</a></li>
<li>Latex 工作室：<a href="https://www.latexstudio.net/index/details/index/mid/913.html">使用 Beamer 制作学术讲稿</a></li>
<li>连享会：<a href="https://lianxh.cn/news/4700422eee871.html">连享会工具：Beamer 幻灯片制作</a></li>
</ul>
]]></content>
      <tags>
        <tag>LaTeX</tag>
        <tag>Beamer</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios 异步框架简明笔记</title>
    <url>/posts/Axios-Asynchronous-Framework-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Axios-异步框架简介"><a href="#Axios-异步框架简介" class="headerlink" title="Axios 异步框架简介"></a>Axios 异步框架简介</h3><p>Axios 对原生的 AJAX 进行封装，简化书写</p>
<h3 id="Axios-快速入门"><a href="#Axios-快速入门" class="headerlink" title="Axios 快速入门"></a>Axios 快速入门</h3><ol>
<li>引入 axios 的 js 文件</li>
<li>使用 axios 发送请求，并获取相应结果</li>
</ol>
<p>详细步骤如下</p>
<p>一、在 webapp 下新建 js 文件夹，拷贝 axios 的 js 文件<br>二、新建 html 文件，引入 js 文件</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/axios-0.18.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>三、创建 AxiosServlet</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AxiosServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        System.out.println(<span class="string">"get..."</span>);  </span><br><span class="line">        <span class="comment">//1.接收请求参数  </span></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);  </span><br><span class="line">        System.out.println(username);  </span><br><span class="line">        <span class="comment">//2.响应数据  </span></span><br><span class="line">        response.getWriter().write(<span class="string">"hello Axios"</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        System.out.println(<span class="string">"post..."</span>);  </span><br><span class="line">        <span class="keyword">this</span>.doGet(request, response);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>四、在 html 中编写 js 代码</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/axios-0.18.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//1.get</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">/* axios({</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       method:"get",</span></span></span><br><span class="line"><span class="comment"><span class="javascript">       url:"http://localhost:8080/ajax-dmeo/axiosServlet?username=zhangsan"</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     }).then(function (resp){</span></span></span><br><span class="line"><span class="comment"><span class="javascript">         alert(resp.data);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">     })*/</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.post</span></span></span><br><span class="line"><span class="javascript">    axios({</span></span><br><span class="line"><span class="javascript">        <span class="attr">method</span>: <span class="string">"get"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">url</span>: <span class="string">"http://localhost:8080/ajax-dmeo/axiosServlet"</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//data是请求参数</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: <span class="string">"username=zhangsan"</span></span></span><br><span class="line"><span class="javascript">    }).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>{</span></span><br><span class="line"><span class="javascript">        alert(resp.data);</span></span><br><span class="line"><span class="javascript">    })</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>代码说明及注意事项</p>
<ol>
<li>axios 大括号中的为 Java 中的对象</li>
<li><code>.then()</code> 方法是一个回调函数，如果响应接收到了的话就自动执行</li>
<li><code>data: "username=zhangsan"</code>，data 是请求参数。这里可以传 JSON 格式的数据。除此之外，还可以传 JS 对象类型的数据（JSON 数据格式可以和 Java 中的对象数据格式通过某些方式进行转换），因为 Axios 框架会自动将这个 JS 对象转为 JSON 的数据格式</li>
<li> Get 和 Post 两种方式传递参数的方式不一样，所以在 axios 方法中传入的对象（大括号包裹的内容）的方式不一样，一个写在 URL 中，一个写在 Data 属性中</li>
<li><code>.then()</code> 回调函数中，function 函数中的参数名可以不为 resp，随便一个都行，保持下面对象（resp.data）和这个参数名（resp）一致即可</li>
<li><code>resp.data</code> 即服务器端的 Servlet 响应过来的数据 </li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">flowchart&nbsp;RL</span><br><span class="line">    b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br><span class="line">    servlet1--&gt;|data|b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;Browsers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;servers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end</span><br></pre></td></tr></tbody></table></figure>

<p>简单来说，Axios 实现的功能就是：通过 get 或 post 给 Servlet 传递一个参数（username=“zhangsan”），然后 Servlet 接收到这个参数，就可以进行判断的操作，根据判断的结果在给浏览器发送一个响应。浏览器收到响应数据（date）之后，就可以做出一些操作，比如弹出窗口操作。</p>
<h3 id="Axios-请求方式别名"><a href="#Axios-请求方式别名" class="headerlink" title="Axios 请求方式别名"></a>Axios 请求方式别名</h3><p>为了方便起见，Axios 已经为所有支持的请求方法提供了别名</p>
<p>发送 Get 请求</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//1. Get方式  </span></span><br><span class="line">axios.get(<span class="string">"http://localhost:8080/ajax-dmeo/axiosServlet?username=zhangsan"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>)</span>{  </span><br><span class="line">    alert(resp.data);  </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>发送 Post 请求</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line">axios.post(<span class="string">"http://localhost:8080/ajax-dmeo/axiosServlet?username=zhangsan"</span>,<span class="string">"username=zhangsan"</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>)</span>{  </span><br><span class="line">    alert(resp.data);  </span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>原生的 Axios 书写方式 VS 别名的简化书写方式</p>
<ul>
<li>原生的书写格式：阅读性较好</li>
<li>别名的方式：代码量少，基本上只需要填写必要的参数信息</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Element 简明笔记</title>
    <url>/posts/Element-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Element-是什么"><a href="#Element-是什么" class="headerlink" title="Element 是什么"></a>Element 是什么</h3><p>将页面变得美美的呀😀</p>
<p>Element 是饿了么公司前端开发团队提供的一套基于 Vue 的网站组件库，用于快速构建网页<br>组件：组件网页的部件，例如：超链接、按钮、图片、表格等等</p>
<p>官网：<a href="https://element.eleme.cn/#/zh-CN">Element - 网站快速成型工具</a></p>
<h3 id="Element-快速入门"><a href="#Element-快速入门" class="headerlink" title="Element 快速入门"></a>Element 快速入门</h3><ol>
<li>引入 Element 的 css、js 文件和 Vue.js</li>
<li> 创建 Vue 核心对象</li>
<li>官网复制 Element 组件代码</li>
</ol>
<h4 id="1、将整个-element-ui-文件夹拷贝至-webapp-文件夹下"><a href="#1、将整个-element-ui-文件夹拷贝至-webapp-文件夹下" class="headerlink" title="1、将整个 element-ui 文件夹拷贝至 webapp 文件夹下"></a>1、将整个 element-ui 文件夹拷贝至 webapp 文件夹下</h4><p>因为包含了一整套组件，element-ui 包含了大量文件（差不多 8M 了）</p>
<h4 id="2、新建-HTML-页面，并引入-css、js-文件"><a href="#2、新建-HTML-页面，并引入-css、js-文件" class="headerlink" title="2、新建 HTML 页面，并引入 css、js 文件"></a>2、新建 HTML 页面，并引入 css、js 文件</h4><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过下载好的element-ui文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--或者--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css"&gt;</span></span><br><span class="line"><span class="comment">&lt;script src="https://unpkg.com/element-ui/lib/index.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="3、创建-Vue-核心对象-搭建框架"><a href="#3、创建-Vue-核心对象-搭建框架" class="headerlink" title="3、创建 Vue 核心对象 (搭建框架)"></a>3、创建 Vue 核心对象 (搭建框架)</h4><p>将代码写到 div 标签中即可；若需要引入 CSS 样式，可将其复制到 <code>&lt;/head&gt;</code> 之上</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"element-ui/lib/theme-chalk/index.css"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue({  </span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">"app"</span>,  </span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript">  })  </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="4、去官网上找组件的代码"><a href="#4、去官网上找组件的代码" class="headerlink" title="4、去官网上找组件的代码"></a>4、去官网上找组件的代码</h4><p>比如去官网上找着这个按钮，看起来还不错，复制它的代码到 div 标签中即可</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;el-button type=<span class="string">"danger"</span>&gt;危险按钮&lt;/el-button&gt;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="5、小案例的完整代码"><a href="#5、小案例的完整代码" class="headerlink" title="5、小案例的完整代码"></a>5、小案例的完整代码</h4><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"danger"</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">    <span class="attr">el</span>:<span class="string">"app"</span></span></span><br><span class="line"><span class="javascript">  })</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="Element-布局"><a href="#Element-布局" class="headerlink" title="Element 布局"></a>Element 布局</h3><p>Element 中有两种布局方式：Layout 布局和 Container 布局容器</p>
<h4 id="Layout-布局"><a href="#Layout-布局" class="headerlink" title="Layout 布局"></a>Layout 布局</h4><p>通过基础的 24 分栏，迅速简便地创建布局</p>
<p>官方案例：<a href="https://element.eleme.cn/#/zh-CN/component/layout">基础布局 | Element</a>，直接复制 CSS 和 HTML 标签到我们的页面当中即可</p>
<p><img data-src="https://s2.loli.net/2022/12/12/LQVR1SEGiDxtMv2.png" alt="01-从实例代码中复制HTML和CSS实现布局的引入.png"></p>
<h4 id="Container-容器布局"><a href="#Container-容器布局" class="headerlink" title="Container 容器布局"></a>Container 容器布局</h4><p>用于布局的容器组件，方便快速搭建页面的基本结构</p>
<p>官网示例：<a href="https://element.eleme.cn/#/zh-CN/component/container">Container 布局容器 | Element</a></p>
<p>同样也是复制 css 和 html。需要注意到是，如果布局中包含数据（比如含有表格等），那么我们只要将 data 复制到我们创建的 vue 对象中即可</p>
<p>官方给出代码</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> {</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> {</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> item = {</span></span><br><span class="line"><span class="javascript">        <span class="attr">date</span>: <span class="string">'2016-05-02'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>: <span class="string">'王小虎'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">address</span>: <span class="string">'上海市普陀区金沙江路 1518 弄'</span></span></span><br><span class="line"><span class="javascript">      };</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> {</span></span><br><span class="line"><span class="javascript">        <span class="attr">tableData</span>: <span class="built_in">Array</span>(<span class="number">20</span>).fill(item)</span></span><br><span class="line"><span class="javascript">      }</span></span><br><span class="line"><span class="javascript">    }</span></span><br><span class="line"><span class="javascript">  };</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>将 以上代码中的 data 复制到我们创建的 HTML 页面中的 vue 对象中去；同理，如果实例代码中有 methods 等属性的话，也一并复制到新建的 Vue 对象中去</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;script&gt;  </span><br><span class="line">  <span class="keyword">new</span> Vue({  </span><br><span class="line">    el:<span class="string">"app"</span>,  </span><br><span class="line">      data() {  </span><br><span class="line">          <span class="keyword">const</span> item = {  </span><br><span class="line">              date: <span class="string">'2016-05-02'</span>,  </span><br><span class="line">              name: <span class="string">'王小虎'</span>,  </span><br><span class="line">              address: <span class="string">'上海市普陀区金沙江路 1518 弄'</span>  </span><br><span class="line">          };  </span><br><span class="line">          <span class="keyword">return</span> {  </span><br><span class="line">              tableData: Array(<span class="number">20</span>).fill(item)  </span><br><span class="line">          }  </span><br><span class="line">      }  </span><br><span class="line">  })  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Element-组件"><a href="#Element-组件" class="headerlink" title="Element 组件"></a>Element 组件</h3><p>参考官方示例：<a href="https://element.eleme.cn/#/zh-CN/component/installation">组件 | Element</a></p>
]]></content>
      <tags>
        <tag>Front</tag>
      </tags>
  </entry>
  <entry>
    <title>Excel 操作指南</title>
    <url>/posts/Excel-operation-guide.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="保留源列宽"><a href="#保留源列宽" class="headerlink" title="保留源列宽"></a>保留源列宽</h3><p>目的：复制表格时，保持表格列宽格式相同</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240616105530.png" alt="image.png"></p>
<h3 id="尽量不要合并单元格"><a href="#尽量不要合并单元格" class="headerlink" title="尽量不要合并单元格"></a>尽量不要合并单元格</h3><ul>
<li>通过筛选之后，合并的单元格无法进行复制</li>
<li>跨行合并的数据可能影响筛选的结果</li>
</ul>
<h3 id="统计数据出现的次数"><a href="#统计数据出现的次数" class="headerlink" title="统计数据出现的次数"></a>统计数据出现的次数</h3><p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240616105519.png" alt="image.png"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">=IF(A2&lt;&gt;A1, COUNTIF(A:A, A2), "")</span><br></pre></td></tr></tbody></table></figure>

<p>为什么第 6 行和第 7 行单元格为空呢：通过 IF 函数进行判断，上下两行内容相同，所以显示为空</p>
<h3 id="统计不同种类的数据"><a href="#统计不同种类的数据" class="headerlink" title="统计不同种类的数据"></a>统计不同种类的数据</h3><p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240616104337.png" alt="image.png"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">=IF(COUNTIF($A$2:A2,A2)=1,MAX($B$1:B1)+1,"")</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">% 判断某一行的数据在整列当中是否为第一次出现</span><br><span class="line">COUNTIF($A$2:A2,A2)=1</span><br><span class="line"></span><br><span class="line">% 如果第一次出现，则值为1；之后每出现一个第一次出现的新数据，则该数据每次+1</span><br><span class="line">—&gt; MAX($B$1:B1)+1</span><br><span class="line"></span><br><span class="line">% 数据不是第一次出现，则为空值</span><br></pre></td></tr></tbody></table></figure>

<p>如上图所示，第 6，7，9 行都为空值，能不能让这些行都带上编号呢：</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240616105122.png" alt="image.png"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">=IF(COUNTIF($A$2:A2,A2)=1,MAX($B$1:B1)+1,VLOOKUP(A2,$A$1:B1,2,FALSE))</span><br></pre></td></tr></tbody></table></figure>

<p>第 6，7，9 行之所以为空值，是因为第二行中第一次出现了该数据，因此只需查询到第一次出现数据的第二列编号即可，而 VLOOKUP 函数会自动从上往下进行查找，就能正确的找到第二列的编号。</p>
<h3 id="复制工作表"><a href="#复制工作表" class="headerlink" title="复制工作表"></a>复制工作表</h3><p>按住 Ctrl 键拖动即可复制工作表</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240616105637.png" alt="image.png"></p>
<h3 id="查找工作表当中的合并单元格"><a href="#查找工作表当中的合并单元格" class="headerlink" title="查找工作表当中的合并单元格"></a>查找工作表当中的合并单元格</h3><p>需求：从别人接手的工作表，很可能包含大量合并的单元格，需要将它们取消合并</p>
<p>1、查找，进入 <code>格式</code> 选择</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240616105816.png" alt="image.png"></p>
<p>2、勾选 <code>合并单元格</code></p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240616105837.png" alt="image.png"></p>
<h3 id="宏绑定快捷键"><a href="#宏绑定快捷键" class="headerlink" title="宏绑定快捷键"></a>宏绑定快捷键</h3><p>如下图所示，不过不支持 Ctrl+ 数字键，那么就换成字母吧</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240616110637.png" alt="image.png"></p>
<h3 id="单元格是否存在某些内容"><a href="#单元格是否存在某些内容" class="headerlink" title="单元格是否存在某些内容"></a>单元格是否存在某些内容</h3><p>例如，若 E 列中存在 <code>PH值</code>、<code>PH</code>、<code>PH50%</code> 这些字样，那么在 I 列中将其提取出来</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240616111131.png" alt="image.png"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">=IF(ISNUMBER(SEARCH("pH", E4)), E4, "")</span><br></pre></td></tr></tbody></table></figure>

<p>为什么要用 ISNUMBER 函数：因为 SEARCH 函数在未找到指定的字符串时会返回错误值，而不是返回 0。<br>比如没有找到相应的文字，那么 search 返回 false，isnumber 函数返回 false，最终就返回空值。如果找到了相应的文字，那么 search 返回对应的索引，isnumber 函数返回 true，最终返回</p>
<hr>
<p>进一步地，将一个词的条件变为多个词，需求如下：</p>
<p>只要单元格存在 <code>氢氰酸</code>、<code>总氰</code>、<code>游离氢氰酸</code>、<code>游离丙酮</code>、<code>硫酸丙酮</code>、<code>氰醇</code> 这几个词中的某一个，那么就判断正确（即需要在其他列中将其提取出），否则为空</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">=IF(</span><br><span class="line">    OR(</span><br><span class="line">        ISNUMBER(SEARCH("氢氰酸", E4)),</span><br><span class="line">        ISNUMBER(SEARCH("总氰", E4)),</span><br><span class="line">        ISNUMBER(SEARCH("游离氢氰酸", E4)),</span><br><span class="line">        ISNUMBER(SEARCH("游离丙酮", E4)),</span><br><span class="line">        ISNUMBER(SEARCH("硫酸", E4)),</span><br><span class="line">        ISNUMBER(SEARCH("丙酮氰醇含量", E4))</span><br><span class="line">    ),</span><br><span class="line">    E4,</span><br><span class="line">    ""</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">=LCM(B2:B5)</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240616112110.png" alt="image.png"></p>
<h3 id="合并单元格-宏程序"><a href="#合并单元格-宏程序" class="headerlink" title="合并单元格 - 宏程序"></a>合并单元格 - 宏程序</h3><p>假设三个单元格都存在数据，将这连续的三个单元格合并时，默认只会保留左上角单元格的数据，其他单元格数据丢失。而如果有如下需求：需要将多个单元格数据都保留下来</p>
<p><img data-src="https://s2.loli.net/2024/06/21/Rh7WlzgIAvujyKB.gif"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Sub 合并选定单元格()</span><br><span class="line">    Dim rng As Range</span><br><span class="line">    Dim mergedCell As Range</span><br><span class="line">    Dim cell As Range</span><br><span class="line">    Dim text As String</span><br><span class="line">    </span><br><span class="line">    ' 检查是否有选定的单元格</span><br><span class="line">    If Selection.Cells.Count &lt; 2 Then</span><br><span class="line">        MsgBox "请选择至少2个单元格进行合并。"</span><br><span class="line">        Exit Sub</span><br><span class="line">    End If</span><br><span class="line">    </span><br><span class="line">    Set rng = Selection ' 获取选定的单元格范围</span><br><span class="line">    </span><br><span class="line">    ' 创建一个合并单元格</span><br><span class="line">    Set mergedCell = rng.Cells(1)</span><br><span class="line">    </span><br><span class="line">    ' 将其他单元格的值添加到合并单元格中</span><br><span class="line">    For Each cell In rng</span><br><span class="line">        If cell.Value &lt;&gt; "" Then</span><br><span class="line">            text = text &amp; cell.Value &amp; Chr(10) ' Chr(10) 表示换行符</span><br><span class="line">        End If</span><br><span class="line">    Next cell</span><br><span class="line">    </span><br><span class="line">    ' 去除最后一个换行符</span><br><span class="line">    text = Left(text, Len(text) - 1)</span><br><span class="line">    </span><br><span class="line">    ' 将合并后的文本赋值给合并单元格</span><br><span class="line">    mergedCell.Value = text</span><br><span class="line">    </span><br><span class="line">    ' 合并单元格</span><br><span class="line">    rng.Merge</span><br><span class="line">End Sub</span><br></pre></td></tr></tbody></table></figure>

<h3 id="拆解合并的单元格（并填充内容）"><a href="#拆解合并的单元格（并填充内容）" class="headerlink" title="拆解合并的单元格（并填充内容）"></a>拆解合并的单元格（并填充内容）</h3><p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240616110145.png" alt="image.png"></p>
<p>例如第 145 和 146 行，按照常规拆解单元格流程，拆解后只有 145 行保留数据，146 行数据为空。<br>需求如下：如何保持每一格单元格的内容和拆解前的保持一致</p>
<figure class="highlight vb"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">Sub</span> 宏<span class="number">1</span>()</span><br><span class="line"><span class="comment">'</span></span><br><span class="line"><span class="comment">' 宏1 宏</span></span><br><span class="line"><span class="comment">' 取消合并行。请注意，这段代码假设你只选择了一个连续的单元格范围。如果选择的范围包含多个不连续的区域，代码可能无法正常工作。确保选择的范围是连续的单元格范围。</span></span><br><span class="line"><span class="comment">'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">'</span></span><br><span class="line">    <span class="keyword">Dim</span> selectedRange <span class="keyword">As</span> Range</span><br><span class="line">    <span class="keyword">Set</span> selectedRange = Selection <span class="comment">' 将选择的单元格范围存储到变量中</span></span><br><span class="line">    </span><br><span class="line">    selectedRange.<span class="keyword">Select</span></span><br><span class="line">    Selection.UnMerge</span><br><span class="line">    selectedRange.Rows(<span class="number">1</span>).AutoFill Destination:=selectedRange, Type:=xlFillCopy <span class="comment">' 使用第一行的内容自动填充整个范围</span></span><br><span class="line">    selectedRange.<span class="keyword">Select</span></span><br><span class="line">    selectedRange.Cells(selectedRange.Rows.Count, selectedRange.Columns.Count).<span class="keyword">Select</span> <span class="comment">' 选中范围中的最后一个单元格</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2024/06/16/AEsXvW4lTRC6qnF.gif"></p>
<h3 id="计算单元格中字符出现的次数"><a href="#计算单元格中字符出现的次数" class="headerlink" title="计算单元格中字符出现的次数"></a>计算单元格中字符出现的次数</h3><p><img data-src="https://s2.loli.net/2024/06/21/5Qpiew3kAJST6R9.png" alt="image.png"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">=LEN(A2) - LEN(SUBSTITUTE(A2, "k", ""))</span><br></pre></td></tr></tbody></table></figure>

<p>公式思路：先计算单元格中总的字符长度，然后将要找到字符替换为空字符，那么『总长度』减去『替换为空字符后的长度』，就是你要找到字符的个数<br>SUBSTITUTE：将 <code>"k"</code> 替换为空字符 <code>""</code></p>
<h3 id="ROUNDUP-函数"><a href="#ROUNDUP-函数" class="headerlink" title="ROUNDUP 函数"></a>ROUNDUP 函数</h3><p>参考资料：<a href="https://support.microsoft.com/zh-cn/office/roundup-%E5%87%BD%E6%95%B0-f8bc9b23-e795-47db-8703-db171d0c42a7">Fetching Title#mrdb</a></p>
<p>朝着远离 0（零）的方向将数字进行向上舍入：</p>
<ul>
<li>ROUNDUP 的行为与 ROUND 相似，所不同的是它始终将数字进行向上舍入</li>
<li>如果 num_digits 大于 0（零），则将数字向上舍入到指定的小数位数。</li>
<li>如果 num_digits 为 0，则将数字向上舍入到最接近的整数。</li>
<li>如果 num_digits 小于 0，则将数字向上舍入到小数点左边的相应位数。</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">=ROUNDUP(3.001,0) —&gt; 4</span><br><span class="line">=ROUNDUP(3.01,1) —&gt; 3.1</span><br><span class="line"></span><br><span class="line">注意：该函数并不考虑什么四舍五入，都是向上取整</span><br><span class="line"></span><br><span class="line">=ROUNDUP(-3.14159, 1) —&gt; 如果第一个参数是正数，那么返回值是3.2；是负数，返回-3.2</span><br><span class="line"></span><br><span class="line">=ROUNDUP(31415.92654, -2) —&gt; 将 31415.92654 向上舍入到小数点左边两位数，结果为31500</span><br></pre></td></tr></tbody></table></figure>

<h3 id="多列数据合并（自动添加分隔符）"><a href="#多列数据合并（自动添加分隔符）" class="headerlink" title="多列数据合并（自动添加分隔符）"></a>多列数据合并（自动添加分隔符）</h3><p>未完待续…</p>
]]></content>
      <tags>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>Figma 学习笔记</title>
    <url>/posts/Figma-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Figma 汉化社区：<a href="https://www.figma.cool/cn">Figma 软件汉化 - Figma 中文版下载 - Figma 中文社区</a></li>
<li><a href="https://www.figmacn.com/">Designtools - Figma</a></li>
</ul>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul>
<li>Designtools 社区：<a href="https://designtools.app/figma/64313af5-9847-43ab-8184-360232c48270">史上最全 Figma 快捷键（持续更新……）</a></li>
</ul>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul>
<li>Figma 插件：<a href="https://www.figma.cool/plugins">Figma 插件组件推荐 - 插件库安装 - Figma 中文社区</a></li>
<li>流程图箭头：<a href="https://www.figma.com/community/plugin/733902567457592893/Autoflow">Autoflow&nbsp;| Figma Community</a></li>
<li> 轴测图生成器：<a href="https://www.figma.com/community/plugin/741184519069077841/Isometric">Isometric</a></li>
<li> 移除图片背景：<a href="https://www.figma.com/community/plugin/738992712906748191/Remove-BG">Remove BG</a></li>
</ul>
<h3 id="优秀教程"><a href="#优秀教程" class="headerlink" title="优秀教程"></a>优秀教程</h3><ul>
<li>无序的思考，有序的设计：<a href="https://www.woshipm.com/it/5181419.html">Figma 使用分享 | 人人都是产品经理</a></li>
<li> Bilibili： <a href="https://space.bilibili.com/108104104/">草帽 sMao 主页</a></li>
<li> Figmacn（常见的问题讲解）： <a href="https://figmacn.com/post/faq">Figma 常见问题与基础操作</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Fancyhdr 宏包之使用指南</title>
    <url>/posts/Fancyhdr-Macro-Package-User&#39;s-Guide.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在用 LaTeX 排版文章、书籍时，缺省定义了四种页眉页脚的格式：</p>
<table>
<thead>
<tr>
<th><strong>参数</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td> empty</td>
<td> 没有页眉和页脚</td>
</tr>
<tr>
<td> plain</td>
<td> 没有页眉，页脚中部放置页码。</td>
</tr>
<tr>
<td>headings</td>
<td> 没有页脚，页眉包含章节的标题和页码。</td>
</tr>
<tr>
<td>myheadings</td>
<td> 没有页脚，页眉页码和使用者所定义的信息。</td>
</tr>
</tbody></table>
<p>article&nbsp;缺省使用&nbsp;plain&nbsp;格式，而&nbsp;book&nbsp;则使用 headings&nbsp;格式。 也可用&nbsp;<code>\pagestyle</code>&nbsp;命令在你的文档中设定所用的格式，例如在文档中使用&nbsp;<code>\pagestyle{empty}</code>&nbsp;则使得此后的页面没有页眉和页脚。 一般情况下，这四种格式基本可满足排版的要求。但在某些情况下，特别是使用者想定义自己的页眉和页脚格式时，就会遇到很多限制和麻烦。这时， 使用&nbsp;fancyhdr&nbsp;宏包可以很容易地达到目的。</p>
<p>利用&nbsp;fancyhdr&nbsp;宏包提供的命令，可以方便的作到：</p>
<ul>
<li>自定义页眉和页脚。</li>
<li>为页眉和页脚加上装饰性的横线。</li>
<li>页眉和页脚的宽度可以超过正文文本的宽度。</li>
<li>多行的页眉和页脚。</li>
<li>奇偶页使用不同格式的页眉和页脚。</li>
<li>每章的首页使用不同格式的页眉和页脚。</li>
<li>浮动对象页使用不同格式的页眉和页脚。</li>
<li>控制页眉和页脚的字体，包括字形，字族，大小写等。</li>
</ul>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="单面排版"><a href="#单面排版" class="headerlink" title="单面排版"></a>单面排版</h4><p>由&nbsp;fancyhdr&nbsp;所定义的页眉和页脚的形式与位置如图所示：</p>
<p><img data-src="https://s2.loli.net/2022/06/29/wf3lDBcZY1tkWhA.png" alt="06-奇数页样式.png"></p>
<p>上述六个区域的内容和两条装饰线可由用户自己定义。</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\lhead</span>{left head}</span><br><span class="line"><span class="keyword">\chead</span>{center head}</span><br><span class="line"><span class="keyword">\rhead</span>{right head}</span><br><span class="line"><span class="keyword">\lfoot</span>{left foot}</span><br><span class="line"><span class="keyword">\cfoot</span>{center foot}</span><br><span class="line"><span class="keyword">\rfoot</span>{right foot}</span><br><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\headrulewidth</span>}{0pt} <span class="comment">%设置页眉横线宽度为0</span></span><br><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\footrulewidth</span>}{0pt} <span class="comment">%设置页脚横线宽度为0</span></span><br></pre></td></tr></tbody></table></figure>

<p>如果想在文档中改用其它形式，比如在第一页不要页眉和页脚，则可在&nbsp;<code>\begin{document}</code>&nbsp;和&nbsp;<code>\maketitle</code>&nbsp;后使用命令</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\thispagestyle</span>{empty}</span><br></pre></td></tr></tbody></table></figure>

<p>缺省情况下，<code>\maketitle</code>&nbsp;命令会自动设置其所在页的格式为&nbsp;plain&nbsp;。因此，如果你想在该页使用&nbsp;fancy&nbsp;格式的话，应该在&nbsp;<code>\maketile</code> 后面使用命令&nbsp;<code>\thispagestyle{fancy}</code>。</p>
<h4 id="双面排版"><a href="#双面排版" class="headerlink" title="双面排版"></a>双面排版</h4><p>下面是一个双面页版式下的例子（book、ctexbook 等文档类默认为双面排版）：</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexbook}  </span><br><span class="line"><span class="keyword">\usepackage</span>{zhlipsum} <span class="comment">%用于生成假文</span></span><br><span class="line"><span class="keyword">\usepackage</span>{fancyhdr}</span><br><span class="line"><span class="keyword">\fancyhead</span>{} <span class="comment">%清空所有页眉页脚设置 </span></span><br><span class="line"><span class="keyword">\fancyhead</span>[RO,LE]{<span class="keyword">\bfseries</span> 作者：原装咖啡}</span><br><span class="line"><span class="keyword">\fancyfoot</span>[LE,RO]{<span class="keyword">\thepage</span>}</span><br><span class="line"><span class="keyword">\fancyfoot</span>[LO,CE]{From: Coffeelize.top}</span><br><span class="line"><span class="keyword">\fancyfoot</span>[CO,RE]{To: Latex User}</span><br><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\headrulewidth</span>}{0.4pt} <span class="keyword">\renewcommand</span>{<span class="keyword">\footrulewidth</span>}{0.4pt}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\pagestyle</span>{fancy} <span class="comment">%非常关键的一句命令</span></span><br><span class="line"> <span class="keyword">\section</span>{第一章} </span><br><span class="line"> <span class="keyword">\zhlipsum</span>[1-3]</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p>对于奇数页<br><img data-src="https://s2.loli.net/2022/06/29/wf3lDBcZY1tkWhA.png" alt="06-奇数页样式.png"><br>对于偶数页<br><img data-src="https://s2.loli.net/2022/06/29/r9ZHPmVs6hk3icD.png" alt="07-偶数页样式.png"></p>
<p>这里方括号中字母代表的意义为：</p>
<table>
<thead>
<tr>
<th align="center"><strong>符号</strong></th>
<th align="center"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"> E</td>
<td align="center"> 偶数页</td>
</tr>
<tr>
<td align="center"> O</td>
<td align="center"> 奇数页</td>
</tr>
<tr>
<td align="center"> L</td>
<td align="center"> 页眉或页脚的左边部分</td>
</tr>
<tr>
<td align="center"> C</td>
<td align="center"> 页眉或页脚的中间部分</td>
</tr>
<tr>
<td align="center"> R</td>
<td align="center"> 页眉或页脚的右边部分</td>
</tr>
<tr>
<td align="center"> H</td>
<td align="center"> 页眉</td>
</tr>
<tr>
<td align="center"> F</td>
<td align="center"> 页脚</td>
</tr>
</tbody></table>
<h4 id="设置页眉页脚横线的宽度"><a href="#设置页眉页脚横线的宽度" class="headerlink" title="设置页眉页脚横线的宽度"></a>设置页眉页脚横线的宽度</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\headrulewidth</span>}{0.4pt} <span class="comment">% 设置页眉横线宽度为0.4</span></span><br><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\footrulewidth</span>}{0.4pt} <span class="comment">% 设置页脚横线宽度为0.4</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="拓展应用"><a href="#拓展应用" class="headerlink" title="拓展应用"></a>拓展应用</h3><h4 id="修改页码的颜色"><a href="#修改页码的颜色" class="headerlink" title="修改页码的颜色"></a>修改页码的颜色</h4><p>还记得以上案例中的这句代码吗</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\pagestyle</span>{fancy} <span class="comment">%非常关键的一句命令</span></span><br></pre></td></tr></tbody></table></figure>

<p>这句代码的意思是使用 fancy 这个样式（我们并没有对其进行定义，可能是文档类已经对其进行了预定义）<br>实际上我们也是可以自定义这个 pagestyle 的，如下代码中定义了一个新的 pagestyle：<code>fancy-note</code></p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%语法\fancypagestyle{style name}{definitions} </span></span><br><span class="line"><span class="keyword">\fancypagestyle</span>{fancy-note}{ </span><br><span class="line"><span class="keyword">\fancyhf</span>{} <span class="comment">%同时清空页眉页脚</span></span><br><span class="line"><span class="comment">%语法\fancyfoot[places]{footer} </span></span><br><span class="line"><span class="keyword">\fancyfoot</span>[c]{<span class="keyword">\footnotesize</span><span class="keyword">\textcolor</span>{mycolor}{<span class="keyword">\thepage</span>}}</span><br><span class="line">}</span><br><span class="line"><span class="comment">% 正文开始</span></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"><span class="comment">%...</span></span><br><span class="line"><span class="keyword">\pagestyle</span>{fancy-note} <span class="comment">%调用自定义的pagestyle</span></span><br><span class="line"><span class="comment">%...</span></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p>最终输出为</p>
<p><img data-src="https://s2.loli.net/2022/06/30/y7bXWoZuev2gNYw.png" alt="092-调整页脚字体颜色.png"></p>
<p>以上代码中<br><code>\textcolor</code> 需要使用 xcolor 宏包（用于自定义颜色名称，可以参考博客之前的文章：<a href="https://coffeelize.top/posts/c07914ac.html?highlight=xcolor">Latex 之字体颜色篇</a>）<br><code>\footnotesize</code> 则是已经预定于好的页脚字体的字号</p>
<p><img data-src="https://s2.loli.net/2022/06/30/3On48tCzrqGcJhD.png" alt="09-预定于的字号.png"></p>
<p>标准文档类中的字号大小</p>
<p><img data-src="https://s2.loli.net/2022/06/30/HU4So7KO1NaG9ZF.png" alt="091-标准文档类中的字号大小.png"></p>
<table>
<thead>
<tr>
<th align="center"><strong>字号</strong></th>
<th align="center"><strong> 10pt 选项（默认)</strong></th>
<th align="center"><strong>11pt 选项</strong></th>
<th align="center"><strong> 12pt 选项</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>\tiny</code></td>
<td align="center">5pt</td>
<td align="center">6pt</td>
<td align="center">6pt</td>
</tr>
<tr>
<td align="center"><code>\scriptsize</code></td>
<td align="center">7pt</td>
<td align="center">8pt</td>
<td align="center">8pt</td>
</tr>
<tr>
<td align="center"><code>\footnotesize</code></td>
<td align="center">8pt</td>
<td align="center">9pt</td>
<td align="center">10pt</td>
</tr>
<tr>
<td align="center"><code>\small</code></td>
<td align="center">9pt</td>
<td align="center">10pt</td>
<td align="center">10.95pt</td>
</tr>
<tr>
<td align="center"><code>\normalsize</code></td>
<td align="center">10pt</td>
<td align="center">10.95pt</td>
<td align="center">12pt</td>
</tr>
<tr>
<td align="center"><code>\large</code></td>
<td align="center">12pt</td>
<td align="center">12pt</td>
<td align="center">14.4pt</td>
</tr>
<tr>
<td align="center"><code>\Large</code></td>
<td align="center">14.4pt</td>
<td align="center">14.4pt</td>
<td align="center">17.28pt</td>
</tr>
<tr>
<td align="center"><code>\LARGE</code></td>
<td align="center">17.28pt</td>
<td align="center">17.28pt</td>
<td align="center">20.74pt</td>
</tr>
<tr>
<td align="center"><code>\huge</code></td>
<td align="center">20.74pt</td>
<td align="center">20.74pt</td>
<td align="center">24.88pt</td>
</tr>
<tr>
<td align="center"><code>\Huge</code></td>
<td align="center">24.88pt</td>
<td align="center">24.88pt</td>
<td align="center">24.88pt</td>
</tr>
</tbody></table>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>ctex.org：<a href="http://www.ctex.org/documents/packages/layout/fancyhdr.htm">CTEX - 在线文档 - TeX/LaTeX 常用宏包</a></li>
<li> Latex 官方入门手册：一份（不太）简短的 LaTeX2ε 介绍</li>
</ul>
]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 简明笔记</title>
    <url>/posts/Docker-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="初识-Docker"><a href="#初识-Docker" class="headerlink" title="初识 Docker"></a>初识 Docker</h2><h3 id="项目部署的问题"><a href="#项目部署的问题" class="headerlink" title="项目部署的问题"></a>项目部署的问题</h3><p>微服务虽然具备各种各样的优势，但服务的拆分通用给部署带来了很大的麻烦</p>
<ul>
<li>分布式系统中，依赖的组件非常多，不同组件之间部署时往往会产生一些冲突<ul>
<li>依赖关系复杂，容易出现兼容性问题</li>
</ul>
</li>
<li>在数百上千台服务中重复部署，环境不一定一致，会遇到各种问题<ul>
<li>开发、测试、生产环境有差异</li>
</ul>
</li>
</ul>
<h4 id="Docker-解决依赖兼容问题"><a href="#Docker-解决依赖兼容问题" class="headerlink" title="Docker 解决依赖兼容问题"></a>Docker 解决依赖兼容问题</h4><p><strong>Docker 如何解决依赖的兼容问题的呢</strong>，采用了两个手段：</p>
<ul>
<li>将应用的 Libs（函数库）、Deps（依赖）、配置与应用一起 <strong>打包</strong></li>
<li>将每个应用放到一个 <strong>隔离</strong> 容器去运行，避免互相干扰</li>
</ul>
<p><img data-src="https://s2.loli.net/2023/01/12/FcPREX3drLv6sWm.png" alt="01-应用放在隔离带容器中运行.png"></p>
<p>这样打包好的应用包中，既包含应用本身，也保护应用所需要的 Libs、Deps，无需再操作系统上安装这些，自然就不存在不同应用之间的兼容问题了</p>
<h4 id="Docker-解决操作系统环境差异"><a href="#Docker-解决操作系统环境差异" class="headerlink" title="Docker 解决操作系统环境差异"></a>Docker 解决操作系统环境差异</h4><p>虽然解决了不同应用的兼容问题，但是开发、测试等环境会存在差异，操作系统版本也会有差异，怎么解决这些问题呢？</p>
<p><img data-src="https://s2.loli.net/2023/01/12/XjDYAhdfkLz42EH.png" alt="02-操作系统结构.png"></p>
<ul>
<li>计算机硬件：例如 CPU、内存、磁盘等</li>
<li>系统内核（内核与硬件交互，提供操作硬件指令）：所有 Linux 发行版的内核都是 Linux，例如 CentOS、Ubuntu、Fedora 等。内核可以与计算机硬件交互，对外提供 <strong>内核指令</strong>，用于操作计算机硬件</li>
<li>系统应用（系统应用封装内核指令为函数，便于程序员调用）：操作系统本身提供的应用、函数库。这些函数库是对内核指令的封装，使用更加方便</li>
</ul>
<p>Ubuntu 和 CentOS 都是基于 Linux 内核，无非是系统应用不同，提供的函数库有差异。此时，如果将一个 Ubuntu 版本的 MySQL 应用安装到 CentOS 系统，MySQL 在调用 Ubuntu 函数库时，会发现找不到或者不匹配，就会报错了，<strong>那 Docker 如何解决不同系统环境问题的呢</strong>？</p>
<ul>
<li>Docker 将用户程序与所需要调用的系统 (比如 Ubuntu) 函数库一起打包</li>
<li> Docker 运行到不同操作系统时，直接基于打包的函数库，借助于操作系统的 Linux 内核来运行</li>
</ul>
<p>那么就可以认为 Docer 打包好的程序包可以应用在任何 Linux 内核的操作系统上</p>
<p><img data-src="https://s2.loli.net/2023/01/12/9Fv3Mx27gHGnOkW.png" alt="03-Docker打包好的程序包可以运行在任一Linux内核的系统上.png"></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Docker 是一个快速交付应用、运行应用的技术，具备下列优势：</p>
<ul>
<li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意 Linux 操作系统</li>
<li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰</li>
<li>启动、移除都可以通过一行命令完成，方便快捷</li>
</ul>
<h2 id="Docker-架构"><a href="#Docker-架构" class="headerlink" title="Docker 架构"></a>Docker 架构</h2><h3 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h3><ul>
<li>镜像（Image，硬盘中的文件）：Docker 将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像</li>
<li>容器（Container，相当于进程）：镜像中的应用程序运行后形成的进程就是容器，只是 Docker 会给容器进程做隔离，对外不可见</li>
</ul>
<p><strong>镜像都是只读的</strong>，这样可以防止容器对镜像数据的写入，造成数据污染；如果容器需要写数据，可以从镜像中拷贝一份数据到自己的空间中，在本空间中进行读写操作</p>
<p><img data-src="https://s2.loli.net/2023/01/12/wg1I9Hf7enZRzv6.png" alt="04-镜像和容器.png"></p>
<h3 id="DockerHub"><a href="#DockerHub" class="headerlink" title="DockerHub"></a>DockerHub</h3><p>DockerHub 是一个官方的 Docker 镜像的托管平台。这样的平台称为 Docker Registry，国内也有类似于 DockerHub 的公开服务，比如 <a href="https://c.163yun.com/hub">网易云镜像服务</a>、<a href="https://cr.console.aliyun.com/">阿里云镜像库</a> 等</p>
<p>我们一方面可以将自己的镜像共享到 DockerHub，另一方面也可以从 DockerHub 拉取镜像<br><img data-src="https://s2.loli.net/2023/01/12/NgaKpJTAxshWt8n.png" alt="05-DockerHub.png"></p>
<h3 id="Docker-架构-1"><a href="#Docker-架构-1" class="headerlink" title="Docker 架构"></a>Docker 架构</h3><p>Docker 是一个 CS 架构的程序，由两部分组成</p>
<ul>
<li>服务端 (server)：Docker 守护进程，负责处理 Docker 指令，管理镜像、容器等</li>
<li>客户端 (client)：通过命令或 RestAPI 向 Docker 服务端发送指令。可以在本地或远程向服务端发送指令</li>
</ul>
<p><img data-src="https://s2.loli.net/2023/01/12/fOX7ZhIcWmk6xDP.png" alt="06-Docker架构.png"></p>
<h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。这里主要介绍 CentOS 安装 Docker</p>
<p>1.1、卸载（可选）</p>
<p>如果之前安装过旧版本的 Docker，可以使用下面命令卸载</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></tbody></table></figure>

<p><code>\</code> 表示命令没有结束还需要继续往下读（换行），命令太长可以通过 <code>\</code> 提高可读性</p>
<p>1.2、安装 yum-utils 工具</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></tbody></table></figure>

<p>1.3、设置下载的镜像源</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sed -i <span class="string">'s/download.docker.com/mirrors.aliyun.com\/docker-ce/g'</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">yum makecache fast</span><br></pre></td></tr></tbody></table></figure>

<p>1.4、安装 docker</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></tbody></table></figure>

<p>至此 docker 安装完毕</p>
<h3 id="启动-docker"><a href="#启动-docker" class="headerlink" title="启动 docker"></a>启动 docker</h3><p>Docker 应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙。启动 docker 前，一定要关闭防火墙！</p>
<p>1、关闭防火墙</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"># 关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"># 禁止开机启动防火墙</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"># 查看防火墙状态</span><br><span class="line">systemctl status firewalld</span><br></pre></td></tr></tbody></table></figure>

<p>2、启动 Docker</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">systemctl start docker  # 启动docker服务</span><br><span class="line"></span><br><span class="line">systemctl stop docker  # 停止docker服务</span><br><span class="line"></span><br><span class="line">systemctl restart docker  # 重启docker服务</span><br></pre></td></tr></tbody></table></figure>

<p>3、可通过查看 Docker 状态或 Docker 版本查看是否已经启动</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">systemctl status docker</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">docker -v</span><br></pre></td></tr></tbody></table></figure>

<h3 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h3><p>docker 官方镜像仓库网速较差，我们需要设置国内镜像服务，可参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">//将内容写入json文件中</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">{</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://5vycoa8o.mirror.aliyuncs.com"</span>]</span><br><span class="line">}</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Docker-基本操作"><a href="#Docker-基本操作" class="headerlink" title="Docker 基本操作"></a>Docker 基本操作</h2><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><h4 id="镜像名称"><a href="#镜像名称" class="headerlink" title="镜像名称"></a>镜像名称</h4><p>镜名称一般分两部分组成：<code>[repository]:[tag]</code>，在没有指定 tag 时，默认是 latest，代表最新版本的镜像。如这里的 mysql 就是 repository，5.7 就是 tag，合一起就是镜像名称，代表 5.7 版本的 MySQL 镜像</p>
<p><img data-src="https://s2.loli.net/2023/01/12/e1sEAnpQFOm28JB.png" alt="07-镜像名称的组成.png"></p>
<h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><p>常见的镜像操作命令如图</p>
<p><img data-src="https://s2.loli.net/2023/01/12/dCaSEuzIOwcbf8R.png" alt="08-常用镜像指令.png"></p>
<ul>
<li>从镜像服务器拉去镜像：docker pull</li>
<li> 从本地文件构建镜像：docker build</li>
<li> 查看本地存在哪些镜像：docker images</li>
<li> 删除本地镜像：docker rmi</li>
<li> 推送镜像到镜像服务器：docker push</li>
<li> 将镜像打包成一个压缩包：docker save</li>
<li> 加载压缩包为镜像：docker load</li>
</ul>
<p>查看 docker 帮助文档</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//查看docker命令及简介</span></span><br><span class="line">docker --help</span><br><span class="line"><span class="comment">//查看具体的某一命令，比如这里详细查看images命令的功能</span></span><br><span class="line">docker images --help</span><br></pre></td></tr></tbody></table></figure>

<h4 id="案例：从-DockerHub-中拉取镜像"><a href="#案例：从-DockerHub-中拉取镜像" class="headerlink" title="案例：从 DockerHub 中拉取镜像"></a>案例：从 DockerHub 中拉取镜像</h4><p>需求：从 DockerHub 中拉取一个 nginx 镜像并查看</p>
<p>1、首先去镜像仓库搜索 nginx 镜像，比如 <a href="https://hub.docker.com/">Docker Hub Container Image Library | App Containerization</a></p>
<p><img data-src="https://s2.loli.net/2023/01/12/En6MHQAx7ucKbkY.png" alt="09-DockerHub拉取镜像.png"></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//这里官方示例中没有指定版本，那么默认就是最新版</span></span><br><span class="line">docker pull nginx</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2023/01/12/a1j2ylNWkPuSIK3.png" alt="10-DockerHub搜索镜像.png"></p>
<p>2、查看镜像</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></tbody></table></figure>

<p>可以查看到本地中已经有 Nginx 镜像了</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx        latest    605c77e624dd   12 months ago   141MB</span><br></pre></td></tr></tbody></table></figure>

<h4 id="案例：通过压缩包导出导入镜像"><a href="#案例：通过压缩包导出导入镜像" class="headerlink" title="案例：通过压缩包导出导入镜像"></a>案例：通过压缩包导出导入镜像</h4><p>需求：利用 docker save 将 nginx 镜像导出磁盘，然后再通过 load 加载回来</p>
<p>1、利用 docker xx –help 命令查看 docker save 和 docker load 的语法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker save --help</span><br></pre></td></tr></tbody></table></figure>

<p>通过帮助文档可得知 save 的命令格式为：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker save -o [保存的目标文件名称] [镜像名称]</span><br></pre></td></tr></tbody></table></figure>

<p>2、使用 docker save 导出镜像到磁盘</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker save -o nginx.tar nginx:latest</span><br></pre></td></tr></tbody></table></figure>

<p><code>-o</code> 表示选项，注意此时镜像在本地还是有的</p>
<p>3、使用 docker load 加载镜像</p>
<p>3.1）先删除本地的 nginx 镜像</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker rmi nginx:latest</span><br></pre></td></tr></tbody></table></figure>

<p>3.2）加载压缩包镜像</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker load -i nginx.tar</span><br></pre></td></tr></tbody></table></figure>

<h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><h4 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h4><p><img data-src="https://s2.loli.net/2023/01/12/IVYrTOqAgRfZQwM.png" alt="11-容器常用指令.png"></p>
<p>容器有三个状态：</p>
<ul>
<li>运行：进程正常运行</li>
<li>暂停：进程暂停，CPU 不再运行，并不释放内存</li>
<li>停止：进程终止，回收进程占用的内存、CPU 等资源</li>
</ul>
<p>容器操作的命令：</p>
<ul>
<li>docker run：创建并运行一个容器，处于运行状态</li>
<li> docker pause：让一个运行的容器暂停</li>
<li> docker unpause：让一个容器从暂停状态恢复运行</li>
<li> docker stop：停止一个运行的容器</li>
<li> docker start：让一个停止的容器再次运行</li>
<li> docker rm：删除一个容器</li>
<li> docker ps：查看所有运行的容器及状态</li>
<li> docker logs：查看容器运行日志</li>
<li> docker exec：进入容器执行命令</li>
</ul>
<h4 id="案例：创建运行一个容器"><a href="#案例：创建运行一个容器" class="headerlink" title="案例：创建运行一个容器"></a>案例：创建运行一个容器</h4><p>需求：创建并运行 nginx 容器的命令</p>
<p>可以去官网搜索 Nginx，并查看其文档：<a href="https://hub.docker.com/_/nginx">nginx - Official Image | Docker Hub</a>，比如官网中给了如下运行命令示例：</p>
<figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line">docker run --name some-nginx -d -p 8080:80 some-content-nginx</span><br></pre></td></tr></tbody></table></figure>

<p>这里以如下命令进行命令解读：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker run --name containerName -p <span class="number">80</span>:<span class="number">80</span> -d nginx</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>docker run ：创建并运行一个容器</li>
<li>–name : 给容器起一个名字，比如叫做 mn</li>
<li>-p ：将宿主机端口与容器端口映射，冒号左侧是宿主机端口，右侧是容器端口；此处宿主机端口不做要求，但容器端口基本上取决于容器本身（软件监听的端口可能就是某一个端口）</li>
<li>-d：后台运行容器</li>
<li> nginx：镜像名称，例如 nginx，没有写标签 tag 说明是最新版 latest</li>
</ul>
<p>![[Pasted image 20230110202450.png]]</p>
<p>因为容器是隔离的，所以用户无法直接通过 80 端口来访问到容器，需要将容器的端口与宿主机端口映射。端口映射就相当于将原本隔离的容器暴露出一个小窗口，通过这个小窗口来对容器进行访问</p>
<p>容器创建完成后，会生成一个唯一 ID</p>
<figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker run --name mn -p 80:80 -d nginx</span><br><span class="line">b8ae9bcbdde97a1ef9b055e44470427cd937571c4f2fdb5cb7a710c3d9a828e7</span><br></pre></td></tr></tbody></table></figure>

<p>通过访问宿主机 80 端口，就可访问 docker 中的 Nginx 服务了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">192.168</span><span class="number">.119</span><span class="number">.128</span>:<span class="number">80</span></span><br></pre></td></tr></tbody></table></figure>

<p>通过 logs 命令可以查看容器日志</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//命令格式</span></span><br><span class="line">docker logs [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line"><span class="comment">//docker logs 容器名</span></span><br><span class="line">docker logs mn</span><br><span class="line"></span><br><span class="line"><span class="comment">//持续跟踪日志，通过Ctrl+C可以停止跟踪</span></span><br><span class="line">docker logs -f mn</span><br></pre></td></tr></tbody></table></figure>

<h4 id="案例：操作容器"><a href="#案例：操作容器" class="headerlink" title="案例：操作容器"></a>案例：操作容器</h4><p>需求：进入 Nginx 容器，修改 HTML 文件内容，添加 “coffeelize 欢迎您”</p>
<p>1、进入容器（容器是运行的）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker exec -it mn bash</span><br></pre></td></tr></tbody></table></figure>

<p>命令解读：</p>
<ul>
<li>docker exec ：进入容器内部，执行一个命令</li>
<li> -it : 给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</li>
<li> mn ：要进入的容器的名称</li>
<li> bash：进入容器后执行的命令，bash 是一个 linux 终端交互命令</li>
</ul>
<p>注意：exec 命令可以进入容器修改文件，但是在容器内修改文件是不推荐的，修改了是没有记录（日志的），之后都不知道进行了哪些修改操作</p>
<p>2、进入 nginx 的 HTML 所在目录 /usr/share/nginx/html</p>
<p>容器内部会模拟一个独立的 Linux 文件系统，看起来如同一个 linux 服务器一样</p>
<figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line">root@b8ae9bcbdde9:/# ls</span><br><span class="line">bin   dev                  docker-entrypoint.sh  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  docker-entrypoint.d  etc                   lib   media  opt  root  sbin  sys  usr</span><br></pre></td></tr></tbody></table></figure>

<p>我们进入 Nginx 的目录（至于如何找到这个目录的可能需要在 DockerHub 查看 Nginx 的文档了），可以发现目录下包含 index.html</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">cd /usr/share/nginx/html</span><br></pre></td></tr></tbody></table></figure>

<p>3、修改 index.html 的内容</p>
<p>容器内没有 vi 命令，无法直接修改，我们用下面的命令来修改</p>
<figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line">sed -i -e 's#Welcome to nginx#coffeelize欢迎您#g' -e 's#&lt;head&gt;#&lt;head&gt;&lt;meta charset="utf-8"&gt;#g' index.html</span><br></pre></td></tr></tbody></table></figure>

<p>4、验证</p>
<p>访问虚拟机 80 端口，输出页面如下，说明修改成功</p>
<p><img data-src="https://s2.loli.net/2023/01/12/KebjRo19TSWsu5G.png" alt="12-修改成功.png"></p>
<p>5、退出容器</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></tbody></table></figure>

<p>6、停止容器</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker stop mn</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看运行中的docker</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment">//查看所有容器（包括停止的）</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></tbody></table></figure>

<p>7、启动容器</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker start mn</span><br></pre></td></tr></tbody></table></figure>

<p>8、删除容器</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//停掉容器之后删除容器 或者 强制删除运行中的程序</span></span><br><span class="line">docker rm -f mn</span><br></pre></td></tr></tbody></table></figure>

<h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p>在之前的 nginx 案例中，修改 nginx 的 html 页面时，需要进入 nginx 内部。并且因为没有编辑器，修改文件也很麻烦，这就是因为容器与数据（容器内文件）耦合带来的后果。要解决这个问题，必须将 <strong>数据与容器解耦</strong>，这就要用到数据卷了</p>
<p><img data-src="https://s2.loli.net/2023/01/12/qvaxbfgRC5roE46.png" alt="13-容器与数据耦合度高.png"></p>
<p>数据卷（volume）是一个虚拟目录，指向宿主机文件系统中的某个目录</p>
<p><img data-src="https://s2.loli.net/2023/01/12/fhdDyKUG9XLoEA5.png" alt="14-数据卷示意图.png"></p>
<p>一旦完成数据卷挂载，对容器的一切操作都会作用在数据卷对应的宿主机目录了，这样，我们操作宿主机的 /var/lib/docker/volumes/html 目录，就等于操作容器内的 /usr/share/nginx/html 目录了；多个容器可以挂在同一个卷，就可以 “共享” 修改操作了；如果哪一天将容器删除了，没关系，数据卷还在，将新容器在挂载到这个数据卷上就可以了访问之前的数据了</p>
<h4 id="数据卷操作命令"><a href="#数据卷操作命令" class="headerlink" title="数据卷操作命令"></a>数据卷操作命令</h4><p>数据卷操作的基本语法如下</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker volume [COMMAND]</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>create：创建一个 volume</li>
<li>inspect：显示一个或多个 volume 的信息</li>
<li> ls：列出所有的 volume</li>
<li>prune：删除未使用的 volume</li>
<li>rm：删除一个或多个指定的 volume</li>
</ul>
<h4 id="案例：创建和查看数据卷"><a href="#案例：创建和查看数据卷" class="headerlink" title="案例：创建和查看数据卷"></a>案例：创建和查看数据卷</h4><p>需求：创建一个数据卷，并查看数据卷在宿主机的目录位置</p>
<p>1、创建数据卷</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker volume create html</span><br></pre></td></tr></tbody></table></figure>

<p>2、查看所有数据卷</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></tbody></table></figure>

<p>3、查看数据卷详细信息卷</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker volume inspect html</span><br></pre></td></tr></tbody></table></figure>

<p>返回信息如下，其中重点关注 <strong>Mountpoint</strong> 挂载点</p>
<figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line">[root@localhost ~]# docker volume inspect html</span><br><span class="line">[</span><br><span class="line">    {</span><br><span class="line">        "CreatedAt": "2023-01-10T21:32:34+08:00",</span><br><span class="line">        "Driver": "local",</span><br><span class="line">        "Labels": {},</span><br><span class="line">        "Mountpoint": "/var/lib/docker/volumes/html/_data",</span><br><span class="line">        "Name": "html",</span><br><span class="line">        "Options": {},</span><br><span class="line">        "Scope": "local"</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>

<p>4、小结</p>
<p>数据卷的作用：将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</p>
<h4 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h4><p>我们在创建容器时，可以通过 -v 参数来挂载一个数据卷到某个容器内目录，命令格式如下：</p>
<figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --name mn \</span><br><span class="line">  -v html:/root/html \</span><br><span class="line">  -p 8080:80</span><br><span class="line">  nginx \</span><br></pre></td></tr></tbody></table></figure>

<p>这里的 -v 就是挂载数据卷的命令：</p>
<ul>
<li><code>docker run</code>：创建并运行容器</li>
<li><code>--name mn</code>：给容器起个名字叫 mn</li>
<li><code>-v html:/root/html</code> ：把 html 数据卷挂载到容器内的 /root/html 这个目录中</li>
<li><code>-p 8080:80</code>：吧宿主机的 8080 端口映射到容器内的 80 端口</li>
<li> nginx：镜像名称</li>
</ul>
<h4 id="案例：给-nginx-挂载数据卷"><a href="#案例：给-nginx-挂载数据卷" class="headerlink" title="案例：给 nginx 挂载数据卷"></a>案例：给 nginx 挂载数据卷</h4><p>需求：创建一个 nginx 容器，修改容器内的 html 目录内的 index.html 内容<br>分析：上个案例中，我们进入 nginx 容器内部，已经知道 nginx 的 html 目录所在位置 /usr/share/nginx/html ，我们需要把这个目录挂载到 html 这个数据卷上，方便操作其中的内容</p>
<p>0、查看容器是否在运行，并且已经提前创建好了 html 数据卷</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 检查容器是否在运行</span></span><br><span class="line">docker ps -a</span><br></pre></td></tr></tbody></table></figure>

<p>1、创建容器并挂载数据卷到容器内的 HTML 目录</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker run --name mn -v html:/usr/share/nginx/html -p <span class="number">80</span>:<span class="number">80</span> -d nginx</span><br></pre></td></tr></tbody></table></figure>

<p>2、进入 html 数据卷所在位置，并修改 HTML 内容</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看html数据卷的位置</span></span><br><span class="line">docker volume inspect html</span><br><span class="line"><span class="comment"># 通过查看挂载点可知如下目录，进入该目录</span></span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/volumes/html/_data</span><br><span class="line"><span class="comment"># 查看目录下有哪些文件</span></span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 修改文件，此处可通过FinalShell使用本地的高级编辑工具来打开编辑</span></span><br><span class="line">vi index.html</span><br></pre></td></tr></tbody></table></figure>

<p>3、在做数据卷挂在时，如果要创建数据卷不存在，docker 会为我们自动创建数据卷</p>
<p>比如在我们使用如下命令前，docker 中是没有 html 数据卷的，一样可以正常使用如下命令，因为 docker 会为我们自动创建 html 数据卷</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker run --name mn -v html:/usr/share/nginx/html -p <span class="number">80</span>:<span class="number">80</span> -d nginx</span><br></pre></td></tr></tbody></table></figure>

<h4 id="案例：给-MySQL-挂载本地目录"><a href="#案例：给-MySQL-挂载本地目录" class="headerlink" title="案例：给 MySQL 挂载本地目录"></a>案例：给 MySQL 挂载本地目录</h4><p>容器不仅仅可以挂载数据卷，也可以直接挂载到宿主机目录上。关联关系如下</p>
<ul>
<li>带数据卷模式：宿主机目录 –&gt; 数据卷 –&gt; 容器内目录</li>
<li>直接挂载模式：宿主机目录 –&gt; 容器内目录</li>
</ul>
<p><img data-src="https://s2.loli.net/2023/01/12/VtnMporfXRlwxDS.png" alt="15-容器直接挂在到宿主机.png"></p>
<p>目录挂载与数据卷挂载的语法是类似的：</p>
<ul>
<li><code>-v [宿主机目录]:[容器内目录]</code></li>
<li><code>-v [宿主机文件]:[容器内文件]</code></li>
</ul>
<p>案例需求：创建并运行一个 MySQL 容器，将宿主机目录直接挂载到容器</p>
<p>1、将课前资料中的 mysql.tar 文件上传到虚拟机的 tmp 目录，通过 load 命令加载为镜像</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">cd /</span><br><span class="line">cd tmp/</span><br><span class="line"></span><br><span class="line"><span class="comment">//rz或FinalShell上传mysql.tar</span></span><br><span class="line"></span><br><span class="line">docker load -i mysql.tar</span><br><span class="line"><span class="comment">//查看镜像是否导入，mysql的版本为5.7.25</span></span><br><span class="line">docker images</span><br></pre></td></tr></tbody></table></figure>

<p>2、创建目录 /tmp/mysql/data</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//-p表示多级目录创建</span></span><br><span class="line">mkdir -p /tmp/mysql/data</span><br></pre></td></tr></tbody></table></figure>

<p>3、创建目录 /tmp/mysql/conf，将课前资料提供的 hmy.cnf 文件上传到 /tmp/mysql/conf</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//-p表示多级目录创建</span></span><br><span class="line">mkdir -p /tmp/mysql/conf</span><br><span class="line"></span><br><span class="line"><span class="comment">//rz或FinalShell上传hmy.cnf</span></span><br></pre></td></tr></tbody></table></figure>

<p>hmy.cnf 的文件内容为</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-name-resolve</span><br><span class="line">character_set_server=utf8</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">server-id=1000</span><br></pre></td></tr></tbody></table></figure>

<p>4、去 DockerHub 查阅资料 <a href="https://hub.docker.com/_/mysql">mysql | Docker Hub</a>，创建并运行 MySQL 容器，要求：</p>
<p>1）挂载 /tmp/mysql/data 到 mysql 容器内数据存储目录<br>2）挂载 /tmp/mysql/conf/hmy.cnf 到 mysql 容器的配置文件<br>3）设置 MySQL 密码</p>
<p>官网上给定的运行示例如下</p>
<figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br></pre></td></tr></tbody></table></figure>

<p>其中 -e 表示运行环境，后面可以直接设置 mysql 密码；-d 表示后台运行；tag 为版本号，其中还缺少了端口号的设置，我们对这个命令进行修改</p>
<figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> --name mysql \</span><br><span class="line"> -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line"> -p 3306:3306 \</span><br><span class="line"> -v /tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf \</span><br><span class="line"> -v /tmp/mysql/data:/var/lib/mysql \</span><br><span class="line"> -d \</span><br><span class="line"> mysql:5.7.25</span><br></pre></td></tr></tbody></table></figure>

<p>但是此时有个报错 (bind: address already in use)，因为之前我们已经在虚拟机中运行 MySQL 了，也就是已经占用了宿主机的 3306 端口，这里我们改成 3305 试一下</p>
<figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line">//删除刚才创建的mysql容器</span><br><span class="line">docker rm mysql</span><br><span class="line"></span><br><span class="line">//再次执行如下命令，注意端口改为了3305</span><br><span class="line">docker run \</span><br><span class="line"> --name mysql \</span><br><span class="line"> -e MYSQL_ROOT_PASSWORD=123 \</span><br><span class="line"> -p 3305:3306 \</span><br><span class="line"> -v /tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf \</span><br><span class="line"> -v /tmp/mysql/data:/var/lib/mysql \</span><br><span class="line"> -d \</span><br><span class="line"> mysql:5.7.25</span><br></pre></td></tr></tbody></table></figure>

<p>注意：此处的 /etc/mysql/conf.d 目录，可以合并添加我们创建的 hmy.cnf 配置，而不是将 MySQL 默认的配置文件完全覆盖掉（因为我们创建的配置文件只包含了默认配置的少数配置信息，替换掉默认配置的话配置就不全了）</p>
<p>5、测试 MySQL 连接</p>
<p>通过 Navicat 测试可正常连接<br><img data-src="https://s2.loli.net/2023/01/12/yt4LbEZ8NBzwWiV.png" alt="16-Navicat连接成功.png"></p>
<p>6、小节</p>
<p>数据卷挂载与目录直接挂载的比较：</p>
<ul>
<li>数据卷挂载耦合度低，由 docker 来管理目录，但是目录较深，不好找</li>
<li>目录挂载耦合度高，需要我们自己管理目录，不过目录容易寻找查看</li>
</ul>
<h2 id="Dockerfile-自定义镜像"><a href="#Dockerfile-自定义镜像" class="headerlink" title="Dockerfile 自定义镜像"></a>Dockerfile 自定义镜像</h2><h3 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h3><p>常见的镜像在 DockerHub 就能找到，但是我们自己写的项目就必须自己构建镜像了，而要自定义镜像，就必须先了解镜像的结构才行</p>
<p>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。我们以 MySQL 为例，来看看镜像的组成结构</p>
<p><img data-src="https://s2.loli.net/2023/01/12/tvRsDH1aQjO7zxf.png" alt="17-镜像结构.png"></p>
<ul>
<li>基础镜像（BaseImage）：应用依赖的系统函数库、环境、配置、文件等</li>
<li>入口（Entrypoint）：镜像运行入口，一般是程序启动的脚本和参数</li>
<li>层（Layer）：在 BaseImage 基础上添加安装包、依赖、配置等，每次操作都形成新的层</li>
</ul>
<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>Dockerfile 是一个文本文件，其中包含一个个的 ** 指令 (Instruction)**，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层 Layer。更新详细语法说明，可参考官网文档： <a href="https://docs.docker.com/engine/reference/builder">https://docs.docker.com/engine/reference/builder</a></p>
<p><img data-src="https://s2.loli.net/2023/01/12/h34vkV1QpgUNIXs.png" alt="18-Dockerfile指令.png"></p>
<h3 id="构建-Java-项目"><a href="#构建-Java-项目" class="headerlink" title="构建 Java 项目"></a>构建 Java 项目</h3><h4 id="基于-Ubuntu-构建-Java-项目"><a href="#基于-Ubuntu-构建-Java-项目" class="headerlink" title="基于 Ubuntu 构建 Java 项目"></a>基于 Ubuntu 构建 Java 项目</h4><p>需求：基于 Ubuntu 镜像构建一个新镜像，运行一个 java 项目</p>
<p>1、新建一个空文件夹 docker-demo</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">cd /tmp/</span><br><span class="line">mkdir docker-demo</span><br></pre></td></tr></tbody></table></figure>

<p>2、拷贝课前资料中的 docker-demo.jar 文件到 docker-demo 这个目录<br>3、拷贝课前资料中的 jdk8.tar.gz 文件到 docker-demo 这个目录<br>4、拷贝课前资料提供的 Dockerfile 到 docker-demo 这个目录</p>
<p>Dockerfile 中的内容如下</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="bash"> &amp;&amp; mv ./jdk1.8.0_144 ./java8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></tbody></table></figure>

<p>5、进入 docker-demo</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">cd docker-demo</span><br></pre></td></tr></tbody></table></figure>

<p>6、运行命令</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker build -t javaweb:<span class="number">1.0</span> .</span><br></pre></td></tr></tbody></table></figure>

<p>-t 表示 tag；javaweb 为镜像名称；注意命令后面还有个 <code>.</code>，表示 dockerfile 所在的目录（构建时告知 dockerfile 在哪）</p>
<p>可以看到 dockerfile 共有 9 个指令，也就分为了 9 个 step，每个指令执行都会创建出一个层</p>
<p>7、通过命令查看构建好的镜像</p>
<figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line">[root@localhost docker-demo]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">javaweb      1.0       c94aff541e94   42 seconds ago   722MB</span><br><span class="line">nginx        latest    605c77e624dd   12 months ago    141MB</span><br><span class="line">redis        latest    7614ae9453d1   12 months ago    113MB</span><br><span class="line">ubuntu       16.04     b6f507652425   16 months ago    135MB</span><br><span class="line">mysql        5.7.25    98455b9624a9   3 years ago      372MB</span><br></pre></td></tr></tbody></table></figure>

<p>可以看到我们基于 ubuntu 构建的（配置好 java 环境的）javaweb 项目的镜像已经构建好了</p>
<p>可以通过命令来运行镜像（8090 端口在 dockerfile 中已经声明暴露了端口）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker run --name web -p <span class="number">8090</span>:<span class="number">8090</span> -d javaweb:<span class="number">1.0</span></span><br></pre></td></tr></tbody></table></figure>

<p>浏览器访问如下地址，可以发现我们的项目（之前我们的 docker-demo.jar 项目）正常跑起来了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">http:<span class="comment">//192.168.119.128:8090/hello/count</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2023/01/12/zxFcQYWgAJBME8f.png" alt="19-项目运行成功.png"></p>
<p>虚拟机中运行 docker –&gt; docker 中运行 ubuntu –&gt; ubuntu 中运行 docker-demo java 项目😂，虚拟机内存开始吃紧了</p>
<p><img data-src="https://s2.loli.net/2023/01/12/aT5AVJ8nsC7po9g.png" alt="20-虚拟机内存吃紧.png"></p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>分析：其实我们的 java 项目真正只用到了如下一行</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> ./docker-demo.jar /tmp/app.jar</span></span><br></pre></td></tr></tbody></table></figure>

<p>dockerfile 文件内容：</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝jdk和java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./docker-demo.jar /tmp/app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="bash"> &amp;&amp; mv ./jdk1.8.0_144 ./java8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></tbody></table></figure>

<p>那么我们之后在构建 Java 项目镜像时，可以先构建如下不会改变的层做一个镜像，然后在基于这个镜像来构建。</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"><span class="comment"># 配置环境变量，JDK的安装目录</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_DIR=/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝jdk</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./jdk8.tar.gz <span class="variable">$JAVA_DIR</span>/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> <span class="variable">$JAVA_DIR</span> \</span></span><br><span class="line"><span class="bash"> &amp;&amp; tar -xf ./jdk8.tar.gz \</span></span><br><span class="line"><span class="bash"> &amp;&amp; mv ./jdk1.8.0_144 ./java8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=$JAVA_DIR/java8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></tbody></table></figure>

<p>而实际上，有人也已经构建好了这个镜像了，我们直接拿来用就行，镜像名为 java:8-alpine</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 指定基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span>-alpine</span><br><span class="line"><span class="comment"># 拷贝java项目的包</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./app.jar /tmp/app.jar</span></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8090</span></span><br><span class="line"><span class="comment"># 入口，java项目的启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> java -jar /tmp/app.jar</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h2><p>Docker Compose 可以基于 Compose 文件帮我们快速部署分布式应用，而无需手动一个个创建和运行容器</p>
<h3 id="初识-DockerCompose"><a href="#初识-DockerCompose" class="headerlink" title="初识 DockerCompose"></a>初识 DockerCompose</h3><p>Compose 文件是一个文本文件，通过指令定义集群中的每个容器如何运行。格式如下（相当于把 docker run 中的所有指令转换为了 Compose 指令了）：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">version:&nbsp;<span class="string">"3.8"</span></span><br><span class="line">services:</span><br><span class="line">&nbsp;&nbsp;mysql:</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;image:&nbsp;mysql:<span class="number">5.7</span><span class="number">.25</span></span><br><span class="line">    environment:</span><br><span class="line">     MYSQL_ROOT_PASSWORD: <span class="number">123</span> </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;volumes:</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="string">"/tmp/mysql/data:/var/lib/mysql"</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;<span class="string">"/tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf"</span></span><br><span class="line">&nbsp;&nbsp;web:</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;build:&nbsp;.</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;ports:</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- <span class="string">"8090:8090"</span></span><br></pre></td></tr></tbody></table></figure>

<p>上面的 Compose 文件就描述一个项目，其中包含两个容器</p>
<ul>
<li>mysql：一个基于 <code>mysql:5.7.25</code> 镜像构建的容器，并且挂载了两个目录<ul>
<li>为什么没有定义端口呢：因为 MySQL 运行在微服务当中，供内部使用无需对外开放</li>
<li>无需定义后台运行，默认就是后台运行</li>
</ul>
</li>
<li> web：一个基于 <code>docker build</code> 临时构建的镜像容器，映射端口时 8090<ul>
<li> 为什么没有指定镜像：因为通过 build 就可以构建镜像</li>
</ul>
</li>
</ul>
<h3 id="安装-DockerCompose"><a href="#安装-DockerCompose" class="headerlink" title="安装 DockerCompose"></a>安装 DockerCompose</h3><p>1、下载</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line">curl -L https:<span class="comment">//github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span></span><br></pre></td></tr></tbody></table></figure>

<p>或者通过本地文件准备好的文件直接上传，上传至 <code>/usr/local/bin/</code> 目录</p>
<p>2、修改文件权限</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"># 修改权限</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></tbody></table></figure>

<p>3、Base 自动补全命令</p>
<p>之后使用 Docker Compose 时就会有补全提示</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"># 补全命令</span><br><span class="line">curl -L https:<span class="comment">//raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span></span><br></pre></td></tr></tbody></table></figure>

<p>此时可能会报：拒绝连接的错误，需要执行如下命令修改 hosts 文件</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">echo <span class="string">"199.232.68.133 raw.githubusercontent.com"</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></tbody></table></figure>

<h4 id="案例：利用-DockerCompose-部署"><a href="#案例：利用-DockerCompose-部署" class="headerlink" title="案例：利用 DockerCompose 部署"></a>案例：利用 DockerCompose 部署</h4><p>需求：将之前学习的 cloud-demo 微服务集群利用 DockerCompose 部署</p>
<p>1、查看课前资料提供的 cloud-demo 文件夹，里面已经编写好了 docker-compose 文件</p>
<p>课前资料提供的 cloud-demo 文件夹，里面已经编写好了 docker-compose 文件，而且每个微服务都准备了一个独立的目录。对于每一个微服务目录，其中都包含一个 Dockerfile 文件和对于的微服务 jar 包。最外层包含 docker-compose.yml 配置文件，文件内容如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">version: <span class="string">"3.2"</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  nacos:</span><br><span class="line">    image: nacos/nacos-server</span><br><span class="line">    environment:</span><br><span class="line">      MODE: standalone</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"8848:8848"</span></span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:<span class="number">5.7</span><span class="number">.25</span></span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: <span class="number">123</span></span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">"$PWD/mysql/data:/var/lib/mysql"</span></span><br><span class="line">      - <span class="string">"$PWD/mysql/conf:/etc/mysql/conf.d/"</span></span><br><span class="line">  userservice:</span><br><span class="line">    build: ./user-service</span><br><span class="line">  orderservice:</span><br><span class="line">    build: ./order-service</span><br><span class="line">  gateway:</span><br><span class="line">    build: ./gateway</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"10010:10010"</span></span><br></pre></td></tr></tbody></table></figure>

<p>这几个微服务（mysql、userservice、orderservice 以及 gateway）中，只有网关暴露了端口，因为网关是外部访问微服务的入口。其他微服务都需要注册到 Nacos 服务中</p>
<p>MySQL 微服务中需要的表和数据课程资料也已经为我们准备好了</p>
<p>2、修改自己的 cloud-demo 项目，将数据库、nacos 地址都命名为 docker-compose 中的服务名</p>
<p>因为微服务将来要部署为 docker 容器，而容器之间互联不是通过 IP 地址，而是通过容器名。这里我们将 order-service、user-service、gateway 服务的 mysql、nacos 地址都修改为基于容器名的访问</p>
<p>比如 user-service 中的 bootstrap 配置文件</p>
<figure class="highlight diff"><table><tbody><tr><td class="code"><pre><span class="line">spring:  </span><br><span class="line">  application:  </span><br><span class="line">    name: userservice # 服务名称  </span><br><span class="line">  profiles:  </span><br><span class="line">    active: dev #开发环境，这里是dev  </span><br><span class="line">  cloud:  </span><br><span class="line">    nacos:  </span><br><span class="line"><span class="deletion">-     server-addr: localhost:8848 # Nacos地址  </span></span><br><span class="line"><span class="addition">+     server-addr: nacos:8848 # Nacos地址  </span></span><br><span class="line">      config:  </span><br><span class="line">        file-extension: yaml # 文件后缀名</span><br></pre></td></tr></tbody></table></figure>

<p>application.yml 配置文件中</p>
<figure class="highlight diff"><table><tbody><tr><td class="code"><pre><span class="line"><span class="deletion">- url: jdbc:mysql://localhost:3306/cloud_user?useSSL=false</span></span><br><span class="line"><span class="addition">+ url: jdbc:mysql://mysql:3306/cloud_user?useSSL=false</span></span><br></pre></td></tr></tbody></table></figure>

<p>同理，order-service 和 gateway 微服务的配置文件也这样修改</p>
<p>3、使用 maven 打包工具，将项目中的每个微服务都打包为 app.jar</p>
<p>为什么都打包成 app.jar 呢 –&gt; 因为我们在微服务目录下的 Dockerfile 文件里是这样配置的，我们配置的名称都是 app.jar</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">FROM java:<span class="number">8</span>-alpine</span><br><span class="line">COPY ./app.jar /tmp/app.jar</span><br><span class="line">ENTRYPOINT java -jar /tmp/app.jar</span><br></pre></td></tr></tbody></table></figure>

<p>那么，既然各个微服务打包完成都需要叫这个 app.jar 名字，我们是否可以修改配置文件实现项目打包自动叫这个名字呢 –&gt; 可以的，在各个微服务的 pom 文件中添加如下配置</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>app<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>通过 Maven 的 Package 来打包</p>
<p>4、将打包好的 app.jar 拷贝到 cloud-demo 中的每一个对应的微服务子目录中</p>
<p><img data-src="https://s2.loli.net/2023/01/12/UBkKv8HJ3dL9gNj.gif" alt="21-项目部署前准备.gif"></p>
<p>5、将 cloud-demo 上传至虚拟机 (tmp 目录)，利用 docker-compose up -d 来部署</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">cd /</span><br><span class="line">cd /tmp/</span><br><span class="line"></span><br><span class="line"><span class="comment">//上传cloud-demo文件夹</span></span><br><span class="line"></span><br><span class="line">cd cloud-demo/</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>up：表示创建并执行容器</li>
<li> down：停止并删除容器</li>
<li>其他命令可以通过 help 命令查看</li>
</ul>
<p>6、查看打包好的镜像和运行的容器</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker ps</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line">[root@localhost cloud-demo]# docker images</span><br><span class="line">REPOSITORY                TAG        IMAGE ID       CREATED              SIZE</span><br><span class="line">cloud-demo_gateway        latest     3ce691e26939   About a minute ago   185MB</span><br><span class="line">cloud-demo_orderservice   latest     b81195944331   About a minute ago   187MB</span><br><span class="line">cloud-demo_userservice    latest     2dc6d8c88bdc   About a minute ago   184MB</span><br><span class="line">javaweb                   1.0        c94aff541e94   3 hours ago          722MB</span><br><span class="line">nginx                     latest     605c77e624dd   12 months ago        141MB</span><br><span class="line">redis                     latest     7614ae9453d1   12 months ago        113MB</span><br><span class="line">ubuntu                    16.04      b6f507652425   16 months ago        135MB</span><br><span class="line">nacos/nacos-server        latest     bdf60dc2ada3   17 months ago        1.05GB</span><br><span class="line">mysql                     5.7.25     98455b9624a9   3 years ago          372MB</span><br><span class="line">java                      8-alpine   3fd9dd82815c   5 years ago          145MB</span><br></pre></td></tr></tbody></table></figure>

<p>虚拟机 2G 内存快要炸了😳，开始借用交换内存了</p>
<p>7、通过查看日志可发现 order-service 有报错</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose logs -f</span><br><span class="line"></span><br><span class="line"><span class="comment">//退出日志</span></span><br><span class="line">Ctrl+C</span><br><span class="line"></span><br><span class="line"><span class="comment">//重启微服务(微服务启动前Nacos已经启动完成)</span></span><br><span class="line">docker-compose restart gateway userservice orderservice</span><br></pre></td></tr></tbody></table></figure>

<p>原因是因为 Nacos 微服务启动晚于 order-service，导致报错。关键是报错之后没有进行重新启动 –&gt; 因此，我们最好是先启动 Nacos 微服务，之后再启动 order-service 等系列微服务</p>
<p>浏览器访问如下，均可正常接收到数据</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">http:<span class="comment">//192.168.119.128:10010/user/2?authorization=admin</span></span><br><span class="line">http:<span class="comment">//192.168.119.128:10010/order/102?authorization=admin</span></span><br></pre></td></tr></tbody></table></figure>

<p>至此，DockerCompose 部署微服务完成</p>
<p>8、删除掉这些容器吧，虚拟机要炸了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//删除通过docker-compose部署的容器，同时删除镜像</span></span><br><span class="line">docker-compose down --rmi all</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line">[root@localhost cloud-demo]# docker-compose down --rmi all</span><br><span class="line">Stopping cloud-demo_nacos_1        ... done</span><br><span class="line">Stopping cloud-demo_userservice_1  ... done</span><br><span class="line">Stopping cloud-demo_gateway_1      ... done</span><br><span class="line">Stopping cloud-demo_mysql_1        ... done</span><br><span class="line">Stopping cloud-demo_orderservice_1 ... done</span><br><span class="line">Removing cloud-demo_nacos_1        ... done</span><br><span class="line">Removing cloud-demo_userservice_1  ... done</span><br><span class="line">Removing cloud-demo_gateway_1      ... done</span><br><span class="line">Removing cloud-demo_mysql_1        ... done</span><br><span class="line">Removing cloud-demo_orderservice_1 ... done</span><br><span class="line">Removing network cloud-demo_default</span><br><span class="line">Removing image nacos/nacos-server</span><br><span class="line">Removing image mysql:5.7.25</span><br><span class="line">Removing image cloud-demo_userservice</span><br><span class="line">Removing image cloud-demo_orderservice</span><br><span class="line">Removing image cloud-demo_gateway</span><br></pre></td></tr></tbody></table></figure>

<h2 id="Docker-镜像仓库"><a href="#Docker-镜像仓库" class="headerlink" title="Docker 镜像仓库"></a>Docker 镜像仓库</h2><h3 id="简化版镜像仓库"><a href="#简化版镜像仓库" class="headerlink" title="简化版镜像仓库"></a>简化版镜像仓库</h3><p>Docker 官方的 Docker Registry 是一个基础版本的 Docker 镜像仓库，具备仓库管理的完整功能，但是没有图形化界面</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --name registry \</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v registry-data:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></tbody></table></figure>

<p>命令中挂载了一个数据卷 registry-data 到容器内的 /var/lib/registry 目录，这是私有镜像库存放数据的目录，访问如下链接可以查看当前私有镜像服务中包含的镜像</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">http://yourip:5000/v2/_catalog</span><br></pre></td></tr></tbody></table></figure>

<h3 id="带有图形化界面版本"><a href="#带有图形化界面版本" class="headerlink" title="带有图形化界面版本"></a>带有图形化界面版本</h3><p>操作此步骤前，需要先完成 Docker 信任地址配置</p>
<p>使用 DockerCompose 部署带有图象界面的 DockerRegistry，命令如下</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /</span><br><span class="line"><span class="built_in">cd</span> /tmp/</span><br><span class="line">mkdir registry-ui</span><br><span class="line"><span class="built_in">cd</span> registry-ui</span><br><span class="line">touch docker-compose.yml</span><br><span class="line">//修改这个yml文件，内容如下代码块</span><br><span class="line"></span><br><span class="line">//修改yml文件完成后执行docker-compose</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.0'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./registry-data:/var/lib/registry</span></span><br><span class="line">  <span class="attr">ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">joxit/docker-registry-ui:static</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_TITLE=coffeelize私有仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_URL=http://registry:5000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">registry</span></span><br></pre></td></tr></tbody></table></figure>

<p>通过访问如下地址，即可访问我们创建的带有图形界面的 Docker 镜像仓库了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">192.168</span><span class="number">.119</span><span class="number">.128</span>:<span class="number">8080</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2023/01/12/SwRi8jDgNpnaeBW.png" alt="22-建立私有仓库.png"></p>
<h3 id="配置-Docker-信任地址"><a href="#配置-Docker-信任地址" class="headerlink" title="配置 Docker 信任地址"></a>配置 Docker 信任地址</h3><p>我们的私服采用的是 http 协议，默认不被 Docker 信任，所以需要做一个配置</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 打开要修改的文件</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 添加内容：</span></span><br><span class="line"><span class="string">"insecure-registries"</span>:[<span class="string">"http://192.168.119.128:8080"</span>]</span><br><span class="line"><span class="comment"># 重加载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></tbody></table></figure>

<p>在添加内容时，注意多个配置之间别把逗号忘加了</p>
<figure class="highlight diff"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  "registry-mirrors": ["https://5vycoa8o.mirror.aliyuncs.com"],</span><br><span class="line"><span class="addition">+ "insecure-registries":["http://192.168.119.128:8080"]</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="在私有镜像仓库中推送或拉去镜像"><a href="#在私有镜像仓库中推送或拉去镜像" class="headerlink" title="在私有镜像仓库中推送或拉去镜像"></a>在私有镜像仓库中推送或拉去镜像</h3><p>推送镜像到私有镜像服务必须先 tag，步骤如下：</p>
<p>1、重新 tag 本地镜像（重命名镜像，并且以镜像仓库地址为前缀），名称前缀为私有仓库的地址：192.168.119.128:8080/</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker tag nginx:latest 192.168.119.128:8080/nginx:1.0 </span><br></pre></td></tr></tbody></table></figure>

<p>利用 tag 命令，可以将一个镜像重命名，这里我们对之前下载的最新版 Nginx 镜像进行操作</p>
<p><img data-src="https://s2.loli.net/2023/01/12/fAnQie3o84j2UsK.png" alt="23-推送镜像前重命名镜像.png"></p>
<p>此时，查看本地的镜像，就可以找到我们打包并且重命名后的镜像了，可以发现这两个镜像的 ID（605c77e624dd）其实是一样的</p>
<figure class="highlight console"><table><tbody><tr><td class="code"><pre><span class="line">192.168.119.128:8080/nginx   1.0        605c77e624dd   12 months ago   141MB</span><br><span class="line">nginx                        latest     605c77e624dd   12 months ago   141MB</span><br></pre></td></tr></tbody></table></figure>

<p>2、推送镜像</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker push 192.168.119.128:8080/nginx:1.0 </span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2023/01/12/hyPA2ptnv3GEFlj.png" alt="24-推送镜像到私有仓库.png"></p>
<p>3、拉取镜像</p>
<figure class="highlight sh"><table><tbody><tr><td class="code"><pre><span class="line">docker pull 192.168.150.101:8080/nginx:1.0 </span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Filter 简明笔记</title>
    <url>/posts/Filter-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="什么是-Filter"><a href="#什么是-Filter" class="headerlink" title="什么是 Filter"></a>什么是 Filter</h3><ul>
<li>Filter 表示过滤器，是 JavaWeb 三大组件 (Servlet、Filter、Listener) 之一</li>
<li>过滤器可以把对资源的请求拦截下来，从而实现一些特殊的功能</li>
<li>过滤器一般完成一些通用的操作，比如：权限控制、统一编码处理、敏感字符处理等</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/12/12/YN6UJgCF2j8pE4Q.png" alt="02-Filter过滤器的执行流程.png"></p>
<p>比如需要登录我这个网站，才能访问我的 web 资源，而如果每个 web 资源都需要进行登录判断的话，那干脆将这一层提取出来放到 Filter 中来实现是否登录判断</p>
<h3 id="Filter-快速入门"><a href="#Filter-快速入门" class="headerlink" title="Filter 快速入门"></a>Filter 快速入门</h3><ol>
<li>定义类，实现 Filter 接口，并重写其所有方法</li>
<li>配置 Filter 拦截资源的路径：在类上定义 <code>@WebFilter</code> 注解</li>
<li>在 doFilter 方法中输出一句话，并放行</li>
</ol>
<p>PS:</p>
<ol>
<li>和 Servlet 的开发非常相似</li>
<li> Filter 是 web 的三大组件之一，项目结构中一般将其放在 web 文件夹下 </li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.filter;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@WebFilter("/*")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>{  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>{  </span><br><span class="line">        System.out.println(<span class="string">"FilterDemo..."</span>);  </span><br><span class="line">        <span class="comment">//放行  </span></span><br><span class="line">        chain.doFilter(request,response);  </span><br><span class="line">    }  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>{  </span><br><span class="line">  </span><br><span class="line">    }  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>注：<code>@WebFilter("/*")</code> 表示拦截所有资源</p>
<p>这里容易出现导错包的问题，如下所示：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.web.filter;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//import java.util.logging.Filter; //错误的包</span></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>{  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Filter-执行流程"><a href="#Filter-执行流程" class="headerlink" title="Filter 执行流程"></a>Filter 执行流程</h3><p><img data-src="https://s2.loli.net/2022/12/12/YN6UJgCF2j8pE4Q.png" alt="02-Filter过滤器的执行流程.png"></p>
<ol>
<li>放行后访问对象资源，资源访问完成后，还会回到 Filter 中吗？会</li>
<li>如果回到 Filter 中，是重新执行还是执行放行后的逻辑呢？放行后的逻辑</li>
</ol>
<p>执行放行前逻辑 ⇒ 放行 ⇒ 访问资源 ⇒ 执行放行后逻辑</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>{  </span><br><span class="line">    <span class="comment">//放行前逻辑；对request数据进行处理，response中还没有数据  </span></span><br><span class="line">    System.out.println(<span class="string">"FilterDemo..."</span>);  </span><br><span class="line">    <span class="comment">//放行  </span></span><br><span class="line">    chain.doFilter(request,response);<span class="comment">//访问到资源，response中有数据了  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//放行后逻辑：对response数据进行处理  </span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Filter-使用细节"><a href="#Filter-使用细节" class="headerlink" title="Filter 使用细节"></a>Filter 使用细节</h3><h4 id="Filter-拦截路径配置"><a href="#Filter-拦截路径配置" class="headerlink" title="Filter 拦截路径配置"></a>Filter 拦截路径配置</h4><ul>
<li>拦截具体的资源：<code>/index.jsp</code>：只有访问 <code>index.jps</code> 时才会被拦截</li>
<li>目录拦截：<code>/user/*</code></li>
<li>后缀名拦截：<code>/*.jsp</code></li>
<li>拦截所有：<code>/*</code></li>
</ul>
<h4 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h4><p>一个 Web 应用，可以配置多个过滤器，这多个过滤器称为过滤器链</p>
<p><img data-src="https://s2.loli.net/2022/12/12/BVoGaSzYcsTndkZ.png" alt="03-Filter过滤器链.png"></p>
<p>注解配置的 Filter，优先级按照过滤器类名（字符串）的自然排序。比如 FilterDemo1 就排在 FilterDemo2 的前面</p>
]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>Hyperref 之图表交叉引用</title>
    <url>/posts/Hyperref-Chart-Cross-Reference.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="常规的交叉引用"><a href="#常规的交叉引用" class="headerlink" title="常规的交叉引用"></a>常规的交叉引用</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br><span class="line"><span class="comment">%\usepackage{hyperref}</span></span><br><span class="line"><span class="comment">%\def\figureautorefname{图}%</span></span><br><span class="line"><span class="comment">%\def\tableautorefname{表}%</span></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\section</span>{第一章}</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\begin</span>{figure} [htbp]</span><br><span class="line">  <span class="keyword">\centering</span></span><br><span class="line">  <span class="keyword">\includegraphics</span>{example-image-duck}</span><br><span class="line">  <span class="keyword">\caption</span>{This is a duck image}</span><br><span class="line">  <span class="keyword">\label</span>{duck}</span><br><span class="line"> <span class="keyword">\end</span>{figure}</span><br><span class="line"> </span><br><span class="line"> 这是一段正文，这里需要交叉引用这张图片。由<span class="keyword">\ref</span>{duck}可知，图片当中是一只鸭子。</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/29/IczMPsoZJbOqi5e.png" alt="01-autoref命令使用.png"></p>
<p>从输出的图片可以看出，通过标签的形式实现图片的交叉引用，交叉引用中只会出现交叉引用的序号 “1”，而不是输出 “图 1”，如果要实现输出 “图 1” 的效果，需要在 tex 中手动添加，如：</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line">由图 <span class="keyword">\ref</span>{duck}可知，图片当中是一只鸭子。</span><br></pre></td></tr></tbody></table></figure>

<p>那么每次交叉引用图、表、公式等都需要手动去敲这个 “前缀”，有没有更人性化一些的工具或宏包呢？<br>引出今天的主角：hyperref 宏包</p>
<h3 id="hyperref-宏包"><a href="#hyperref-宏包" class="headerlink" title="hyperref 宏包"></a>hyperref 宏包</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br><span class="line"><span class="keyword">\usepackage</span>{hyperref}</span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\figureautorefname</span>{图}<span class="comment">%将默认的“figure”改为“图”</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\tableautorefname</span>{表}<span class="comment">%</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\section</span>{第一章}</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\begin</span>{figure} [htbp]</span><br><span class="line">  <span class="keyword">\centering</span></span><br><span class="line">  <span class="keyword">\includegraphics</span>{example-image-duck}</span><br><span class="line">  <span class="keyword">\caption</span>{This is a duck image}</span><br><span class="line">  <span class="keyword">\label</span>{duck}</span><br><span class="line"> <span class="keyword">\end</span>{figure}</span><br><span class="line"> </span><br><span class="line"> 这是一段正文，这里需要交叉引用这张图片。由<span class="keyword">\autoref</span>{duck}可知，图片当中是一只鸭子。</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/29/vSioyeDNXCWAlEZ.png" alt="02-默认的ref引用格式.png"></p>
<p>简要步骤如下</p>
<ol>
<li>使用 hyperref 宏包（可修改引用时的 “前缀”）</li>
<li>需要交叉引用的位置打上标签</li>
<li>正文中通过使用 <code>\autoref{mylabel}</code> 实现交叉引用</li>
</ol>
<p>但是，也引出了一个新问题，存在交叉引用的地方有红色的边框</p>
<h3 id="如何去除-hyperref-带来的红边框"><a href="#如何去除-hyperref-带来的红边框" class="headerlink" title="如何去除 hyperref 带来的红边框"></a>如何去除 hyperref 带来的红边框</h3><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案 1"></a>解决方案 1</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[hidelinks]{hyperref}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案 2"></a>解决方案 2</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\hypersetup</span>{</span><br><span class="line"> colorlinks=true,</span><br><span class="line"> linkcolor=black</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>推荐解决方案 1，也就是 hyperref 宏包提供的参数设置中的可选参数 <code>hidelinks</code></p>
<p><img data-src="https://s2.loli.net/2022/06/29/f4Dg17VxHtGCRJd.png" alt="03-hyperref宏包提供的参数设置.png"></p>
<p>hyperref 宏包提供的更多参数设置可查阅 Latex 的官方入门手册：一份（不太）简短的 LaTeX2ε 介绍</p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>{hyperref}</span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\figureautorefname</span>{图}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\tableautorefname</span>{表}<span class="comment">%</span></span><br><span class="line"><span class="comment">%对于以上3句代码中的后两句下，如下命令可等效</span></span><br><span class="line"><span class="comment">%\renewcommand{\figureautorefname}{图}</span></span><br><span class="line"><span class="comment">%\renewcommand{\tableautorefname}{表}</span></span><br></pre></td></tr></tbody></table></figure>

<p>除了图和表之外，对于其他如定理环境的交叉引用汇总如下：</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\def</span><span class="keyword">\equationautorefname</span>{式}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\footnoteautorefname</span>{脚注}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\itemautorefname</span>{项}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\figureautorefname</span>{图}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\tableautorefname</span>{表}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\partautorefname</span>{篇}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\appendixautorefname</span>{附录}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\chapterautorefname</span>{章}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\sectionautorefname</span>{节}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\subsectionautorefname</span>{小小节}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\subsubsectionautorefname</span>{subsubsection}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\paragraphautorefname</span>{段落}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\subparagraphautorefname</span>{子段落}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\FancyVerbLineautorefname</span>{行}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\theoremautorefname</span>{定理}<span class="comment">%</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Latex 工作室：<a href="https://www.latexstudio.net/archives/7446.html">LaTeX 技巧 860：autoref 命令直接产生 “图 1.1”“式 1.1” 等样</a></li>
<li> Latex 官方文档：一份不太简短的 LaTeX2e 介绍</li>
</ul>
]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 简明教程</title>
    <url>/posts/Git-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="什么是-Git"><a href="#什么是-Git" class="headerlink" title="什么是 Git"></a>什么是 Git</h3><p>Git 是一个分布式版本控制工具，主要用于管理开发过程中的源代码文件（Java 类、xml 文件、html 页面等），在软件开发过程中被广泛使用</p>
<h3 id="Git-能做什么"><a href="#Git-能做什么" class="headerlink" title="Git 能做什么"></a>Git 能做什么</h3><ul>
<li>代码回溯：Git 在管理文件过程中会记录日志，方便回退到历史版本</li>
<li>版本切换：Git 存在分支的概念，一个项目可以有多个分支（版本），可以任意切换</li>
<li>多人协作：Git 支持多人协作，即一个团队共同开发一个项目，每个团队成员负责一部分代码，通过 Git 就可以管理和协调</li>
<li>远程备份：Git 通过仓库管理文件，在 Git 中存在远程仓库，如果本地文件丢失还可以从远程仓库获取</li>
</ul>
<p>我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有 GitHub、码云、GitLab 等，这里以码云为例进行讲解</p>
<h3 id="Git-全局设置"><a href="#Git-全局设置" class="headerlink" title="Git 全局设置"></a>Git 全局设置</h3><p>当安装 Git 后首先要做的事情是设置用户名称和 email 地址。这是非常重要的，因为每次 Git 提交都会使用该用户信息。在 Git 命令行中执行下面命令：</p>
<ul>
<li>设置用户信息 </li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"coffeelize"</span></span><br><span class="line">git config --global user.email <span class="string">"coffeelize@qq.com"</span></span><br></pre></td></tr></tbody></table></figure>

<p>注意：<strong>上面设置的 user.name 和 user.email 并不是我们在注册码云账号时使用的用户名和邮箱</strong>，此处可以任意设置</p>
<ul>
<li>查看配置信息 </li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/12/19/CiSLe2VtpFR7zvK.png" alt="01-配置用户名和邮箱.png"></p>
<h3 id="获取-Git-仓库"><a href="#获取-Git-仓库" class="headerlink" title="获取 Git 仓库"></a>获取 Git 仓库</h3><p>要使用 Git 对我们的代码进行管理，首先需要获得 Git 仓库，获取 Git 仓库通常有两种方式</p>
<ul>
<li>在本地初始化 Git 仓库（不常用）</li>
<li>从远程仓库克隆（常用）</li>
</ul>
<h4 id="在本地初始化-Git-仓库"><a href="#在本地初始化-Git-仓库" class="headerlink" title="在本地初始化 Git 仓库"></a>在本地初始化 Git 仓库</h4><ol>
<li>在任意目录下创建一个空目录（例如 repo1）作为我们的本地 Git 仓库</li>
<li>进入这个目录中，点击右键打开 Git bash 窗口</li>
<li>执行命令 <code>git init</code></li>
</ol>
<p>初始化之后，目录中会多一个 <code>.git</code> 隐藏文件夹，命令行后会多出一个 master 分支<br><img data-src="https://s2.loli.net/2022/12/19/Z7mXMf8ovShOWUF.png" alt="02-master主分支.png"></p>
<p>注意：本地仓库不是从远程仓库克隆下来的，且本地仓库中若已经存放了一些文件，此时再从远程仓库拉去文件的时候可能会报如下所示的错误：fatal: refusing to merge unrelated histories（原因是本地仓库中含有本地仓库中文件的历史记录，远程仓库中包含远程仓库中文件的记录信息，这两者间完全没有联系，此时就需要将两者建立起联系）</p>
<p><img data-src="https://s2.loli.net/2022/12/19/aw3mrhOHW9vg1Zb.png" alt="016-本地仓库首次连接远程仓库报错.png"></p>
<p>此时，可以通过如下命令解决</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></tbody></table></figure>

<h4 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h4><p>可以通过 Git 提供的命令从远程仓库进行克隆，将远程仓库克隆到本地</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 远程仓库地址</span><br></pre></td></tr></tbody></table></figure>

<p>注：第一次克隆远程仓库时，可能需要登录 Git Credential Manage，即登录 Gitee 的账号，登录之后即可正常操作。同时登录之后，也会将一些验证信息保存到电脑当中，之后再次使用就不用再手动登录了</p>
<p><img data-src="https://s2.loli.net/2022/12/19/jMc9uwJOTRiW17E.png" alt="03-登录Gitee验证.png"></p>
<h3 id="工作区、暂存区、版本库"><a href="#工作区、暂存区、版本库" class="headerlink" title="工作区、暂存区、版本库"></a>工作区、暂存区、版本库</h3><ul>
<li><strong>版本库</strong>：前面看到的 <code>.git 隐藏文件夹</code> 就是版本库，版本库中存储了很多配置信息、日志信息和文件版本信息等</li>
<li><strong>工作区</strong>：包含.git 文件夹的目录就是工作区，也称为工作目录，主要用于存放开发的代码</li>
<li><strong>暂存区</strong>：.git 文件夹中有很多文件，其中有一个 <code>index 文件</code> 就是暂存区。暂存区是一个临时保存修改文件的地方</li>
</ul>
<h3 id="Git-工作区中文件的状态"><a href="#Git-工作区中文件的状态" class="headerlink" title="Git 工作区中文件的状态"></a>Git 工作区中文件的状态</h3><p>Git 工作区中的文件存在两种状态：</p>
<ul>
<li>untracked：未跟踪（未被纳入版本控制）</li>
<li>tracked：已跟踪（被纳入版本控制）<ul>
<li>Unmodified 未修改状态</li>
<li> Modified 已修改状态</li>
<li> Staged 已暂存状态</li>
</ul>
</li>
</ul>
<h3 id="本地仓库常用操作"><a href="#本地仓库常用操作" class="headerlink" title="本地仓库常用操作"></a>本地仓库常用操作</h3><ul>
<li>git status：查看文件状态</li>
<li> git add：将文件的修改加入暂存区</li>
<li> git reset：将暂存区的文件取消暂存或者是切换到指定版本</li>
<li> git commit：将暂存区的文件修改提交到版本库</li>
<li> git log：查看日志</li>
</ul>
<h4 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h4><p>可以通过 <code>git status</code> 来查看当前状态<br><img data-src="https://s2.loli.net/2022/12/19/aAXWUjsLFzoqeDQ.png" alt="04-status查看状态.png"></p>
<h4 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git add fileName</span><br></pre></td></tr></tbody></table></figure>

<h4 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h4><p>每次 Git 提交都会产生新的版本号，通过版本号就可以回到历史版本</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git reset --hard 版本号</span><br><span class="line">git reset --hard 76b00c3fd44c92359d70e02cb4ff35c3acf90b40</span><br></pre></td></tr></tbody></table></figure>

<h4 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git commit -m msg 文件名</span><br><span class="line">git commit -m <span class="string">"提交一个文件"</span> User.java</span><br></pre></td></tr></tbody></table></figure>

<p>红色字体：未跟踪，也就是还没有纳入 git 的版本管理<br>绿色字体：文件已经放到了缓存区</p>
<h4 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h4><p>git log 命令的作用是查看提交日志；通过 git log 命令查看日志，可以发现每次提交都会产生一个版本号，提交时设置的 message、提交人、邮箱、提交时间等信息都会记录到日志中</p>
<p><img data-src="https://s2.loli.net/2022/12/19/gKTMRtdwW6nSsvL.png" alt="05-log查看日志.png"></p>
<h3 id="远程仓库常用命令"><a href="#远程仓库常用命令" class="headerlink" title="远程仓库常用命令"></a>远程仓库常用命令</h3><ul>
<li>git remote：查看远程仓库</li>
<li> git remote add：添加远程仓库</li>
<li> git clone：从远程仓库克隆</li>
<li> git pull：从远程仓库拉取</li>
<li> git push：推送到远程仓库</li>
</ul>
<h4 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h4><p>origin 表示远程仓库的简称</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote</span><br><span class="line">git remote -v</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/12/19/OQIXkWoCeEtbRj9.png" alt="06-查看远程仓库简称.png"></p>
<p>说明当前本地的仓库已经和远程的仓库之间建立好了连接了。如果输入以上两个命令没有返回值的话，说明这仅仅只是一个本地仓库</p>
<h4 id="git-remote-add"><a href="#git-remote-add" class="headerlink" title="git remote add"></a>git remote add</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote add 简称 远程仓库地址</span><br></pre></td></tr></tbody></table></figure>

<p>注意</p>
<ul>
<li>一个本地仓库可以关联多个远程仓库</li>
<li>这个简称我们习惯命名为 origin</li>
</ul>
<p>比如我这边初始化了一个本地仓库，然后还有一个远程仓库，想要将这个本地仓库和远程仓库联系起来</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote add origin https://gitee.com/coffeelize/repo1.git</span><br></pre></td></tr></tbody></table></figure>

<p>此时再输入命令 <code>git remote -v</code>，即可查看是否已经关联成功</p>
<h4 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h4><p>Git 克隆的是该 Git 仓库服务器上的几乎所有数据（包括日志信息、历史记录等）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 远程仓库地址</span><br></pre></td></tr></tbody></table></figure>

<h4 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h4><p>将本地仓库内容推送到远程仓库</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git push 远程仓库简称 分支名称</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>先需要将文件提交到本地仓库 (add &amp; commit)，再推送到远程仓库</p>
<h4 id="切换远程仓库"><a href="#切换远程仓库" class="headerlink" title="切换远程仓库"></a>切换远程仓库</h4><p>如果当前本地仓库需要链接到另一个远程仓库呢，怎么处理？<br>比如说本地仓库当前绑定的是 repo1 仓库，想要将本地仓库绑定到另外一个远程仓库 hellogit。当前如果已经连接到了一个远程仓库，是无法直接通过添加远程仓库 URL 来覆盖掉原来的 URL，如下图所示：</p>
<p><img data-src="https://s2.loli.net/2022/12/19/eM9OwU4TtP2hbFa.png" alt="017-无法直接覆盖远程连接的URL.png"></p>
<p>方式一：直接修改远程仓库地址，更换远程仓库地址</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote set-url origin URL</span><br><span class="line">git remote set-url orgin https://gitee.com/coffeelize/hellogit.git</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>方式二：先先删除当前连接的远程仓库地址，然后在添加</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin url</span><br></pre></td></tr></tbody></table></figure>

<h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><p>分支是 Git 使用过程中非常重要的概念。使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。</p>
<p>本地仓库和远程仓库中都有分支，同一个仓库可以有多个分支，各个分支相互独立，互不干扰。通过 git init 命令创建本地仓库时默认会创建一个 master 分支。</p>
<h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><ul>
<li>git branch：列出所有本地分支</li>
<li> git branch -r：列出所有远程分支</li>
<li> git branch -a：列出所有本地分支和远程分支</li>
</ul>
<h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git branch 分支名称</span><br><span class="line">git branch <span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/12/19/MpQ8A1bmc2wCYov.png" alt="07-创建分支.png"></p>
<h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git checkout 分支名称</span><br><span class="line">git checkout <span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/12/19/Dmi5soLJWx81thl.png" alt="08-切换分支.png"></p>
<h4 id="推送至远程仓库分支"><a href="#推送至远程仓库分支" class="headerlink" title="推送至远程仓库分支"></a>推送至远程仓库分支</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git push 远程仓库简称 分支名称</span><br><span class="line">//将<span class="built_in">test</span>分支推送到远程仓库</span><br><span class="line">git push origin <span class="built_in">test</span> </span><br></pre></td></tr></tbody></table></figure>

<h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git merge 分支名称</span><br><span class="line">git merge <span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure>

<p>分支合并时需注意合并的方向，是将命令中的分支合并到当前所在的分支</p>
<p><img data-src="https://s2.loli.net/2022/12/19/7getKomVWPIN3DL.png" alt="09-合并分支.png"></p>
<p>在合并分支这种大操作下，会进入 vim 模式要求我们写日志，按照 vim 的操作即可</p>
<p>如果在合并当中遇到文件冲突，比如说主分支对 A 文件进行了修改，测试分支也对 A 文件进行了修改，然后在主分支中合并分支时，报如下错误：Automatic merge failed; fix conflicts and then commit the result.</p>
<p><img data-src="https://s2.loli.net/2022/12/19/9PgOCTkJ3qyxnr6.png" alt="10-合并分支报错.png"></p>
<p>此时冲突的文件会自动加入如下内容。<br><img data-src="https://s2.loli.net/2022/12/19/cIbPGwn2ksgdyqh.png" alt="011-合并后的冲突文件.png"></p>
<p>假如我们是想要保留这两行，那么可以把这些自动生成的符号删除，然后还需要将这个有冲突的文件再 add 和 commit 一下，此时，仍然会有报错：<br>fatal: cannot do a partial commit during a merge.（不能在合并的时候只提交一部分）<br><img data-src="https://s2.loli.net/2022/12/19/U3C4zvuSK1iTYxr.png" alt="012-合并解决冲突文件后再次报错.png"></p>
<p>这个时候我们需要在 commit 后面添加一个 <code>-i</code> 参数，此时这个冲突被我们手动解决了，然后就可以正常 push 了</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"modify by me"</span> testBranch.txt -i</span><br><span class="line">git push origin master</span><br></pre></td></tr></tbody></table></figure>

<h3 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h3><p>Git 中的标签，指的是某个分支某个特定时间点的状态。通过标签，可以很方便的切换到标记时的状态。比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 、v1.2 等）。</p>
<h4 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></tbody></table></figure>

<h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git tag 标签名</span><br><span class="line">git tag v0.1</span><br></pre></td></tr></tbody></table></figure>

<h4 id="删除本地标签"><a href="#删除本地标签" class="headerlink" title="删除本地标签"></a>删除本地标签</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git tag -d 标签名</span><br><span class="line">git tag -d v0.1</span><br></pre></td></tr></tbody></table></figure>

<h4 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git push origin :refs/tags/标签名</span><br><span class="line">git push origin :refs/tags/v0.1</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/12/19/6dlXaVzxyr7GL9O.png" alt="013-删除远程标签.png"></p>
<h4 id="将标签推送至远程仓库"><a href="#将标签推送至远程仓库" class="headerlink" title="将标签推送至远程仓库"></a>将标签推送至远程仓库</h4><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git push 远程仓库简称 标签名</span><br><span class="line">git push origin v0.1</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/12/19/Ejv9nRudHbUyrFo.png" alt="014-将标签推送至远程仓库.png"></p>
<h4 id="检出标签"><a href="#检出标签" class="headerlink" title="检出标签"></a>检出标签</h4><p>检出标签时需要新建一个分支来指向某个标签。会自动将某个 tag 中的内容检出到一个新的分支下面</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git checkout -b 新建的一个分支名 标签名</span><br><span class="line">git checkout -b aNewBranch v0.2</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/12/19/dyaphUSAH3scDTP.png" alt="015-检出标签.png"></p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb 常用配置及依赖</title>
    <url>/posts/JavaWeb-common-configuration-and-dependencies.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h3><p>使用说明</p>
<ol>
<li>注意修改别名</li>
<li>注意修改数据库信息中的 URL</li>
<li> 注意驱动对应的 MySQL 版本为 8</li>
<li> 注意修改 SQL 的映射文件名</li>
<li>文件存放在 resource 资源文件夹下 </li>
</ol>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"https://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--起别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.itheima.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库的连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///db1?useSSL=false<span class="symbol">&amp;amp;</span>useServerPrepStmts=true"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"wwww"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包扫描--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.itheima.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"https://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace：名称空间，需要链接到UserMapper接口</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.itheima.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以下开始填写SQL语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"Brand"</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        CONSOLE ：表示当前的日志信息是可以输出到控制台的。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%level] %blue(%d{HH:mm:ss.SSS}) %cyan([%thread]) %boldGreen(%logger{15}) - %msg %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.itheima"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF</span></span><br><span class="line"><span class="comment">     ， 默认debug</span></span><br><span class="line"><span class="comment">      &lt;root&gt;可以包含零个或多个&lt;appender-ref&gt;元素，标识这个输出位置将会被本日志级别控制。</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="常用依赖"><a href="#常用依赖" class="headerlink" title="常用依赖"></a>常用依赖</h3><p>使用说明</p>
<ol>
<li>内容添加到 pom.xml 文件中 </li>
</ol>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加载mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--junit单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加slf4j日志api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加logback-classic依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加logback-core依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--防止运行Tomcat报错--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>14<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Tomcat的插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;port&gt;80&lt;/port&gt;--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;path&gt;/&lt;/path&gt;--&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--JSP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--JSTL标签--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>使用 JSTL 标签时，需要在 jsp 文件中引入 JSTL 标签库</p>
<figure class="highlight jsp"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;  </span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;  </span><br></pre></td></tr></tbody></table></figure>

<h3 id="SqlSessionFactoryUtil-java"><a href="#SqlSessionFactoryUtil-java" class="headerlink" title="SqlSessionFactoryUtil.java"></a>SqlSessionFactoryUtil.java</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.util;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;  </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionFactoryUtils</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> {  </span><br><span class="line">        <span class="comment">//静态代码块会随着类的加载而自动执行，且只执行一次  </span></span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> {  </span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;  </span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);  </span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);  </span><br><span class="line">        } <span class="keyword">catch</span> (IOException e) {  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>JavaWeb</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>AHK - 将 DOCX 批量转换为 PDF</title>
    <url>/posts/AHK-Batch-convert-DOCX-to-PDF.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Bilibili： <a href="https://www.bilibili.com/video/BV1Wf4y1E7tW/?spm_id_from=333.788&amp;vd_source=3ae7ae95fa254383ab9ae83f75abd29d">批次快速转档：将 Word 转换為 PDF 格式</a></li>
<li>博客： <a href="http://jdev.tw/blog/5968/autohotkey-docx2pdf">用 AutoHotkey 批次快速转档：将 Word 档转换为 PDF 格式</a></li>
</ul>
<h3 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h3><ol>
<li>使用 COM 物件 Word.Application，将 DOCX 档转换为 PDF 格式</li>
<li>整批转换资料夹里的所有 DOCX 档</li>
<li>使用 ExportAsFixedFormat 方法</li>
</ol>
<p>程序源代码请参见：<a href="https://gist.github.com/emisjerry/5f936143f1086cc4b0eb100e891dbed3">https://gist.github.com/emisjerry/5f936143f1086cc4b0eb100e891dbed3</a></p>
<p><strong>我们要做的修改只要将第三行的存放 docx 的文件夹路径设定一下就好</strong>，注意只能对 docx 进行转换，无法转换 doc 文档</p>
<p>通过与 docx 自带的 PDF 转换比较了一下，生成的 PDF 大小一模一样</p>
<figure class="highlight ahk"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">;; 将DOCX批量转换为PDF</span></span><br><span class="line"></span><br><span class="line">sFolder := <span class="string">"Z:\DOC"</span></span><br><span class="line">sOutputExt := <span class="string">".pdf"</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">Loop %</span>sFolder%\*.docx {</span><br><span class="line">  sInputFilename = <span class="variable">%A_LoopFileName%</span></span><br><span class="line">  <span class="comment">;MsgBox filename=%sPdfFileName%</span></span><br><span class="line">  iPos := InStr(sInputFilename, <span class="string">"~"</span>)</span><br><span class="line">  if (iPos = <span class="number">1</span>) {</span><br><span class="line">    <span class="keyword">Continue</span></span><br><span class="line">  }</span><br><span class="line">  Docx2Pdf(sFolder . <span class="string">"\"</span> . sInputFilename, sOutputExt)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Docx2Pdf(sInputFilename, sOutputExt) {</span><br><span class="line">  WD := ComObjCreate(<span class="string">"Word.Application"</span>)  <span class="comment">; Create Word object</span></span><br><span class="line">  WD.Documents.Open(sInputFilename) <span class="comment">;open this file</span></span><br><span class="line">  WD.visible:=<span class="number">0</span> <span class="comment">;make visible for this example.  Normally set to zero</span></span><br><span class="line">  iFormat := <span class="number">17</span></span><br><span class="line">  sOutputFilename := StrReplace(sInputFilename, <span class="string">".docx"</span>, <span class="string">".pdf"</span>)</span><br><span class="line">  <span class="comment">;MsgBox fn=%sOutputFilename%, ext=%sOutputExt%, format=%iFormat%</span></span><br><span class="line">  <span class="comment">;;WdSaveFormat https://docs.microsoft.com/zh-tw/office/vba/api/word.wdsaveformat</span></span><br><span class="line">  </span><br><span class="line">  OpenAfterExport := <span class="literal">True</span></span><br><span class="line">  OptimizeFor := <span class="literal">False</span></span><br><span class="line">  Range := <span class="number">0</span></span><br><span class="line">  From := <span class="number">1</span></span><br><span class="line">  To := <span class="literal">False</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  Item:= 0</span></span><br><span class="line"><span class="comment">  IncludeDocProps := False</span></span><br><span class="line"><span class="comment">  KeepIRM := True</span></span><br><span class="line"><span class="comment">  reateBookmarks := wdExportCreateHeadingBookmarks := 1</span></span><br><span class="line"><span class="comment">  ocStructureTags := False</span></span><br><span class="line"><span class="comment">  BitmapMissingFonts := True</span></span><br><span class="line"><span class="comment">  UseISO19005_1 := False</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">;; WD.ActiveDocument.ExportAsFixedFormat(sOutputFilename, 17, OpenAfterExport, OptimizeFor, Range, From, To, Item, IncludeDocProps, KeepIRM, CreateBookmarks, DocStructureTags, BitmapMissingFonts, UseISO19005_1)    </span></span><br><span class="line"></span><br><span class="line">  WD.ActiveDocument.ExportAsFixedFormat(sOutputFilename,<span class="number">17</span>,OpenAfterExport,OptimizeFor,Range,From,To)  </span><br><span class="line"></span><br><span class="line">  WD.quit <span class="comment">; quit Word</span></span><br><span class="line">  WD := <span class="string">""</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>ahk</tag>
        <tag>PDF</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 之 framed 宏包</title>
    <url>/posts/Framed-macro-package.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="速览"><a href="#速览" class="headerlink" title="速览"></a>速览</h3><p>framed – Framed or shaded regions that can break across pages</p>
<p>该宏包提供可三个环境：</p>
<ul>
<li>frame：which puts an ordinary frame box around the region</li>
<li>shaded：which shades the region</li>
<li>leftbar：which places a line at the left side.</li>
</ul>
<p>还提供了一个命令来自定义设置 framed-style 的环境</p>
<h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{zhlipsum}</span><br><span class="line"><span class="keyword">\usepackage</span>{geometry} </span><br><span class="line"><span class="keyword">\usepackage</span>{framed}</span><br><span class="line"><span class="keyword">\geometry</span>{a4paper,left=2.5cm,right=2.5cm,top=2.5cm,bottom=2.5cm}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">    <span class="keyword">\begin</span>{framed}</span><br><span class="line">        <span class="keyword">\zhlipsum</span>[1-5]</span><br><span class="line">    <span class="keyword">\end</span>{framed}</span><br><span class="line"><span class="keyword">\clearpage</span></span><br><span class="line"><span class="keyword">\fbox</span>{<span class="keyword">\zhlipsum</span>[1-3]}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>设置页边距，ctexart 文档类默认的页边距有些宽，习惯使用如下的页边距</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\usepackage{geometry} </span><br><span class="line">\geometry{a4paper,left=2.5cm,right=2.5cm,top=2.5cm,bottom=2.5cm}</span><br></pre></td></tr></tbody></table></figure>

<p>使用中文假文</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\usepackage{zhlipsum} %中文假文宏包</span><br><span class="line">\zhlipsum[1-5] %从假文文章中抽取第一段到第五段内容</span><br></pre></td></tr></tbody></table></figure>

<h3 id="frame-环境和-fbox-命令"><a href="#frame-环境和-fbox-命令" class="headerlink" title="frame 环境和 fbox 命令"></a>frame 环境和 fbox 命令</h3><p>两者均可以为文本内容添加外边框，但是当文本内容超过一行之后，使用 fbox 就会出现问题了，无法正确的换行和分页，导致超出该行的部分无法在 PDF 中显示。如下图所示<br>因此，针对此问题，宏包作者开发了 framed 宏包，两者的关系不言而喻，framed 宏包是基于 fbox 进行开发的。</p>
<h4 id="framed-环境输出"><a href="#framed-环境输出" class="headerlink" title="framed 环境输出"></a>framed 环境输出</h4><ol>
<li>正常换行</li>
</ol>
<p><img data-src="https://s2.loli.net/2022/08/26/HSyITu96NoXO8vx.png" alt="01-frame宏包正常换行.png"></p>
<ol start="2">
<li>正常分页</li>
</ol>
<p><img data-src="https://s2.loli.net/2022/08/26/3okDxFs7OwXzY1p.png" alt="02-frame宏包正常分页.png"></p>
<h4 id="fbox-命令输出"><a href="#fbox-命令输出" class="headerlink" title="fbox 命令输出"></a>fbox 命令输出</h4><ol>
<li>无法正确换行</li>
</ol>
<p><img data-src="https://s2.loli.net/2022/08/26/gQ98HBMDPNuxUjz.png" alt="03-fbox命令无法处理长文本-无法正常换行和分页.png"></p>
<p>实际上，framebox 命令输出也是这种效果，这里暂且认为 framebox 命令和 fbox 命令完全相同</p>
<p>对应的，fbox 可以设置边框边线的宽度和内容距边框的间距，framed 环境同样是可以设置的</p>
<h3 id="设置边框宽度和间距"><a href="#设置边框宽度和间距" class="headerlink" title="设置边框宽度和间距"></a>设置边框宽度和间距</h3><h4 id="对-fbox-盒子进行设置"><a href="#对-fbox-盒子进行设置" class="headerlink" title="对 fbox 盒子进行设置"></a>对 fbox 盒子进行设置</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\fbox</span>{Test box}</span><br><span class="line"><span class="keyword">\setlength</span>{<span class="keyword">\fboxrule</span>}{1.6pt}</span><br><span class="line"><span class="keyword">\setlength</span>{<span class="keyword">\fboxsep</span>}{1em}</span><br><span class="line"><span class="keyword">\fbox</span>{Test box}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/08/26/6bkqhwMB2xpPLHz.png" alt="06-设置fbox边框和间距.png"></p>
<h4 id="对-frame-盒子进行设置"><a href="#对-frame-盒子进行设置" class="headerlink" title="对 frame 盒子进行设置"></a>对 frame 盒子进行设置</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{zhlipsum}</span><br><span class="line"><span class="keyword">\usepackage</span>{geometry}</span><br><span class="line"><span class="keyword">\usepackage</span>{framed}</span><br><span class="line"><span class="keyword">\geometry</span>{a4paper,left=2.5cm,right=2.5cm,top=2.5cm,bottom=2.5cm}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{framed}</span><br><span class="line"> <span class="keyword">\zhlipsum</span>[1]</span><br><span class="line"><span class="keyword">\end</span>{framed}</span><br><span class="line"><span class="keyword">\setlength</span><span class="keyword">\FrameRule</span>{1.6pt}</span><br><span class="line"><span class="keyword">\setlength</span><span class="keyword">\FrameSep</span>{2em}</span><br><span class="line"><span class="keyword">\begin</span>{framed}</span><br><span class="line"> <span class="keyword">\zhlipsum</span>[1]</span><br><span class="line"><span class="keyword">\end</span>{framed}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/08/26/6ZjnEfo8CuKpY3c.png" alt="07-默认frame盒子和自定义frame盒子.png"></p>
<h3 id="拓展应用"><a href="#拓展应用" class="headerlink" title="拓展应用"></a>拓展应用</h3><h4 id="换页是否封闭外边框"><a href="#换页是否封闭外边框" class="headerlink" title="换页是否封闭外边框"></a>换页是否封闭外边框</h4><ul>
<li>framed 环境默认是封闭的</li>
<li> oframed 环境则提供了开口的外边框：oframed 其实是 “Open Framed” 的组合吧</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/08/26/tdETgbaPuC4NRn7.png" alt="04-oframed环境.png"></p>
<h4 id="左边线样式"><a href="#左边线样式" class="headerlink" title="左边线样式"></a>左边线样式</h4><p>我想许多人使用这个宏包就是为了实现网页中的 <strong>引用</strong> 效果吧 o (^▽^) o，左边线的长度会自动随着环境中的文本长度进行变化</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{zhlipsum}</span><br><span class="line"><span class="keyword">\usepackage</span>{geometry}</span><br><span class="line"><span class="keyword">\usepackage</span>{framed}</span><br><span class="line"><span class="keyword">\geometry</span>{a4paper,left=2.5cm,right=2.5cm,top=2.5cm,bottom=2.5cm}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"><span class="keyword">\begin</span>{leftbar}</span><br><span class="line"> <span class="keyword">\zhlipsum</span>[1]</span><br><span class="line"><span class="keyword">\end</span>{leftbar}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/08/26/UwWyTVJesIrpzOb.png" alt="05-leftbar环境.png"></p>
<h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><p>除了上面所说的 <code>FrameSep</code> 和 <code>FrameRule</code> 命令，宏包手册中还列举了大量其他命令，这里就不仔细研究了，感觉用不到这里面太多的东西，但是还是感谢开发者啦 o (^▽^) o</p>
<p><img data-src="https://s2.loli.net/2022/08/26/JarGK9Oh1ulQiBC.png" alt="08-framed宏包命令.png"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>CTAN： <a href="https://ctan.org/pkg/framed">framed – Framed or shaded regions that can break across pages</a></li>
</ul>
]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 修订</title>
    <url>/posts/LaTeX-revision.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="在线编译"><a href="#在线编译" class="headerlink" title="在线编译"></a>在线编译</h3><p>使用 <a href="https://www.overleaf.com/">Overleaf, Online LaTeX Editor</a> 平台</p>
<ul>
<li>假设原版本是 <code>Manuscript.tex</code></li>
<li>新建一个文件 <code>Manuscript-Revised-Cleancopy.tex</code>，并拷贝 <code>Manuscript.tex</code> 中的所有内容，在这个新建的文件上进行修改，编写修订后的终稿</li>
<li>新建一个文件叫做 <code>Manuscript-Diff-Withtrack.tex</code>, 内容如下：</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\RequirePackage{shellesc}</span><br><span class="line">\ShellEscape{latexdiff Manuscript.tex Manuscript-Revised-Cleancopy.tex &gt; Manuscript-Diff-Withtrack.tex}</span><br><span class="line">\input{Manuscript-Diff-Withtrack}</span><br><span class="line">\documentclass{dummy}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>如需生成旧版本，打开 Manuscript.tex 后点击 Recompile</li>
<li> 如需生成新版本，打开 Manuscript-Revised-Cleancopy.tex 后点击 Recompile</li>
<li> 如需生成变化追踪的版本，打开 Manuscript-Diff-Withtrack.tex 后点击 Recompile</li>
</ul>
<p>参考资料：<a href="https://www.zhihu.com/question/460475233/answer/2120555503">投了一篇 sci，返回意见是大修，没有经验，请问如何操作？ - 知乎</a></p>
<h3 id="本地编译"><a href="#本地编译" class="headerlink" title="本地编译"></a>本地编译</h3><p>初稿 LaTeX，并且已经写好 LaTeX 的终稿 —&gt; 导入 <a href="https://3142.nl/latex-diff/">Online LaTeX diff tool</a> 中生成<strong>带有修订的 LaTeX 稿件</strong> —&gt; 使用本地 LaTeX 编译器进行编译生成 PDF</p>
<h4 id="Online-LaTeX-diff-tool"><a href="#Online-LaTeX-diff-tool" class="headerlink" title="Online LaTeX diff tool"></a>Online LaTeX diff tool</h4><p>在线工具： <a href="https://3142.nl/latex-diff/">Online LaTeX diff tool</a></p>
<ul>
<li> 输入：两个版本的 LaTeX 原稿文件</li>
<li>输出：带有修订标记的单个 LaTeX 源文件</li>
<li>参考示例：</li>
</ul>
<p><img data-src="https://s2.loli.net/2023/10/14/iLGXrd25cBpVosN.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>Latex</tag>
        <tag>research</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 之浮动体标题样式</title>
    <url>/posts/LaTeX-floating-body-title-style.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Caption 宏包中的一些参数说明及案例分析，用于自定义设置浮动体中标题的样式 o (^▽^) o</p>
<ol>
<li>修改全篇浮动体标题格式（包括图片，表格等）</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">% 导言区</span><br><span class="line">\usepackage[font=small,labelfont=bf]{caption}</span><br><span class="line">% 下面命令与之等价</span><br><span class="line">\usepackage{caption}</span><br><span class="line">\captionsetup{font=small,labelfont=bf}</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>单独对浮动体的图片或表格环境中标题的设置 </li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">% 导言区</span><br><span class="line">\usepackage{caption}</span><br><span class="line">\captionsetup[figure]{font=small,labelfont=bf}</span><br><span class="line">\captionsetup[table]{font=small,labelfont=bf}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="案例-1：加粗标题的图标签"><a href="#案例-1：加粗标题的图标签" class="headerlink" title="案例 1：加粗标题的图标签"></a>案例 1：加粗标题的图标签</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br><span class="line"><span class="keyword">\usepackage</span>{caption}</span><br><span class="line"><span class="keyword">\captionsetup</span>{</span><br><span class="line"> labelfont=bf<span class="comment">%设置图片标题的编号为加粗</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">\captionsetup</span>[figure]{skip=3pt}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\begin</span>{figure}</span><br><span class="line">  <span class="keyword">\includegraphics</span>[width=4in]{example-image}</span><br><span class="line">  <span class="keyword">\caption</span>{这个图片标题的图标会加粗}</span><br><span class="line"> <span class="keyword">\end</span>{figure}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/25/W7hIqF5ZDBK4Ygs.png" alt="01-将图片标题编号加粗.png"></p>
<p>实际上，使用 caption 命令不一定真的需要加入图片或者表格，只需要将其应用在浮动体环境当中即可</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br><span class="line"><span class="keyword">\usepackage</span>{caption}</span><br><span class="line"><span class="keyword">\captionsetup</span>{</span><br><span class="line"> labelfont=bf<span class="comment">%设置图片标题的编号为加粗</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">\captionsetup</span>[figure]{skip=3pt}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\begin</span>{figure}</span><br><span class="line">  <span class="keyword">\caption</span>{这个图片标题的图标会加粗}</span><br><span class="line"> <span class="keyword">\end</span>{figure}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/25/AQvzFtPYkZuMESx.png" alt="01-只需将caption插入浮动环境中即可.png"></p>
<h3 id="案例-2：设置标题与图片、表格之间的间距"><a href="#案例-2：设置标题与图片、表格之间的间距" class="headerlink" title="案例 2：设置标题与图片、表格之间的间距"></a>案例 2：设置标题与图片、表格之间的间距</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%语法</span></span><br><span class="line"><span class="keyword">\captionsetup</span>[float type]{options}</span><br><span class="line"><span class="comment">%举例</span></span><br><span class="line"><span class="keyword">\captionsetup</span>[figure]{skip=3pt} <span class="comment">%设置图片标题与图片之间的间距为3pt</span></span><br></pre></td></tr></tbody></table></figure>

<p>对于 Latex 标准的 article、book、report 等文档，默认的 skip 值为 10pt</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br><span class="line"><span class="keyword">\usepackage</span>{caption}</span><br><span class="line"><span class="keyword">\captionsetup</span>[figure]{skip=0pt}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\begin</span>{figure} </span><br><span class="line">   <span class="keyword">\centering</span> </span><br><span class="line">   <span class="keyword">\includegraphics</span>[width=2in]{example-image-A} </span><br><span class="line">   <span class="keyword">\caption</span>{设置标题与图片间的间距为0}</span><br><span class="line"> <span class="keyword">\end</span>{figure}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/25/MA2rTnuy9GEo8xa.png" alt="03-设置标题与图片之间的间距为0.png"></p>
<h3 id="案例-3：更多的标题样式设置"><a href="#案例-3：更多的标题样式设置" class="headerlink" title="案例 3：更多的标题样式设置"></a>案例 3：更多的标题样式设置</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[11pt]{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br><span class="line"><span class="keyword">\usepackage</span>{caption} </span><br><span class="line"><span class="keyword">\captionsetup</span>[figure]{</span><br><span class="line"> name=Figure, </span><br><span class="line"> listformat=empty, <span class="comment">%和List of Figures/Table相关</span></span><br><span class="line"> justification=justified, <span class="comment">%即两端对齐（默认）</span></span><br><span class="line"> labelsep=quad, <span class="comment">%标题编号与标题之间的分隔符</span></span><br><span class="line"> position=above, <span class="comment">%不一定能够设定标题与图片相对之间的位置</span></span><br><span class="line"> skip=3pt, <span class="comment">%图片标题与图片之间的距离</span></span><br><span class="line"> width=4in,  <span class="comment">%图片标题的宽度（这里设置为了和图片一样宽）</span></span><br><span class="line"> labelfont={huge}, <span class="comment">%图片标题编号的字号</span></span><br><span class="line"> font={small} <span class="comment">%图片标题的字号</span></span><br><span class="line">} </span><br><span class="line"><span class="keyword">\begin</span>{document} </span><br><span class="line"> <span class="keyword">\begin</span>{figure} </span><br><span class="line">  <span class="keyword">\centering</span></span><br><span class="line">  <span class="keyword">\includegraphics</span>[width=4in]{example-image-duck}</span><br><span class="line">  <span class="keyword">\caption</span>{这是一个很长很长很长很很长很长很长长很长很长图片标题} </span><br><span class="line"> <span class="keyword">\end</span>{figure} </span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/25/8HbmBTlcJunaVfq.png" alt="02-标题样式设置大汇总.png"></p>
<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><h4 id="labelsep"><a href="#labelsep" class="headerlink" title="labelsep"></a>labelsep</h4><p>语法</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line">labelsep=〈label separator name〉</span><br></pre></td></tr></tbody></table></figure>

<p>对应值有</p>
<table>
<thead>
<tr>
<th align="center">格式</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"> default</td>
<td align="center"> 同 colon</td>
</tr>
<tr>
<td align="center">none</td>
<td align="center"> 无间隔</td>
</tr>
<tr>
<td align="center"> colon</td>
<td align="center"> 英文分号</td>
</tr>
<tr>
<td align="center"> period</td>
<td align="center"> 英文句点</td>
</tr>
<tr>
<td align="center"> space</td>
<td align="center"> 空格</td>
</tr>
<tr>
<td align="center"> quad</td>
<td align="center"> 一个 em 的间隔</td>
</tr>
<tr>
<td align="center"> newline</td>
<td align="center"> 标题另起一行</td>
</tr>
<tr>
<td align="center"> endash</td>
<td align="center"> 英文 dash 连接符</td>
</tr>
</tbody></table>
<h4 id="Justiﬁcation"><a href="#Justiﬁcation" class="headerlink" title="Justiﬁcation"></a>Justiﬁcation</h4><p>语法</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line">justification=〈justiﬁcation name〉</span><br></pre></td></tr></tbody></table></figure>

<p>对应的值有</p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"> justified</td>
<td align="center"> 两端对齐，也就是正文默认对齐方式</td>
</tr>
<tr>
<td align="center"> centering</td>
<td align="center"> 居中对齐</td>
</tr>
<tr>
<td align="center"> raggedright</td>
<td align="center"> 左对齐</td>
</tr>
<tr>
<td align="center"> raggedleft</td>
<td align="center"> 右对齐</td>
</tr>
<tr>
<td align="center"> Raggedright</td>
<td align="center">……</td>
</tr>
</tbody></table>
<h4 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h4><p>语法</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line">font={font options}</span><br><span class="line">labelfont={font options}</span><br><span class="line">textfont={font options}</span><br></pre></td></tr></tbody></table></figure>

<p>对应的 font options</p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"> small</td>
<td align="center">Small size</td>
</tr>
<tr>
<td align="center">normalsize</td>
<td align="center">normalsize size</td>
</tr>
<tr>
<td align="center">large</td>
<td align="center">Large size</td>
</tr>
<tr>
<td align="center">it</td>
<td align="center">Italic shape</td>
</tr>
<tr>
<td align="center">up</td>
<td align="center">Upright shape</td>
</tr>
<tr>
<td align="center">bf</td>
<td align="center">Bold series</td>
</tr>
<tr>
<td align="center">rm</td>
<td align="center">Roman family</td>
</tr>
<tr>
<td align="center">sf</td>
<td align="center">Sans Serif family</td>
</tr>
<tr>
<td align="center">tt</td>
<td align="center">Typewriter family</td>
</tr>
<tr>
<td align="center">stretch=amount</td>
<td align="center"><code>\setstretch{amount}</code></td>
</tr>
<tr>
<td align="center">color=colour</td>
<td align="center"><code>color{colour}</code></td>
</tr>
<tr>
<td align="center">…</td>
<td align="center">…</td>
</tr>
</tbody></table>
<h4 id="标题宽度"><a href="#标题宽度" class="headerlink" title="标题宽度"></a>标题宽度</h4><p>语法</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line">margin=amount <span class="comment">%同时设置左右外边距</span></span><br><span class="line">margin={left amount,right amount} <span class="comment">%分别设置左右外边距</span></span><br><span class="line">witdh=amount <span class="comment">%设置标题的宽度</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/25/FkBLqMuibvd5enZ.png" alt="03-图片标题宽度.png"></p>
<h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><p>语法</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">skip=amount</span><br></pre></td></tr></tbody></table></figure>

<h4 id="position"><a href="#position" class="headerlink" title="position"></a>position</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">position=top or position=above</span><br><span class="line">position=bottom or position=below</span><br><span class="line">position=auto(which is the default setting)</span><br></pre></td></tr></tbody></table></figure>

<p>请注意：Caption 官方文档中对于该参数的说明</p>
<blockquote>
<p>Please note that position=top does NOT mean that the caption is actually placed at the top of the ﬁgure or table.<br>the caption package tries its best to determine the actual position of the caption on its own. Please note that while this is successfully in most cases, it could give wrong results under rare circumstances.</p>
</blockquote>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>简书：<a href="https://www.jianshu.com/p/0a1c45a02120">LaTeX 标题控制</a></li>
<li> Latex 入门（刘海洋）</li>
<li>Latex 工作室：<a href="https://www.latexstudio.net/archives/8652.html">如何用 caption 宏包格式化图表标题和子标题</a></li>
</ul>
]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 之列表环境的使用</title>
    <url>/posts/Using-Latex&#39;s-list-environment.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>注：本文内容的主体结构转载自博客园 <a href="https://www.cnblogs.com/ahhylau/p/4586167.html">LaTeXmath：LaTeX 中列表环境的使用</a>，本人仅对案例中的一些代码、图片及一些宏包的使用做了一些补充，</p>
<p>列表就是将所要表达的内容分为若干个条目并按一定的顺序排列，达到简明、直观的效果。在论文的写作中会经常使用到列表。LaTeX 中常见的列表环境有&nbsp;enumerate、itemize 和 description。这三种列表环境的主要区别是列表项标签的不同：</p>
<p>有序列表和无序列表无需在进行介绍，对于 description 列表来说，可指定其标签</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{pifont} </span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\begin</span>{description}</span><br><span class="line">  <span class="keyword">\item</span>[<span class="keyword">\ding</span>{47}] This is the first item</span><br><span class="line">  <span class="keyword">\item</span>[<span class="keyword">\ding</span>{47}] This is the second item</span><br><span class="line">  <span class="keyword">\item</span>[<span class="keyword">\ding</span>{47}] This is the third item</span><br><span class="line"> <span class="keyword">\end</span>{description}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/07/01/riNZI4RMPheTu9o.png" alt="01-指定description标签.png"></p>
<p>了解关于 pifont 宏包的更多信息，请参考：<a href="https://ctan.org/pkg/pifont">pifont – Access to PostScript standard Symbol and Dingbats fonts</a>，如下为 pifont 的一些字符</p>
<p><img data-src="https://s2.loli.net/2022/07/01/2PuBr5ezGCqi1cT.png" alt="02-pifont的一些字符.png"></p>
<p>或者参阅以下的简要信息快速了解 pifont 宏包</p>
<blockquote>
<p>The package provides commands for Pi fonts (Dingbats, Symbol, etc.); all commands assume you know the character number within the font of the symbol within the font.</p>
</blockquote>
<p>列表环境也可以互相嵌套，默认情况下不同层级的标签不同，以体现分级层次。<br>上述三种列表都是基于 <code>list 列表环境</code> 定制的，也就是说 list 环境是功能最强大的列表环境，只是由于它使用起来比较麻烦，所以很少被使用。其实上述的三种列表在通过一定的扩展后可以产生许多样式的列表，这些基本就可以满足平时的需要了。下面说一下怎么进行功能扩展。enumitem 宏包可以对 enumerate、itemize 和 description 环境进行功能扩展，并且提供了简便的语法。enumitem 宏包允许用户在上述三种列表中通过&nbsp;key=value 的键值方式进行设置。可选的设置项包括:</p>
<ul>
<li>垂直距离 </li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">topsep  </span><br><span class="line">partopsep  </span><br><span class="line">parsep  </span><br><span class="line">itemsep</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>水平距离 </li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">leftmargin  </span><br><span class="line">rightmargin  </span><br><span class="line">listparindent  </span><br><span class="line">labelwidth  </span><br><span class="line">labelsep  </span><br><span class="line">itemindent</span><br></pre></td></tr></tbody></table></figure>

<p>这些距离的含义可以从图示中反映出来，更详细的说明可以参看 enumitem 宏包的说明文档，或可参考：<a href="https://syvshc.github.io/2021-12-05-length-in-enumitem/">enumitem 宏包中的长度设置</a> @无锤乙醇（再次感谢这些中文独立博客做出的巨大贡献，凭借一己之力节省了大家不知多少时间ヾ (❀^ω^) ノﾞ）</p>
<p><img data-src="https://s2.loli.net/2022/07/01/5VD3uSgw89Bhr1p.png" alt="03-list环境中的水平参数.png"></p>
<p>以如下代码对自定义列表环境进行案例分析:</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{enumerate}</span><br><span class="line"><span class="keyword">\usepackage</span>{enumitem}</span><br><span class="line"><span class="keyword">\setlist</span>[enumerate,1]{label=(<span class="keyword">\arabic</span>*).,font=<span class="keyword">\textup</span>,</span><br><span class="line"> leftmargin=7mm,labelsep=1.5mm,topsep=0mm,itemsep=-0.8mm}</span><br><span class="line"><span class="keyword">\setlist</span>[enumerate,2]{label=(<span class="keyword">\alph</span>*).,font=<span class="keyword">\textup</span>,</span><br><span class="line"> leftmargin=7mm,labelsep=1.5mm,topsep=-0.8mm,itemsep=-0.8mm}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\begin</span>{enumerate}</span><br><span class="line">  <span class="keyword">\item</span> 这是一个一级列表</span><br><span class="line">  <span class="keyword">\item</span> 看我在嵌套一个二级列表</span><br><span class="line">    <span class="keyword">\begin</span>{enumerate}</span><br><span class="line">     <span class="keyword">\item</span> 这是一个二级列表</span><br><span class="line">    <span class="keyword">\end</span>{enumerate}</span><br><span class="line"> <span class="keyword">\end</span>{enumerate}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p>&nbsp;<code>\setlist[enumerate,1]</code>&nbsp;表示对一级列表进行设置，<code>\setlist[enumerate,2]</code>&nbsp;表示对二级列表进行设置。这样一级列表的标签就是括号加阿拉伯数字加点，二级标签是括号加小写英文字母加点。输出效果为：</p>
<p><img data-src="https://s2.loli.net/2022/07/01/loZxCdTE8hAVD74.png" alt="04-自定义修改列表样式.png"></p>
<p><code>font=\textup</code> 表示使用直立体（可参考官方入门手册）</p>
<p><img data-src="https://s2.loli.net/2022/07/01/xiAoPaI8DqOQ7mU.png" alt="05-字体命令.png"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>个人博客：<a href="https://syvshc.github.io/2021-12-05-length-in-enumitem/">enumitem 宏包中的长度设置</a> @无锤乙醇</li>
<li>博客园：<a href="https://www.cnblogs.com/ahhylau/p/4586167.html">LaTeX 中列表环境的使用</a> @LaTeXmath</li>
<li>Latex 官方入门手册：一份（不太）简短的 LaTeX2ε 介绍</li>
</ul>
]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 图片双语标题</title>
    <url>/posts/Latex-Image-Bilingual-Captions.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本案例可能需要使用到的宏包</p>
<ul>
<li>graphicx</li>
<li>bicaption</li>
<li> 案例示范图片下载链接： <a href="https://sm.ms/image/tr6LsNaFwvZkjnh">Cat2</a> ； <a href="https://sm.ms/image/7vdxgA1Rz6OFqyr">QHU’s landscape</a></li>
</ul>
<h3 id="方式-1：通过计数器"><a href="#方式-1：通过计数器" class="headerlink" title="方式 1：通过计数器"></a>方式 1：通过计数器</h3><p>难点：插入图片之后，Latex 是如何知道这张图片是图 2（而不是图 3，图 4）呢？原因在于计数器。通过 figure 环境添加图片之后，计数器自动加一。</p>
<p>如果我们为图片添加了第二个标题的话，第一个标题（中文标题）为图 1，第二个标题（英文标题）就会变为图 2 了，而这两个标题明明是指同一张图片，此时就需要在添加第二个标题之前将计数器再减掉 1。</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">    <span class="keyword">\begin</span>{figure}</span><br><span class="line">        <span class="keyword">\centering</span></span><br><span class="line">        <span class="keyword">\includegraphics</span>[width=1.5in]{fig/cat2}</span><br><span class="line">        <span class="keyword">\vspace</span>{-10pt} <span class="comment">%控制标题与图片之间的垂直距离</span></span><br><span class="line">        <span class="keyword">\caption</span>{这是一只可爱的猫} <span class="comment">%使用ctexart文档类，默认图例为中文“图”</span></span><br><span class="line">        <span class="keyword">\addtocounter</span>{figure}{-1} <span class="comment">%使用caption命令后，figure的计数器默认加一，此时再添加英文的标题，计数器就会变成2了，所以计数器减1，中英文标题计数器仍保持一致</span></span><br><span class="line">        <span class="keyword">\renewcommand</span>{<span class="keyword">\figurename</span>}{Fig} <span class="comment">%将图例改为英文“Fig”</span></span><br><span class="line">        <span class="keyword">\vspace</span>{-10pt} <span class="comment">%控制第二个标题与第一个标题之间的垂直距离</span></span><br><span class="line">        <span class="keyword">\caption</span>{This is a cute cat} </span><br><span class="line">        <span class="keyword">\renewcommand</span>{<span class="keyword">\figurename</span>}{图} <span class="comment">%将图例的再次改为中文，修改为默认值，以防影响下方图片的图例</span></span><br><span class="line">        <span class="keyword">\label</span>{Bigcat}</span><br><span class="line">    <span class="keyword">\end</span>{figure}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/02/Df6uG7R91FePr45.png" alt="01-图片双语标题示例.png"></p>
<p>每句代码的意思已经写在注释中了，那么在插入第二章图片试一下是否有问题</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">    <span class="keyword">\begin</span>{figure}</span><br><span class="line">        <span class="keyword">\centering</span></span><br><span class="line">        <span class="keyword">\includegraphics</span>[width=1.5in]{fig/cat2}</span><br><span class="line">        <span class="keyword">\vspace</span>{-10pt} <span class="comment">%控制标题与图片之间的垂直距离</span></span><br><span class="line">        <span class="keyword">\caption</span>{这是一只可爱的猫} <span class="comment">%使用ctexart文档类，默认图例为中文“图”</span></span><br><span class="line">        <span class="keyword">\addtocounter</span>{figure}{-1} <span class="comment">%使用caption命令后，figure的计数器默认加一，此时再添加英文的标题，计数器就会变成2了，所以计数器减1，中英文标题计数器仍保持一致</span></span><br><span class="line">        <span class="keyword">\renewcommand</span>{<span class="keyword">\figurename</span>}{Fig} <span class="comment">%将图例改为英文“Fig”</span></span><br><span class="line">        <span class="keyword">\vspace</span>{-10pt} <span class="comment">%控制第二个标题与第一个标题之间的垂直距离</span></span><br><span class="line">        <span class="keyword">\caption</span>{This is a cute cat} </span><br><span class="line">        <span class="keyword">\renewcommand</span>{<span class="keyword">\figurename</span>}{图} <span class="comment">%将图例的再次改为中文，修改为默认值，以防影响下方图片的图例</span></span><br><span class="line">        <span class="keyword">\label</span>{Bigcat}</span><br><span class="line">    <span class="keyword">\end</span>{figure}</span><br><span class="line"></span><br><span class="line">以上是本示例的第一张图片：<span class="keyword">\ref</span>{Bigcat}，接下来插入第二章图片：</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{figure}[htbp]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\includegraphics</span>[width=3in]{fig/QHU}</span><br><span class="line">    <span class="keyword">\vspace</span>{-10pt} </span><br><span class="line">    <span class="keyword">\caption</span>{青海大学美景} <span class="comment">%使用ctexart文档类，默认图例为中文“图”</span></span><br><span class="line">    <span class="keyword">\addtocounter</span>{figure}{-1} <span class="comment">%使用caption命令后，figure的计数器默认加一，此时再添加英文的标题，计数器就会变成2了，所以计数器减1，中英文标题计数器仍保持一致</span></span><br><span class="line">    <span class="keyword">\renewcommand</span>{<span class="keyword">\figurename</span>}{Fig} <span class="comment">%将图例改为英文“Fig”</span></span><br><span class="line">    <span class="keyword">\vspace</span>{-10pt} </span><br><span class="line">    <span class="keyword">\caption</span>{QHU's grand landscape} </span><br><span class="line">    <span class="keyword">\renewcommand</span>{<span class="keyword">\figurename</span>}{图} <span class="comment">%将图例的再次改为中文，修改为默认值，以防影响下方图片的图例</span></span><br><span class="line">    <span class="keyword">\label</span>{QHU-landscape}</span><br><span class="line"><span class="keyword">\end</span>{figure}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/02/gNRizltmPkw6AoI.png" alt="02-图片双语标题之插入多图示例.png"></p>
<p>图片的图例没有问题，可是为什么图 2 会在那段文字的上方去了呢？原因在于 Latex 排版时会自动为我们排版出尽可能少的页面空白，让页面看起来更美观。这或许也正是 figure 环境为浮动体的体现吧<br>那么可以在第二章图片的 figure 环境后添加 <code>htbp</code> 参数，让 Latex 按照我们的要求进行排版</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">% ...</span></span><br><span class="line">以上是本示例的第一张图片：<span class="keyword">\ref</span>{Bigcat}，接下来插入第二章图片：</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{figure}[htbp]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="comment">% ...</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/02/SLcTC9gbF8Hld75.png" alt="02-图片双语标题之插入多图示例htbp.png"></p>
<p>浮动体中有关插图位置的参数，详细规则见文末参考资料 1</p>
<ul>
<li>h: here 将图片插到此处</li>
<li> t: top 将图片插到页顶</li>
<li> b: bottom&nbsp;将图片插到页底</li>
<li> p: page 插图独立一页</li>
<li> H: 将图片固定在此处</li>
</ul>
<p>一般参数取 h 或 H 就好了，当然也可以写多个参数，如 htbp, 此时参数会按照顺序执行，首先尝试用 h，如果不行再依次使用其他参数 (其实效果和单独一个 h 差不多)。</p>
<h3 id="方式-2：通过-bicaption-宏包"><a href="#方式-2：通过-bicaption-宏包" class="headerlink" title="方式 2：通过 bicaption 宏包"></a>方式 2：通过 bicaption 宏包</h3><p>直接使用 bicaption 宏包就比较简单啦，毕竟宏包的开发作者就是针对这个双语标题开发出来的嘛。</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br><span class="line"><span class="keyword">\usepackage</span>{bicaption} <span class="comment">%使用双语标题宏包</span></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\begin</span>{figure}</span><br><span class="line">  <span class="keyword">\centering</span></span><br><span class="line">  <span class="keyword">\includegraphics</span>[width=1.5in]{fig/cat2}</span><br><span class="line">  <span class="keyword">\bicaption</span>{这是一种可爱的猫}{This is a cute cat}</span><br><span class="line">  <span class="keyword">\label</span>{Bigcat}</span><br><span class="line"> <span class="keyword">\end</span>{figure}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/02/6tQdf7kMcKrEzyF.png" alt="04-使用bicaption宏包图片示例.png"></p>
<p>很遗憾，并没有像我们预想的那样，第二个标题的图例还是中文。宏包作者没有直接为我们定义好第二个标题的图例是有原因的，他不针对中文用户，对于其他需求，比如第一个标题为母语，第二个标题为俄语呢，通过我们自己的需求来设置第二个标题的图例是不是更好一些。</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br><span class="line"><span class="keyword">\usepackage</span>{bicaption}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\captionsetup</span>[figure][bi-second]{name=Fig}&nbsp;<span class="comment">%设置图的第二标题图例为Fig</span></span><br><span class="line"> <span class="keyword">\begin</span>{figure}</span><br><span class="line">  <span class="keyword">\centering</span></span><br><span class="line">  <span class="keyword">\includegraphics</span>[width=1.5in]{fig/cat2}</span><br><span class="line">  <span class="keyword">\bicaption</span>{这是一种可爱的猫}{This is a cute cat}</span><br><span class="line">  <span class="keyword">\label</span>{Bigcat}</span><br><span class="line"> <span class="keyword">\end</span>{figure}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/02/GCsvxadEjpo5i7Y.png" alt="05-使用bicaption宏包设置第二标题图例.png"></p>
<p>参考资料：</p>
<ol>
<li>CSDN： <a href="https://blog.csdn.net/sdu_hao/article/details/103392927">LaTex 论文排版 | (19) LaTex 中的插图问题</a> @CoreJT</li>
<li>Latex 官方中文文档： 一份（不太）简短的 LATEX2ε 介绍</li>
</ol>
]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 之 shapepar 宏包</title>
    <url>/posts/LaTeX-shapepar-macro-package.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>记录一个 “无实际意义” 的宏包：<code>shapepar</code>，宏包名由 “shape” 和 “par” 构成，见名之意，该宏包和形状有关。<br><img data-src="https://s2.loli.net/2022/07/10/T4yO3JtNVfRLpiq.png" alt="01-文本以心形的方式输出.png"></p>
<p>由 Donald Arseneau 开发的宏包 shapepar 定义了命令 <code>\shapepar</code> , 它可以按预定义的形状排版段落。段落的尺寸自动被调整，以使得整个造型中都添满了文本。但是被排版的段落中应不含有显示公式或 <code>\vadjust</code> 内容，因为其中含有 <code>\vspace</code> 命令.</p>
<p>LaTeX 中常见的图文混排的宏包有 picinpar、wrapfigure 和 cutwin 等，它们的功能大致相当，都是实现图表和文字的混排。这里要讲的 shapepar 宏包非常有意思，可以将一段文字排成一些有趣的图案，已经预定义的有&nbsp;<code>\circlepar</code>(圆形)、<code>\CDlabel</code> (CD 光盘)、<code>\heartpar</code> (心形)、<code>\starpar</code> (五角形) 等等。下面以 <code>\heartpar</code> 为例。</p>
<p><img data-src="https://s2.loli.net/2022/07/10/7My4AqfjVgnu9Ld.png" alt="02-宏包预定义好的形状.png"></p>
<h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{shapepar}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">    <span class="keyword">\heartpar</span>{壬戌之秋，七月既望，苏子与客泛舟，游于赤壁之下。清风徐来，水波不兴，举酒属客，诵明月之诗，歌窈窕之章。少焉，月出于东山之上，徘徊于斗牛之间，白露横江，水光接天；纵一苇之所如，陵万顷之茫然。浩浩乎如凭虚御风，而不知其所止；飘飘乎如遗世独立，羽化而登仙。}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/07/10/T4yO3JtNVfRLpiq.png" alt="01-文本以心形的方式输出.png"></p>
<p>另外，其他已经预定义好的形状（不太常用的形状），可通过 <code>∗shape.def</code> 在电脑中搜索，但是需要 include 来引入</p>
<h3 id="拓展应用"><a href="#拓展应用" class="headerlink" title="拓展应用"></a>拓展应用</h3><p>宏包作者提供了自定义形状的一些命令，比如如下形状 ，具体请参阅宏包手册，这里暂时没有需求就不做深入研究了。<br>关于这个自定义形状，有兴趣的同学可自行搜索 <code>ShapePatch by Christian Gollwitzer</code></p>
<p><img data-src="https://s2.loli.net/2022/07/10/jEw4WmHrkSQphTd.png" alt="03-自定义形状.png"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Latex 工作室： <a href="https://www.latexstudio.net/archives/7825.html">LaTeX 技巧 163：如何输入特殊形状的段落</a></li>
<li>博客园：<a href="https://www.cnblogs.com/ahhylau/p/4586776.html">用 shapepar 宏包排出心形图案</a></li>
<li> shapepar 宏包手册：texdoc shapepar</li>
</ul>
]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 图片背景 eso-pic 宏包</title>
    <url>/posts/LaTeX-picture-background-eso-pic-macro-package.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>Ctan.org： <a href="https://ctan.org/pkg/eso-pic">eso-pic – Add picture commands (or backgrounds) to every page</a></li>
<li> 英文 PDF 手册： <a href="https://mirror-hk.koddos.net/CTAN/macros/latex/contrib/eso-pic/eso-pic.pdf">eso-pic 宏包帮助文档</a></li>
<li>宏包简要说明：This package makes it easy to add some picture commands to every page at absolute positions</li>
</ul>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ul>
<li><code>\AddToShipoutPictureBG</code>：为每一页添加背景</li>
<li><code>\AddToShipoutPictureBG*</code>：仅为当前页面添加背景</li>
<li><code>\AddToShipoutPictureFG</code>：类似于 BG，但只作用于文档内容部分</li>
</ul>
<p>一些预定于好的位置命令</p>
<ul>
<li>AtPageUpperLeft</li>
<li>AtPageLowerLeft</li>
<li>AtPageCenter</li>
<li>AtTextUpperLeft</li>
<li>AtTextLowerLeft</li>
<li>AtTextCenter</li>
<li>AtStockUpperLeft</li>
<li>AtStockLowerLeft</li>
<li>AtStockCenter</li>
</ul>
<h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br><span class="line"><span class="keyword">\usepackage</span>{zhlipsum}</span><br><span class="line"><span class="keyword">\usepackage</span>{eso-pic}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">	<span class="keyword">\zhlipsum</span>[1-3]</span><br><span class="line">	<span class="keyword">\clearpage</span></span><br><span class="line">	<span class="keyword">\AddToShipoutPictureBG</span>{</span><br><span class="line">			<span class="keyword">\includegraphics</span>[width=<span class="keyword">\paperwidth</span>,height=<span class="keyword">\paperheight</span>]{example-image-duck}</span><br><span class="line">}</span><br><span class="line">	<span class="keyword">\clearpage</span></span><br><span class="line">	<span class="keyword">\zhlipsum</span>[1]</span><br><span class="line">	<span class="keyword">\clearpage</span></span><br><span class="line">	<span class="keyword">\zhlipsum</span>[1]</span><br><span class="line">	<span class="keyword">\section</span>{第一部分}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p>插入长宽和当前页面长宽一致的鸭子的背景图片</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240621162756.png" alt="image.png"></p>
<p>如果我们有比较好的背景图片，比如四角带有阴影的 png 图片或者设计好的图片，那么使用该宏包还是挺有效果的</p>
<h3 id="部分说明"><a href="#部分说明" class="headerlink" title="部分说明"></a>部分说明</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line">width=<span class="keyword">\paperwidth</span>,height=<span class="keyword">\paperheight</span></span><br></pre></td></tr></tbody></table></figure>

<p>表示图片的长宽和页面的长宽一致，将图片强制拉伸至页面长宽</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line">example-image-duck</span><br><span class="line">example-image-a</span><br><span class="line">example-grid-100x100bp</span><br></pre></td></tr></tbody></table></figure>

<p>这几个图片名称经常用于插入示范图片，分别代表 <code>鸭子</code>、<code>字母A</code> 和 <code>长宽为10个单元格的网格表</code> </p>
<p>注意使用 graphics 宏包（正常应为 graphicx 宏包）插入 includegraphics 命令时 texstudio 不会出现红色背景提示，但是编译出来老是报错 <code>\end{document}</code></p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240621163115.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>Latex</tag>
        <tag>image</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 引用参考文献指南</title>
    <url>/posts/LaTeX-Citing-References-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>主要内容：</p>
<ul>
<li>LaTeX 引用参考文献 ——Bibtex 格式说明</li>
<li> LaTeX 引用参考文献 ——BibTex 参考文献格式大全</li>
<li>参考文献类型及其标识</li>
</ul>
<h3 id="LaTeX-引用参考文献——Bibtex-格式说明"><a href="#LaTeX-引用参考文献——Bibtex-格式说明" class="headerlink" title="LaTeX 引用参考文献——Bibtex 格式说明"></a>LaTeX 引用参考文献 ——Bibtex 格式说明</h3><p>注：以下内容转载自 CSDN： <a href="https://blog.csdn.net/kmsj0x00/article/details/85318057">Bibtex 格式说明</a> @<a href="https://blog.csdn.net/kmsj0x00" title="人工智能靠人工">人工智能靠人工</a></p>
<table>
<thead>
<tr>
<th align="center"><strong>类型</strong></th>
<th align="center"><strong>简介</strong></th>
<th align="center"><strong>必需关键字</strong></th>
<th align="center"><strong>可省略关键字</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"> @article</td>
<td align="center"> 期刊或杂志上的一篇文章。</td>
<td align="center">author, title, journal, year.</td>
<td align="center">volume, number, pages, month, note.</td>
</tr>
<tr>
<td align="center">@book</td>
<td align="center"> 有确定出版社的书籍。</td>
<td align="center">author 或 editor, title, publisher, year.</td>
<td align="center">volume 或 number, series, address, edition, month, note.</td>
</tr>
<tr>
<td align="center">@booklet</td>
<td align="center"> 印制的有封皮的作品，但没有出版社或赞助机构的名称。</td>
<td align="center">title.</td>
<td align="center">author, howpublished, address, month, year, note.</td>
</tr>
<tr>
<td align="center">@inbook</td>
<td align="center"> 一本书的一部分 (章，节或某些页)。</td>
<td align="center">author 或 editor, title, chapter 和 / 或 pages, publisher,year.</td>
<td align="center">volume 或 number, series, type, address, edition, month, note.</td>
</tr>
<tr>
<td align="center">@incollection</td>
<td align="center"> 一本书中有自己题目的一部分。</td>
<td align="center">author, title, booktitle, publisher, year.</td>
<td align="center">editor, volume 或 number, series, type, chapter, pages, address, edition, month, note.</td>
</tr>
<tr>
<td align="center">@conference/@inproceedings</td>
<td align="center"> 会议论文集中的一篇文章。</td>
<td align="center">author, title, booktitle, year.</td>
<td align="center">editor, volume 或 number, series, pages, address, month, organization, publisher, note.</td>
</tr>
<tr>
<td align="center">@manual</td>
<td align="center"> 科技文档。</td>
<td align="center">title.</td>
<td align="center">author, organization, address, edition, month, year, note.</td>
</tr>
<tr>
<td align="center">@mastersthesis</td>
<td align="center"> 硕士论文。</td>
<td align="center">author, title, school, year.</td>
<td align="center">type, address, month, note.</td>
</tr>
<tr>
<td align="center">@misc</td>
<td align="center"> 不属于其它任何类型的作品。</td>
<td align="center">没有。</td>
<td align="center">author, title, howpublished, month, year, note.</td>
</tr>
<tr>
<td align="center">@phdthesis</td>
<td align="center"> 博士论文。</td>
<td align="center">author, title, school, year.</td>
<td align="center">type, address, month, note.</td>
</tr>
<tr>
<td align="center">@proceedings</td>
<td align="center"> 会议论文集。</td>
<td align="center">title, year.</td>
<td align="center">editor,volume 或 number, series, address, month, organization, publisher, note.</td>
</tr>
<tr>
<td align="center">@techreport</td>
<td align="center"> 学校或其它研究机构印制的报告。</td>
<td align="center">author, title, institution, year.</td>
<td align="center">type, number, address, month, note.</td>
</tr>
<tr>
<td align="center">@unpublished</td>
<td align="center"> 有作者和标题的还未出版的作品。</td>
<td align="center">author, title, note.</td>
<td align="center">month, year.</td>
</tr>
</tbody></table>
<h3 id="LaTeX-引用参考文献——BibTex-参考文献格式大全"><a href="#LaTeX-引用参考文献——BibTex-参考文献格式大全" class="headerlink" title="LaTeX 引用参考文献——BibTex 参考文献格式大全"></a>LaTeX 引用参考文献 ——BibTex 参考文献格式大全</h3><p>注：以下内容转载自 CSDN： <a href="https://blog.csdn.net/Ryan_lee9410/article/details/106055787?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161416641916780262556059%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161416641916780262556059&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-106055787.pc_search_result_before_js&amp;utm_term=LaTeX%E5%BC%95%E7%94%A8%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%E2%80%94%E2%80%94BibTex%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%E6%A0%BC%E5%BC%8F%E5%A4%A7%E5%85%A8">LaTeX 引用参考文献 ——BibTex 参考文献格式大全</a> @<a href="https://blog.csdn.net/Ryan_lee9410" title="Pycharm比VScode更好用">Pycharm 比 VScode 更好用</a></p>
<h4 id="期刊杂志的论文"><a href="#期刊杂志的论文" class="headerlink" title="期刊杂志的论文"></a>期刊杂志的论文</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@article{RN01,</span><br><span class="line">  author = {Peter Adams}, </span><br><span class="line">  title = {The title of the work},</span><br><span class="line">  journal = {The name of the journal},</span><br><span class="line">  year = 1993,</span><br><span class="line">  number = 2,</span><br><span class="line">  pages = {201-213},</span><br><span class="line">  month = 7,</span><br><span class="line">  note = {An optional note}, </span><br><span class="line">  volume = 4</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>必要域: author, title, journal, year.</li>
<li> 可选域: volume, number, pages, month, note.</li>
</ul>
<h4 id="公开出版书籍"><a href="#公开出版书籍" class="headerlink" title="公开出版书籍"></a>公开出版书籍</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@book{RN02,</span><br><span class="line">  author = {Peter Babington}, </span><br><span class="line">  title = {The title of the work},</span><br><span class="line">  publisher = {The name of the publisher},</span><br><span class="line">  year = 1993,</span><br><span class="line">  volume = 4,</span><br><span class="line">  series = 10,</span><br><span class="line">  address = {The address},</span><br><span class="line">  edition = 3,</span><br><span class="line">  month = 7,</span><br><span class="line">  note = {An optional note},</span><br><span class="line">  isbn = {3257227892}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>必要域: author/editor, title, publisher, year.</li>
<li> 可选域: volume/number, series, address, edition, month, note.</li>
</ul>
<h4 id="会议论文（集）"><a href="#会议论文（集）" class="headerlink" title="会议论文（集）"></a>会议论文（集）</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@inproceedings{RN11,</span><br><span class="line">  title = {The title of the work},</span><br><span class="line">  year = 1993,</span><br><span class="line">  editor = {Peter Kidwelly},</span><br><span class="line">  volume = 4,</span><br><span class="line">  series = 5,</span><br><span class="line">  page = 100-102,</span><br><span class="line">  address = {The address of the publisher},</span><br><span class="line">  month = 7,</span><br><span class="line">  organization = {The organization},</span><br><span class="line">  publisher = {The name of the publisher},</span><br><span class="line">  note = {An optional note}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>必要域: title, page, publisher, volume/number, year.</li>
<li> 可选域: editor, volume/number, series, address, month, organization, note.</li>
</ul>
<p>等价于 inproceedings</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@conference{RN04,</span><br><span class="line">  author = {Peter Draper}, </span><br><span class="line">  title = {The title of the work},</span><br><span class="line">  booktitle = {The title of the book},</span><br><span class="line">  year = 1993,</span><br><span class="line">  editor = {The editor},</span><br><span class="line">  volume = 4,</span><br><span class="line">  series = 5,</span><br><span class="line">  pages = 213,</span><br><span class="line">  address = {The address of the publisher},</span><br><span class="line">  month = 7,</span><br><span class="line">  organization = {The organization},</span><br><span class="line">  publisher = {The publisher},</span><br><span class="line">  note = {An optional note}  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>必要域: author, title, booktitle, year.</li>
<li> 可选域: editor, volume/number, series, pages, address, month, organization, publisher, note.</li>
</ul>
<h4 id="硕士论文"><a href="#硕士论文" class="headerlink" title="硕士论文"></a>硕士论文</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@mastersthesis{RN08,</span><br><span class="line">  author = {Peter Harwood}, </span><br><span class="line">  title = {The title of the work},</span><br><span class="line">  school = {The school of the thesis},</span><br><span class="line">  year = 1993,</span><br><span class="line">  address = {The address of the publisher},</span><br><span class="line">  month = 7,</span><br><span class="line">  note = {An optional note}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>必要域: author, title, school, year.</li>
<li> 可选域: type, address, month, note.</li>
</ul>
<h4 id="博士论文"><a href="#博士论文" class="headerlink" title="博士论文"></a>博士论文</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@phdthesis{RN10,</span><br><span class="line">  author = {Peter Joslin}, </span><br><span class="line">  title = {The title of the work},</span><br><span class="line">  school = {The school of the thesis},</span><br><span class="line">  year = 1993,</span><br><span class="line">  address = {The address of the publisher},</span><br><span class="line">  month = 7,</span><br><span class="line">  note = {An optional note}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>必要域: author, title, year, school.</li>
<li> 可选域: address, month, keywords, note.</li>
</ul>
<h3 id="参考文献类型及其标识"><a href="#参考文献类型及其标识" class="headerlink" title="参考文献类型及其标识"></a>参考文献类型及其标识</h3><h4 id="参考文献类型"><a href="#参考文献类型" class="headerlink" title="参考文献类型"></a>参考文献类型</h4><table>
<thead>
<tr>
<th align="center"><strong>专著</strong></th>
<th align="center"><strong>论文集</strong></th>
<th align="center"><strong>报纸文章</strong></th>
<th align="center"><strong>期刊文章</strong></th>
<th align="center"><strong>学位论文</strong></th>
<th align="center"><strong>报告</strong></th>
<th align="center"><strong>标准</strong></th>
<th align="center"><strong>专利</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"> M</td>
<td align="center">C</td>
<td align="center">N</td>
<td align="center">J</td>
<td align="center">D</td>
<td align="center">R</td>
<td align="center">S</td>
<td align="center">P</td>
</tr>
</tbody></table>
<p>对于数据库 (database)、计算机程序 (computer program) 及电子公告 (electronic bulletin board) 等电子文献类型的参考文献，建议以下列双字母作为标识：</p>
<h4 id="电子参考文献类型"><a href="#电子参考文献类型" class="headerlink" title="电子参考文献类型"></a>电子参考文献类型</h4><table>
<thead>
<tr>
<th align="center"><strong>数据库</strong></th>
<th align="center"><strong>计算机程序</strong></th>
<th align="center"><strong>电子公告</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"> DB</td>
<td align="center">CP</td>
<td align="center">EB</td>
</tr>
</tbody></table>
<p>对于非纸张型载体的电子文献，当被引用为参考文献时需在参考文献类型标识中同时标明其载体类型。本规范建议采用双字母表示电子文献载体类型：磁带 (magnetic tape) MT，磁盘 (disk) DK，光盘 (CD-ROM) CD，联机网络 (online) OL，并以下列格式表示包括了文献载体类型的参考文献类型标识：</p>
<table>
<thead>
<tr>
<th align="center"><strong>文献类型标识</strong></th>
<th align="center"><strong>载体类型标识</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center"> [DB/OL]</td>
<td align="center"> 联机网上数据库 (database online)</td>
</tr>
<tr>
<td align="center">[DB/MT]</td>
<td align="center"> 磁带数据库 (database on magnetic tape)</td>
</tr>
<tr>
<td align="center">[M/CD]</td>
<td align="center"> 光盘图书 (monograph on CD-ROM)</td>
</tr>
<tr>
<td align="center">[CP/DK]</td>
<td align="center"> 磁盘软件 (computer program on disk)</td>
</tr>
<tr>
<td align="center">[J/OL]</td>
<td align="center"> 网上期刊 (serial online)</td>
</tr>
<tr>
<td align="center">[EB/OL]</td>
<td align="center"> 网上电子公告 (electronic bulletin board online)</td>
</tr>
</tbody></table>
<p>以纸张为载体的传统文献在引作参考文献时不必注明其载体类型。</p>
<h3 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h3>]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 相关资源汇总</title>
    <url>/posts/LaTeX-Learning-Materials.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>本文中所述的链接都是在解决实际问题中自己一个个积累下来的。发布在博客中做一个网址目录，配合博客的搜索全文的功能，希望能对学习 LaTeX 的我们有些帮助，后期也会随时更新此处的链接。最后，如果你也有相关的优秀资源，可以再评论区发一下呀 (<em>^▽^</em>)，在这里提前谢谢你哦！</p>
<h3 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h3><p>Excel - LaTeX - HTML - Markdown 转换工具</p>
<ul>
<li>Tablegenerator：<a href="https://www.tablesgenerator.com/html_tables">HTML Tables generator – TablesGenerator.com</a></li>
<li>Tableconvert：<a href="https://tableconvert.com/">Table Convert Online - Make it easier to work with tables</a></li>
<li>Pandoc：<a href="https://pandoc.org/">Pandoc - About pandoc</a></li>
<li>Markdown：<a href="https://markdown.com.cn/">Markdown 官方教程</a></li>
</ul>
<h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h3><ul>
<li>在线图片压缩：<a href="https://tinypng.com/">tinypng</a></li>
<li> 本地 (网页应用) 图片压缩：<a href="https://squoosh.app/">Squoosh</a></li>
<li> 爱折腾的可以试试 Github 上的 pngquant：<a href="https://github.com/kornelski/pngquant">GitHub - kornelski/pngquant: Lossy PNG compressor — pngquant command based on libimagequant library</a></li>
<li> 图片压缩：<a href="https://github.com/Yuriy-Svetlov/compress-images">Github - Compress-images</a> &amp; <a href="https://coffeelize.top/posts/5566e923.html">使用指南</a> (支持 JPG,PNG,SVG,GIF)</li>
</ul>
<h3 id="矢量绘图工具"><a href="#矢量绘图工具" class="headerlink" title="矢量绘图工具"></a>矢量绘图工具</h3><ul>
<li>Drawio (Win,Mac, 浏览器；免费)</li>
<li>Sketch(Mac)</li>
<li>Figma (Win,Mac, 浏览器)</li>
<li>Visio(Win)</li>
<li>Inkscape (Win,Mac; 免费)</li>
</ul>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ul>
<li>霞鹜文楷：<a href="https://github.com/lxgw/LxgwWenKai">GitHub - LxgwWenKai</a></li>
<li>chinesefonts.org：<a href="https://chinesefonts.org/">Chinese Fonts</a></li>
<li> 方正字库：<a href="https://www.foundertype.com/">方正字库官网</a></li>
</ul>
<h3 id="LaTeX-技术博客"><a href="#LaTeX-技术博客" class="headerlink" title="LaTeX 技术博客"></a>LaTeX 技术博客</h3><ul>
<li>始终：<a href="https://liam.page/categories/LaTeX/">分类: LaTeX | 始终</a></li>
<li>谢益辉：<a href="https://yihui.org/cn/">谢益辉</a></li>
<li>无锤乙醇：<a href="https://syvshc.github.io/">无锤乙醇 - 学而未精</a></li>
<li>夏大鱼羊：<a href="https://xkwxdyy.github.io/">夏大鱼羊</a></li>
<li>兰铃：<a href="https://muyuuuu.github.io/">Just for Life.</a></li>
<li> 潘建瑜教授学术主页：<a href="https://math.ecnu.edu.cn/~jypan/Latex/index.html">LaTeX 科技排版</a></li>
<li>芒果不盲：<a href="https://ljguo1020.github.io/">芒果不盲 - LaTeX</a></li>
<li>Born to die：<a href="https://camusecao.top/">Born to die</a></li>
<li> 智朋的个人博客 (真不要脸)：<a href="https://coffeelize.top/">智朋的个人博客</a></li>
</ul>
<h3 id="LaTeX-实用资源"><a href="#LaTeX-实用资源" class="headerlink" title="LaTeX 实用资源"></a>LaTeX 实用资源</h3><ul>
<li>LaTeX 工作室：<a href="https://www.latexstudio.net/">LaTeX 工作室</a><ul>
<li><a href="https://www.latexstudio.net/texdoc/#/29?page_id=155">入门看哪些文档 - LaTeX 工作室</a></li>
<li><a href="https://ask.latexstudio.net/ask/">首页 - LaTeX 工作室 问答社区</a></li>
</ul>
</li>
<li> CTAN.org 宏包大全：<a href="https://ctan.org/pkg/">CTAN: Packages</a></li>
<li>CTEX.org 常用宏包：<a href="http://www.ctex.org/documents/packages/">CTEX - 在线文档 - TeX/LaTeX 常用宏包</a></li>
<li> CTEX.org：<a href="http://www.ctex.org/documents/latex/graphics/graphics.html">LATEX2e&nbsp;插图指南</a></li>
<li> CTEX.org 主页：<a href="http://www.ctex.org/HomePage#">科技排版系统</a></li>
<li> LaTeX 编辑部：<a href="https://www.latexstudio.net/hulatex/index.htm">LaTeX 编辑部</a></li>
</ul>
<h3 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h3><h3 id="宏包"><a href="#宏包" class="headerlink" title="宏包"></a>宏包</h3><ul>
<li>常用宏包 (ctex.org)：<a href="http://www.ctex.org/documents/packages/layout/index.htm">CTEX - 在线文档 - TeX/LaTeX 常用宏包</a></li>
</ul>
]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 多图排版</title>
    <url>/posts/LaTeX-Multi-Photo-Layout.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="图片排版"><a href="#图片排版" class="headerlink" title="图片排版"></a>图片排版</h3><ul>
<li>搭配 <a href="https://coffeelize.top/posts/9165505d.html">coffeelize.sty</a> 宏包使用</li>
<li>使用 subfigure 宏包</li>
</ul>
<h4 id="两图并排"><a href="#两图并排" class="headerlink" title="两图并排"></a>两图并排</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\documentclass{ctexart}</span><br><span class="line">\usepackage{coffeelize}</span><br><span class="line">\usepackage{graphicx}</span><br><span class="line">\usepackage{subfigure}</span><br><span class="line"></span><br><span class="line">\begin{document}</span><br><span class="line"></span><br><span class="line">\begin{figure}[htbp]</span><br><span class="line"> \centering</span><br><span class="line"> \subfigure[subfig:1]{</span><br><span class="line">  \includegraphics[width=0.48\textwidth]{example-image-A}</span><br><span class="line"> }</span><br><span class="line"> \subfigure[subfig:2]{</span><br><span class="line">  \includegraphics[width=0.48\textwidth]{example-image-A}</span><br><span class="line"> }</span><br><span class="line"> \caption{两张图片并列}</span><br><span class="line"> \label{fig:subfigure_example1}</span><br><span class="line">\end{figure}</span><br><span class="line"> </span><br><span class="line">\end{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2023/05/18/Sp3heqlWH25wGia.png" alt="01-两图并排.png"></p>
<h4 id="三图并排"><a href="#三图并排" class="headerlink" title="三图并排"></a>三图并排</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\documentclass{ctexart}</span><br><span class="line">\usepackage{coffeelize}</span><br><span class="line">\usepackage{graphicx}</span><br><span class="line">\usepackage{subfigure}</span><br><span class="line"></span><br><span class="line">\begin{document}</span><br><span class="line"></span><br><span class="line">\begin{figure}[htbp]</span><br><span class="line"> \centering</span><br><span class="line"> \subfigure[subfig:1]{</span><br><span class="line">  \includegraphics[width=0.3\textwidth]{example-image-A}</span><br><span class="line"> }</span><br><span class="line"> \subfigure[subfig:2]{</span><br><span class="line">  \includegraphics[width=0.3\textwidth]{example-image-A}</span><br><span class="line"> }</span><br><span class="line"> \subfigure[subfig:3]{</span><br><span class="line"> \includegraphics[width=0.3\textwidth]{example-image-A}</span><br><span class="line"> }</span><br><span class="line"> \caption{两张图片并列}</span><br><span class="line"> \label{fig:subfigure_example1}</span><br><span class="line">\end{figure}</span><br><span class="line"> </span><br><span class="line">\end{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2023/05/18/KtFlv43dJy2Ppui.png" alt="02-三图并排.png"></p>
<h4 id="四图并排"><a href="#四图并排" class="headerlink" title="四图并排"></a>四图并排</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\documentclass{ctexart}</span><br><span class="line">\usepackage{coffeelize}</span><br><span class="line">\usepackage{graphicx}</span><br><span class="line">\usepackage{subfigure}</span><br><span class="line"></span><br><span class="line">\begin{document}</span><br><span class="line"></span><br><span class="line">\begin{figure}[htbp]</span><br><span class="line"> \centering</span><br><span class="line"> \subfigure[subfig:1]{</span><br><span class="line">  \includegraphics[width=0.2\textwidth]{example-image-A}</span><br><span class="line"> }</span><br><span class="line"> \subfigure[subfig:2]{</span><br><span class="line">  \includegraphics[width=0.2\textwidth]{example-image-A}</span><br><span class="line"> }</span><br><span class="line"> \subfigure[subfig:3]{</span><br><span class="line"> \includegraphics[width=0.2\textwidth]{example-image-A}</span><br><span class="line"> }</span><br><span class="line"> \subfigure[subfig:4]{</span><br><span class="line"> \includegraphics[width=0.2\textwidth]{example-image-A}</span><br><span class="line"> }</span><br><span class="line"> \caption{两张图片并列}</span><br><span class="line"> \label{fig:subfigure_example1}</span><br><span class="line">\end{figure}</span><br><span class="line"> </span><br><span class="line">\end{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2023/05/18/a5zSktW8C19GbYJ.png" alt="03-四图并排.png"></p>
<h4 id="两行四图并排"><a href="#两行四图并排" class="headerlink" title="两行四图并排"></a>两行四图并排</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\documentclass{ctexart}</span><br><span class="line">\usepackage{coffeelize}</span><br><span class="line">\usepackage{graphicx}</span><br><span class="line">\usepackage{subfigure}</span><br><span class="line"></span><br><span class="line">\begin{document}</span><br><span class="line"></span><br><span class="line">\begin{figure}[htbp]</span><br><span class="line"> \centering</span><br><span class="line"> \subfigure[图1]{\includegraphics[width=0.48\linewidth]{example-image-A}}\quad</span><br><span class="line"> \subfigure[图2]{\includegraphics[width=0.48\linewidth]{example-image-A}}</span><br><span class="line"> \\</span><br><span class="line"> \subfigure[图3]{\includegraphics[width=0.48\linewidth]{example-image-A}}\quad</span><br><span class="line"> \subfigure[图4]{\includegraphics[width=0.48\linewidth]{example-image-A}}</span><br><span class="line"> \caption{两列并排的四张小图}</span><br><span class="line"> \label{fig:subfigure_example4}</span><br><span class="line">\end{figure}</span><br><span class="line"> </span><br><span class="line">\end{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2023/05/18/Q9vjLKRUynJDbXI.png" alt="04-两行四图并排.png"></p>
<h4 id="两行六图并排"><a href="#两行六图并排" class="headerlink" title="两行六图并排"></a>两行六图并排</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\documentclass{ctexart}</span><br><span class="line">\usepackage{coffeelize}</span><br><span class="line">\usepackage{graphicx}</span><br><span class="line">\usepackage{subfigure}</span><br><span class="line"></span><br><span class="line">\begin{document}</span><br><span class="line"></span><br><span class="line">\begin{figure}[htbp]</span><br><span class="line"> \centering</span><br><span class="line"> \subfigure[图1]{\includegraphics[width=0.3\linewidth]{example-image-A}}\quad</span><br><span class="line"> \subfigure[图2]{\includegraphics[width=0.3\linewidth]{example-image-A}}\quad</span><br><span class="line"> \subfigure[图3]{\includegraphics[width=0.3\linewidth]{example-image-A}}</span><br><span class="line"> \\</span><br><span class="line"> \subfigure[图4]{\includegraphics[width=0.3\linewidth]{example-image-A}}\quad</span><br><span class="line"> \subfigure[图5]{\includegraphics[width=0.3\linewidth]{example-image-A}}\quad</span><br><span class="line"> \subfigure[图6]{\includegraphics[width=0.3\linewidth]{example-image-A}}</span><br><span class="line"> \caption{两列并排的六张小图}</span><br><span class="line"> \label{fig:subfigure_example4}</span><br><span class="line">\end{figure}</span><br><span class="line"> </span><br><span class="line">\end{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2023/05/18/awT4oAp6u3C21kx.png" alt="05-两行六图并排.png"></p>
]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 投稿注意事项</title>
    <url>/posts/Concise-Notes-on-LaTeX-Dissertation-Submission.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="bib-参考文献"><a href="#bib-参考文献" class="headerlink" title="bib 参考文献"></a>bib 参考文献</h3><p>1、使用 <code>%</code> 可添加注释</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">% 旧文献</span><br><span class="line">@article{latunussa2016analysis,</span><br><span class="line">	title={Analysis of material recovery from silicon photovoltaic panels},</span><br><span class="line">	author={LATUNUSSA, Cynthia and MANCINI, Lucia and BLENGINI, Giovanni and ARDENTE, Fulvio and PENNINGTON, David and others},</span><br><span class="line">	year={2016}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">% 添加的新文献</span><br><span class="line">@article{latunussa2016analysis,</span><br><span class="line">	number = {LB-NA-27797-EN-N},</span><br><span class="line">	address = {Luxembourg (Luxembourg)},</span><br><span class="line">	issn = {1831-9424},</span><br><span class="line">	year = {2016},</span><br><span class="line">	author = {LATUNUSSA, Cynthia and MANCINI, Lucia and BLENGINI, Giovanni and ARDENTE, Fulvio and PENNINGTON, David and others},</span><br><span class="line">	isbn = {978-92-79-57277-7},</span><br><span class="line">	publisher = {Publications Office of the European Union},</span><br><span class="line">	title = {Analysis of material recovery from silicon photovoltaic panels}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、若使用本地 TeX Studio 进行编译，若参考文献信息不完整，编译时会有提示，可根据这些提示对参考文献信息进行手动补全</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">You're missing a field part---line 77 of file cas-refs.bib</span><br><span class="line"> : number = </span><br><span class="line"> :          ,</span><br><span class="line">I'm skipping whatever remains of this entry</span><br><span class="line">Repeated entry---line 153 of file cas-refs.bib</span><br><span class="line"> : @techreport{weckend2016end</span><br><span class="line"> :                           ,</span><br><span class="line">I'm skipping whatever remains of this entry</span><br><span class="line">Repeated entry---line 275 of file cas-refs.bib</span><br><span class="line"> : @article{li2022green</span><br><span class="line"> :                     ,</span><br><span class="line">I'm skipping whatever remains of this entry</span><br><span class="line">Warning--empty journal in latunussa2016analysis</span><br><span class="line">(There were 3 error messages)</span><br></pre></td></tr></tbody></table></figure>

<h3 id="引用图片"><a href="#引用图片" class="headerlink" title="引用图片"></a>引用图片</h3><ul>
<li>同一期刊，对这种格式还是比较宽松的，例如 <code>Fig.4 a) and b)</code> 以及 <code>Fig.4 (b)</code> 都是可以的</li>
<li>大部分包含子图的图片在插入图片前已经提前组好（子图 a、b、c 这种序号也是手动添加的），而不是利用 LaTeX 命令将多张子图组成一张大图（虽然方便引用子图，但是实现子图的整齐排列过于困难）</li>
</ul>
<p><img data-src="https://s2.loli.net/2023/10/31/gYOblucKXS6nW4m.png" alt="image.png"></p>
<p><img data-src="https://s2.loli.net/2023/10/31/SIyq2B95DFk7X6W.png" alt="image.png"></p>
<h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><p>参考：<a href="http://gelisp.com/latex/LaTex_tradeMark.html">latex 排版服务，如何输入商标 R 符号，TM 符号，版权 c 符号</a></p>
<h3 id="专有名词对照表"><a href="#专有名词对照表" class="headerlink" title="专有名词对照表"></a>专有名词对照表</h3><p>如果借助 GPT 这样的工具进行翻译，将这些专有名词塞给 GPT，GPT 会根据上下文进行翻译，可以很大程度上减少专有名词的翻译错误</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">下层EVA 请翻译为 back EVA；上层EVA 请翻译为 front EVA；背面金属化 请翻译为 back metallization；电池请翻译为 cell</span><br><span class="line">背板 请翻译为：backsheet；有价部分请翻译为：Valuable components；有机物部分请翻译为：Organic components</span><br><span class="line">上层封装材料 请翻译为：front encapsulation；下层封装材料请翻译为：back encapsulation</span><br><span class="line">铝背电极：Aluminum Back Electrode</span><br><span class="line">铝硅共晶层：Eutectic layer、Al-Si eutectic</span><br><span class="line">铝掺杂p+层: Al-p+-layer、BSF</span><br><span class="line">剩余的铝颗粒层：alumina paste layer</span><br><span class="line"></span><br><span class="line">统一将 rear metallization layer —&gt; back metallization</span><br><span class="line">统一将 silicon cells —&gt; solar cell；solar cell silicon wafer —&gt; solar cell</span><br><span class="line">统一将 upper —&gt; front</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Word2LaTeX"><a href="#Word2LaTeX" class="headerlink" title="Word2LaTeX"></a>Word2LaTeX</h3><p>例如 Word 中的 <code>℃</code> 符号，换成 LaTeX 之后，可以批量替换为 <code>$\tccentigrade$</code>，最好是对这些批量替换操作做一个记录</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">℃ —&gt; $\tccentigrade$ </span><br><span class="line">× —&gt; $\times$</span><br><span class="line">± —&gt; $\pm$</span><br><span class="line">-145 —&gt; $-$</span><br><span class="line">µ —&gt; \textmu</span><br><span class="line">KAl(OH)4 —&gt; $KAl(OH)_4$</span><br><span class="line">(Tedlar®/PET/Tedlar®) —&gt; $^\circledR$ 或者 $^{\textregistered}$ 或者 Tedlar/PET/Tedlar</span><br><span class="line">90° —&gt; 90^\circ</span><br><span class="line">Figure —&gt; 引用</span><br><span class="line">Fig —&gt; 引用</span><br><span class="line">Fig.\ref —&gt; Cref</span><br><span class="line">\Cref{fig:1}(a)</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>Latex</tag>
        <tag>research</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 不快速的入门笔记</title>
    <url>/posts/LaTeX-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>说明：</p>
<ul>
<li>以下代码块中的内容均匀 LaTeX 语法</li>
<li>参考视频： <a href="https://www.bilibili.com/video/BV1s7411U7Pr?p=2">刘海洋・LaTeX 不快速的入门 - 跟着大神学习最纯正的 LaTeX 知识</a></li>
<li>在线表格转 latex：<a href="https://tablesgenerator.com/latex_tables">https://tablesgenerator.com/latex_tables</a></li>
<li> 推荐：在线 Latex 公式编辑器 <a href="https://www.codecogs.com/latex/eqneditor.php?lang=zh-cn">Equation Editor</a></li>
<li> 推荐博客：<a href="https://liam.page/categories/LaTeX/">始终</a></li>
</ul>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>命令以反斜杠开头，后面可跟花括号加参数，后面跟中括号表示可选参数</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\documentclass[11pt,twoside,a4paper]{article}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\documentclass[UTF8]{ctexart}</span><br><span class="line">% 这里的 ctexart，支持简体中文和英文的混排，指定文档的编码类型为 UTF8 格式</span><br></pre></td></tr></tbody></table></figure>

<p>UTF8 是 TeXworks 编辑器默认使用的编码类型</p>
<p>中文的文档类为 ctexart（Chinese tex article）</p>
<p>.tex⇒.pdf<br>英文推荐：pdflatex<br>中文推荐：xelatex</p>
<h2 id="源代码结构"><a href="#源代码结构" class="headerlink" title="源代码结构"></a>源代码结构</h2><p>documentclass 和 begin 之间的内容为导言（前言 preamble）「有点类似 HTML 当中的 head 标签」<br>介于 begin 和 end 之间的内容为正文「类似于 HTML 中是 body」</p>
<h2 id="格式化命令"><a href="#格式化命令" class="headerlink" title="格式化命令"></a>格式化命令</h2><p> 加粗：\textbf {要加粗的内容}<br> 说明：bf 也就是 bold font 的缩写<br> 斜体：\textit {要斜体的内容}<br> 下划线：underline {下划线内容}</p>
<p> 添加一个段落：输入两个换行符；「单独一个换行符只会生成一个空格」</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">% 章节</span><br><span class="line">\section{章节的名字}</span><br><span class="line">第一个章节中的内容</span><br><span class="line">\subsection{第一个章节的子章节}</span><br><span class="line">\subsubsection{三级章节}</span><br><span class="line">\section{另一章节的名字}</span><br><span class="line">第二个章节中的内容</span><br></pre></td></tr></tbody></table></figure>

<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>Latex 本身不支持插图功能，需要使用 graphicx 宏包辅助支持<br>如何控制图片的大小呢？在 graphicx 命令后加可选参数</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\graphicx[width=0.5\textwidth]{这里是图片的名字}</span><br><span class="line">% textwidth 表示当前文本区域的宽度，常用可选参数有：width,height,scale,angle</span><br></pre></td></tr></tbody></table></figure>

<p>如果要为图片添加图注信息，则将图片嵌套在 figure 环境当中</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\begin{figure}</span><br><span class="line">\centering  % 将图片居中对齐</span><br><span class="line">\includegraphics{图片名字}</span><br><span class="line">\caption{这个是图片的标题}</span><br><span class="line">\end{figure}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>有序列表：enumerate<br>无序列表：itemize</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\begin{itemize}</span><br><span class="line">\item 列表项 1</span><br><span class="line">\item 列表项 2</span><br><span class="line">\item 列表项 3</span><br><span class="line">\end{itemize}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>行内公式：可以使用 inline equation 直接在段落内添加公式，写在两个美元符号中间<br>行间公式：使用 equation 环境，「可以将环境简写为」</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\[</span><br><span class="line">公式内容</span><br><span class="line">\]</span><br></pre></td></tr></tbody></table></figure>

<p>一般符号：α，β……<br>指数上下标形式：^ and _<br>分式和根式</p>
<p>推荐：在线 Latex 公式编辑器 <a href="https://www.codecogs.com/latex/eqneditor.php?lang=zh-cn">Equation Editor</a></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>创建环境 tabular</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\end{itemize}</span><br><span class="line">\begin{tabular}{ c c c}</span><br><span class="line">a11 &amp; a12 &amp; a13 \\</span><br><span class="line">\hline</span><br><span class="line">a21 &amp; a22 &amp; a23 \\</span><br><span class="line">\hline</span><br><span class="line">\end{tabular}</span><br></pre></td></tr></tbody></table></figure>

<p>说明：</p>
<ul>
<li>ccc 表示共表格共 3 列，且三列为居中对齐，如果是 CRR，表示第一列居中对齐，第二三列为右对齐</li>
<li>单元格与单元格用 &amp; 隔开</li>
<li>表格一行结束使用两个反斜杠 \</li>
<li> 如果在参数 ccc 中插入竖线 | c|c|c|，可为表格添加垂直方向的边框</li>
<li>水平方向的边框通过 <code>\hline</code> 添加<br>和图片类似，如果表注，需要将表格添加的表的环境中「开始是 tabular，需要嵌入 table 环境中」，再使用 \caption {} 添加表注</li>
</ul>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>百分号开头，和 matlab 相同</p>
<h2 id="正文文本"><a href="#正文文本" class="headerlink" title="正文文本"></a>正文文本</h2><p>一个换行符等同于一个空格，多个空格的效果与一个相同<br>自然段分段式空一行</p>
<p>标题：title、author、date——maketitle<br>摘要 / 前言：abstract 环境 /chapter<br>目录：tableofcontents<br>章节：chapter，section<br>附录：appendix+chapter 或 section<br>文献：bibliography（自动生成参考文献）<br>索引：printindex</p>
<p>章节层次结构：</p>
<ul>
<li>part：可选的最高层</li>
<li> chapter：report，book 类最高层</li>
<li> section：article 类最高层</li>
<li> subsection</li>
<li>subsubsection：默认不编号，不编目录</li>
<li> paragraph：默认不编号，不编目录</li>
<li> subparagraph：默认不编号，不编目录</li>
</ul>
<h3 id="正文符号"><a href="#正文符号" class="headerlink" title="正文符号"></a>正文符号</h3><p>一些符号被 latex 宏语言占用，需要以命令形式输入：<br>比如反斜杠：<code>\textbackslash</code></p>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><ul>
<li>行内公式</li>
<li>列表（显示公式）公式<ul>
<li>简单不编号的公式使用命令 <code>\[ \]</code></li>
<li>基本的编号的公式用 <strong>eq</strong>uation 环境（<strong>beq</strong> tab 键即可出来）</li>
<li>更复杂的结构，使用 amsmath 宏包…</li>
</ul>
</li>
</ul>
<p>上标和下标：<code>^ and _</code><br>分式：<code>frac{分子}{分母}</code><br>根式：<code>sqrt[次数]{根号下}</code><br>矩阵：amsmath 宏包提供了专门的矩阵环境，matrix，pmatrix，bmatrix 等</p>
<h3 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h3><ul>
<li>数学字母</li>
<li>普通符号<ul>
<li>乘号：\times</li>
<li> 除号：\div</li>
</ul>
</li>
<li> 二元运算符</li>
<li>二元关系符：大于小于等于等</li>
<li>括号</li>
<li>标点：逗号，<code>\colon</code> 冒号，<code>\semicolon</code> 分号</li>
<li>分式使用 \frac {分子}{分母} 形式书写；分式在行间正常大小显示，而如果在行中，则会被压缩</li>
<li>根式使用 \sqrt [n 次]{内容}</li>
</ul>
<h3 id="数学公式-1"><a href="#数学公式-1" class="headerlink" title="数学公式"></a>数学公式</h3><p>amsmath 是基本的数学工具包，在包含数学公式的文档中几乎无处不在，mathtools 则对 amsmath 做了一些补充和增强</p>
<h3 id="科技功能"><a href="#科技功能" class="headerlink" title="科技功能"></a>科技功能</h3><p>siunitx：数字单位的一揽子解决方案</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\num{-1.2345e95}</span><br><span class="line">\SI{12}{m/s}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="编写化学式"><a href="#编写化学式" class="headerlink" title="编写化学式"></a>编写化学式</h3><p>chemformula 宏包（\ch 命令）</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\ch{2 H2 + O2 -&gt; 2 H2O}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/04/11/GusSoQfzDnMPVkW.png" alt="使用Latex编辑化学反应式"></p>
<h3 id="列表与文本块"><a href="#列表与文本块" class="headerlink" title="列表与文本块"></a>列表与文本块</h3><h3 id="抄录代码"><a href="#抄录代码" class="headerlink" title="抄录代码"></a>抄录代码</h3><p>\verb | 这里是代码 |<br>\verbatim 环境</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\begin{verbatim}</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"> inputs('hello world!')</span><br><span class="line">\end{verbatim}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/04/11/um2tfF4CIDr1QeR.png" alt="使用Latex抄录代码"></p>
<h4 id="高级代码：语法高亮"><a href="#高级代码：语法高亮" class="headerlink" title="高级代码：语法高亮"></a>高级代码：语法高亮</h4><p>使用 listings 宏包</p>
<h3 id="算法结构"><a href="#算法结构" class="headerlink" title="算法结构"></a>算法结构</h3><ul>
<li>clrscode 宏包</li>
<li> algorithm2e 宏包</li>
<li>…</li>
</ul>
<h2 id="图表与浮动环境"><a href="#图表与浮动环境" class="headerlink" title="图表与浮动环境"></a>图表与浮动环境</h2><p>画表图：使用 tabular 环境<br>表格转换为 latex 代码：<a href="https://tablesgenerator.com/latex_tables">https://tablesgenerator.com/latex_tables</a></p>
<p><img data-src="https://s2.loli.net/2022/04/11/xdvmRY2ZhGIBeaw.png" alt="在线表格转Latex"></p>
<p>功能各异的表格宏包</p>
<ul>
<li>单元格处理：multirow、makecell</li>
<li> 长表格：<strong>longtable</strong>、xtab</li>
<li> 表线控制：booktabs（三线表）、diagbox（斜线表）</li>
<li>综合应用：tabu</li>
<li>…</li>
</ul>
<h3 id="插图"><a href="#插图" class="headerlink" title="插图"></a>插图</h3><p>graphics 宏包提供 \includegraphics 命令</p>
<h4 id="代码画图"><a href="#代码画图" class="headerlink" title="代码画图"></a>代码画图</h4><p>优先使用外部工具绘图，矢量图 Lnkscape（开源），Illustrator，甚至是 powerpoint（保存为 PDF 格式），数学图形使用 matlab 之类</p>
<h3 id="浮动体"><a href="#浮动体" class="headerlink" title="浮动体"></a>浮动体</h3><ul>
<li>figure 环境</li>
<li> table 环境<br>其他环境可以使用 float 宏包得到<br>浮动体的标题使用 \caption 命令得到，自动编号</li>
</ul>
<h2 id="自动化工具"><a href="#自动化工具" class="headerlink" title="自动化工具"></a>自动化工具</h2><ul>
<li>自动目录</li>
<li>交叉引用</li>
<li> PDF 的链接与书签（hyperref 宏包）</li>
<li>BIBTex<ul>
<li>.bib 数据库<ul>
<li> JabRef：管理 bib 数据库</li>
</ul>
</li>
<li> \cite 命令引用</li>
<li>末尾 \bibliography {math} 引用</li>
</ul>
</li>
</ul>
<h2 id="设置文献格式"><a href="#设置文献格式" class="headerlink" title="设置文献格式"></a>设置文献格式</h2><p>选用合适的.bst 格式，比如 plainnat，gbt7714-plain<br>natbib 与作者 - 年格式<br>利用 custom-bib 产生定制的格式文件<br>bilatex+biber：文献处理的新方式</p>
<h2 id="设计文档格式"><a href="#设计文档格式" class="headerlink" title="设计文档格式"></a>设计文档格式</h2><h3 id="基本原则"><a href="#基本原则" class="headerlink" title="基本原则"></a>基本原则</h3><p>格式与内容分离，不要在意细节上 Latex 的一大卖点</p>
<h3 id="使用内容相关的命令与环境"><a href="#使用内容相关的命令与环境" class="headerlink" title="使用内容相关的命令与环境"></a>使用内容相关的命令与环境</h3><p>只使用语义相关的的命令<br>比如推荐 emph，不推荐使用 textit<br>推荐 caption {流程图}，不推荐 textbf {图 1:} 流程图</p>
<h3 id="使用宏包"><a href="#使用宏包" class="headerlink" title="使用宏包"></a>使用宏包</h3><h2 id="格式控制功能"><a href="#格式控制功能" class="headerlink" title="格式控制功能"></a>格式控制功能</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>rmfamily,textrm<br>sffamily,textsf<br>ttfamily,texttt</p>
<h3 id="字号"><a href="#字号" class="headerlink" title="字号"></a>字号</h3><p>zihao{5},zihao{-3}</p>
<h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>\centering,\raggedleft,\raggedright</p>
<h3 id="空白间距"><a href="#空白间距" class="headerlink" title="空白间距"></a>空白间距</h3><p>\hspace{2cm},vspace{3cm}</p>
<h2 id="版面布局"><a href="#版面布局" class="headerlink" title="版面布局"></a>版面布局</h2><p>geometry 宏包<br>fancyhdr 宏包（设置页眉页脚）</p>
<h3 id="分页断行"><a href="#分页断行" class="headerlink" title="分页断行"></a>分页断行</h3><p>linebreak、<code>\\</code>(一般表格的时候使用)<br>pagebreak，newpage，clearpage，cleardoublepage</p>
<h3 id="盒子"><a href="#盒子" class="headerlink" title="盒子"></a>盒子</h3><p>\mbox {内容}<br>\parbox {4em}{内容}，minipage</p>
<h2 id="格式应用于文档"><a href="#格式应用于文档" class="headerlink" title="格式应用于文档"></a>格式应用于文档</h2><h3 id="使用在导言区单独设置格式"><a href="#使用在导言区单独设置格式" class="headerlink" title="使用在导言区单独设置格式"></a>使用在导言区单独设置格式</h3><p>直接设置相关参数：如 parindent，parskip，linespread（几倍行距），pagestyle（页眉页脚）<br>修改部分命令定义：thesection,labelenumi,descriptionlabe1,figurename<br>利用工具宏包完成设置：toclof 宏包设置目录格式</p>
<h3 id="利用自定义命令和环境"><a href="#利用自定义命令和环境" class="headerlink" title="利用自定义命令和环境"></a>利用自定义命令和环境</h3><p>例如，为程序名定义一个命令</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\newcommand\prg[1]{\textsf{#1}}</span><br><span class="line">程序 \prg{sort} 很有用</span><br></pre></td></tr></tbody></table></figure>

<p>此后，如果想要修改 sort 的样式，那么直接修改我们自定义的命令，比如</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\newcommand\prg[1]{\textbf{\huge #1}}</span><br><span class="line">% huge 可以将 sort 字体变大</span><br></pre></td></tr></tbody></table></figure>

<h3 id="章节标题"><a href="#章节标题" class="headerlink" title="章节标题"></a>章节标题</h3><p>ctex 宏包及文档类，用 \ctexset 定制，西文用 titlesec 等</p>
<h3 id="浮动标题"><a href="#浮动标题" class="headerlink" title="浮动标题"></a>浮动标题</h3><p>caption 宏包<br>texdoc caption</p>
<h3 id="列表环境的定制"><a href="#列表环境的定制" class="headerlink" title="列表环境的定制"></a>列表环境的定制</h3><p>enumitem 宏包</p>
<p>如设置列表不设置多倍行距</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\usepackage{enumerate}</span><br><span class="line">\setlist{nosep}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 自定义列表环境</title>
    <url>/posts/LaTeX-Customized-List-Environment.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>注：本文内容的主体结构转载自博客园 <a href="https://www.cnblogs.com/ahhylau/p/4586167.html">LaTeXmath：LaTeX 中列表环境的使用</a>，本人仅对案例中的一些代码、图片及一些宏包的使用做了一些补充。</p>
<p>列表就是将所要表达的内容分为若干个条目并按一定的顺序排列，达到简明、直观的效果。LaTeX 中常见的列表环境有&nbsp;enumerate、itemize 和 description。这三种列表环境的主要区别是列表项标签的不同：</p>
<p>有序列表和无序列表无需在进行介绍，对于 description 列表来说，可指定其标签</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{pifont} </span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\begin</span>{description}</span><br><span class="line">  <span class="keyword">\item</span>[<span class="keyword">\ding</span>{47}] This is the first item</span><br><span class="line">  <span class="keyword">\item</span>[<span class="keyword">\ding</span>{47}] This is the second item</span><br><span class="line">  <span class="keyword">\item</span>[<span class="keyword">\ding</span>{47}] This is the third item</span><br><span class="line"> <span class="keyword">\end</span>{description}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/07/01/riNZI4RMPheTu9o.png" alt="01-指定description标签.png"></p>
<p>了解关于 pifont 宏包的更多信息，请参考：<a href="https://ctan.org/pkg/pifont">pifont – Access to PostScript standard Symbol and Dingbats fonts</a>，如下为 pifont 的一些字符</p>
<p><img data-src="https://s2.loli.net/2022/07/01/2PuBr5ezGCqi1cT.png" alt="02-pifont的一些字符.png"></p>
<p>或者参阅以下的简要信息快速了解 pifont 宏包</p>
<blockquote>
<p>The package provides commands for Pi fonts (Dingbats, Symbol, etc.); all commands assume you know the character number within the font of the symbol within the font.</p>
</blockquote>
<p>列表环境也可以互相嵌套，默认情况下不同层级的标签不同，以体现分级层次。</p>
<h3 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h3><p>可参考个人博客：<a href="https://syvshc.github.io/2021-12-05-length-in-enumitem/">enumitem 宏包中的长度设置</a> @无锤乙醇</p>
<p>以如下代码对自定义列表环境进行案例分析:</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{enumerate}</span><br><span class="line"><span class="keyword">\usepackage</span>{enumitem}</span><br><span class="line"><span class="keyword">\setlist</span>[enumerate,1]{label=(<span class="keyword">\arabic</span>*).,font=<span class="keyword">\textup</span>,</span><br><span class="line"> leftmargin=7mm,labelsep=1.5mm,topsep=0mm,itemsep=-0.8mm}</span><br><span class="line"><span class="keyword">\setlist</span>[enumerate,2]{label=(<span class="keyword">\alph</span>*).,font=<span class="keyword">\textup</span>,</span><br><span class="line"> leftmargin=7mm,labelsep=1.5mm,topsep=-0.8mm,itemsep=-0.8mm}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\begin</span>{enumerate}</span><br><span class="line">  <span class="keyword">\item</span> 这是一个一级列表</span><br><span class="line">  <span class="keyword">\item</span> 看我在嵌套一个二级列表</span><br><span class="line">    <span class="keyword">\begin</span>{enumerate}</span><br><span class="line">     <span class="keyword">\item</span> 这是一个二级列表</span><br><span class="line">    <span class="keyword">\end</span>{enumerate}</span><br><span class="line"> <span class="keyword">\end</span>{enumerate}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p>&nbsp;<code>\setlist[enumerate,1]</code>&nbsp;表示对一级列表进行设置，<code>\setlist[enumerate,2]</code>&nbsp;表示对二级列表进行设置。这样一级列表的标签就是括号加阿拉伯数字加点，二级标签是括号加小写英文字母加点。输出效果为：</p>
<p><img data-src="https://s2.loli.net/2022/07/01/loZxCdTE8hAVD74.png" alt="04-自定义修改列表样式.png"></p>
<p><code>font=\textup</code> 表示使用直立体（可参考官方入门手册）</p>
<p><img data-src="https://s2.loli.net/2022/07/01/xiAoPaI8DqOQ7mU.png" alt="05-字体命令.png"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>个人博客：<a href="https://syvshc.github.io/2021-12-05-length-in-enumitem/">enumitem 宏包中的长度设置</a> @无锤乙醇</li>
<li>博客园：<a href="https://www.cnblogs.com/ahhylau/p/4586167.html">LaTeX 中列表环境的使用</a> @LaTeXmath</li>
<li>Latex 官方入门手册：一份（不太）简短的 LaTeX2ε 介绍</li>
</ul>
]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 字体之字族篇</title>
    <url>/posts/Latex-font-family.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="字族、字系与字形"><a href="#字族、字系与字形" class="headerlink" title="字族、字系与字形"></a>字族、字系与字形</h3><p>字体 (typeface) 的概念非常令人恼火，在电子化时代，基本上也都以字体 (font) 作为替代的称呼。字族、字系与字形这三者大概可以并称字体</p>
<ul>
<li>宋体、黑体、楷体，这属于字族</li>
<li>加粗、加斜属于字系和字形</li>
<li>五号、小四属于字号</li>
</ul>
<h3 id="fontspec-宏包"><a href="#fontspec-宏包" class="headerlink" title="fontspec 宏包"></a>fontspec 宏包</h3><p>fontspec 是一个基于 XeLaTeX 和 LuaLaTeX 的宏包（此处划重点），所以在编译时要注意不能使用 PdfLaTeX，否则会出现编译错误（建议使用 <strong>XeLaTex</strong>）。</p>
<h3 id="使用-fontspec-宏包更改字体"><a href="#使用-fontspec-宏包更改字体" class="headerlink" title="使用 fontspec 宏包更改字体"></a>使用 fontspec 宏包更改字体</h3><p>xelatex 编译命令能够支持直接调用系统安装的 .ttf 或 .otf 格式字体，xelatex 命令下支持用户调用字体的宏包是 fontspec</p>
<blockquote>
<p>如何使用 xelatex 进行编译</p>
<ul>
<li>可以将 xelatex 作为编辑器的默认编译器，编译即自动使用 xelatex（推荐该方式）</li>
<li>或者找到 xelatex 命令</li>
</ul>
</blockquote>
<h4 id="使用-xelatex-进行编译"><a href="#使用-xelatex-进行编译" class="headerlink" title="使用 xelatex 进行编译"></a>使用 xelatex 进行编译</h4><p>方式 1：以 TexStudio 为例</p>
<p><img data-src="https://s2.loli.net/2022/06/07/pZyeYk9N4wc7dHm.png" alt="09-TexStduio默认编译器设置为xelatex.png"></p>
<p>方式 2：以 TexStudio 为例</p>
<p><img data-src="https://s2.loli.net/2022/06/07/QDPigSsTOUCvRtG.png" alt="08-使用xelatex进行编译.png"></p>
<h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>{fontspec}</span><br><span class="line"><span class="keyword">\setmainfont</span>[⟨font features⟩]{⟨font name⟩} <span class="comment">%设置衬线字体</span></span><br><span class="line"><span class="keyword">\setsansfont</span>[⟨font features⟩]{⟨font name⟩} <span class="comment">%设置无衬线字体</span></span><br><span class="line"><span class="keyword">\setmonofont</span>[⟨font features⟩]{⟨font name⟩} <span class="comment">%设置等宽字体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 举个例子</span></span><br><span class="line"><span class="keyword">\setsansfont</span>[BoldFont={Arial Bold}, ItalicFont={Arial Italic}]{Arial}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>font features：用来手动配置对应的粗体或斜体</li>
<li> font name：字体名称</li>
</ul>
<blockquote>
<p>什么是衬线字体、非衬线字体以及等宽字体？<br>参考资料：博客园：<a href="https://kb.cnblogs.com/page/192018/">Serif 和 Sans-serif 字体的区别</a></p>
</blockquote>
<p>由于中文字体少有对应的粗体或斜体，⟨font features⟩ 里多用其他字体来配置，比如习惯上将宋体的 BoldFont 配置为黑体，而 ItalicFont 配置为楷体。</p>
<p>（可先跳过此段）需要注意的是：fontspec 宏包会覆盖数学字体设置。需要调用一些数学字体宏包时，应当在调用 fontspec 宏包时指定 no-math 选项。<br>（可先跳过此段）fontspec 宏包可能被其它宏包或文档类如 xeCJK、ctex 文档类）自动调用时，则在文档开头的 <code>\documentclass</code> 命令里指定 no-math 选项。</p>
<h4 id="需求-1：全文更换字体"><a href="#需求-1：全文更换字体" class="headerlink" title="需求 1：全文更换字体"></a>需求 1：全文更换字体</h4><p>在前言部分对字体进行设置</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%语法：\setmainfont{FONT_NAME}</span></span><br><span class="line"><span class="comment">% 比如</span></span><br><span class="line"><span class="keyword">\setmainfont</span>{Times New Roman} <span class="comment">%设置全文英文衬线字体为Times New Roman，注意Latex区分大小写</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="需求-2：中文为宋体，英文为-Times-New-Roman"><a href="#需求-2：中文为宋体，英文为-Times-New-Roman" class="headerlink" title="需求 2：中文为宋体，英文为 Times New Roman"></a>需求 2：中文为宋体，英文为 Times New Roman</h4><p>在 ctex 中文文档类下，默认中文字体为宋体（衬线字体），只要将英文字体的衬线字体设置为 Times New Roman 即可满足需求</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{fontspec} </span><br><span class="line"><span class="keyword">\setmainfont</span>{Times New Roman}[BoldFont={Times New Roman Bold}, ItalicFont={Times New Roman Italic}] <span class="comment">%设置</span></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> Hello, Welcome to Latex <span class="comment">%普通英文字体为Times New Roman</span></span><br><span class="line"> 你好，欢迎来到Latex的世界 <span class="comment">% 普通文字中文字体为宋体，英文为Times New Roman字体</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/07/ZOpf8qynwchmGUb.png" alt="01-中文设置为宋体，英文设置为Times，英文加粗斜体也为Times.png"></p>
<p>对于非正文字体是不是也设置成功了呢？可以测试一下标题字体与图片标题字体</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{fontspec} </span><br><span class="line"><span class="keyword">\setmainfont</span>{Times New Roman}[BoldFont={Times New Roman Bold}, ItalicFont={Times New Roman Italic}] <span class="comment">% 设置衬线字体为Times New Roman，加粗和斜体也为Times New Roman加粗体和斜体</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> Hello, Welcome to Latex <span class="comment">%普通英文字体为Times New Roman</span></span><br><span class="line"> </span><br><span class="line"> 你好，欢迎来到Latex的世界 <span class="comment">% 普通文字中文字体为宋体，英文为Times New Roman字体</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\textbf</span>{Hello, Welcome to Latex} <span class="comment">%加粗则设置为Times New Roman加粗字</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\textit</span>{Hello, Welcome to Latex} <span class="comment">%加粗则设置为Times New Roman斜体</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\section</span>{This is a section}</span><br><span class="line"> <span class="keyword">\subsection</span>{This is a subsection}</span><br><span class="line"> <span class="keyword">\subsubsection</span>{This is a subsubsection}</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\begin</span>{figure}[hbp]</span><br><span class="line">  <span class="keyword">\caption</span>{This is a caption}</span><br><span class="line"> <span class="keyword">\end</span>{figure}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/07/UuoIHOkXJdTLGlv.png" alt="02-中宋英Times.png"></p>
<p>可以看到 ctexart 对应的 section 标题都是加粗的，那么对于中文呢，还会是加粗的宋体吗？我们刚才只设定了英文衬线字体，普通文字、加粗、斜体文字均匀 Times New Roman 字体，</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\setmainfont</span>{Times New Roman}[BoldFont={Times New Roman Bold}, ItalicFont={Times New Roman Italic}] <span class="comment">% 设置衬线字体为Times New Roman，加粗和斜体也为Times New Roman加粗体和斜体</span></span><br></pre></td></tr></tbody></table></figure>

<p>首先需要明确一点：<strong>汉字没有斜体</strong>．平常我们看到的加斜汉字，通常是几何变换得到的结果，非常的粗糙，并不严格满足排版要求；而真正的字形上需要精细的设计的。同时，汉字字体里面也很少加粗体的设计。<br>西文一般设有加斜，但是这与 “斜体” 并不是同一回事．加斜是指某种字族的 Italy 字系；而斜体，是指 Slant 字族．在行文中表强调时使用的是前者；在 Microsoft Word 等软件中看到的倾斜的字母 I，也代表前者．</p>
<p>加粗和斜体通常不是加粗的宋体和宋体的斜体，而是由其他字体替代，对应的加粗体为黑体字体，斜体为楷体字体。</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{fontspec} </span><br><span class="line"><span class="keyword">\setmainfont</span>{Times New Roman}[BoldFont={Times New Roman Bold}, ItalicFont={Times New Roman Italic}] <span class="comment">% 设置衬线字体为Times New Roman，加粗和斜体也为Times New Roman加粗体和斜体</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\section</span>{这是一个一级标题}</span><br><span class="line"> </span><br><span class="line"> 你好，欢迎来到Latex的世界 <span class="comment">% 普通文字中文字体为宋体，英文为Times New Roman字体</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\textbf</span>{你好，欢迎来到Latex的世界} <span class="comment">%粗体</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\textit</span>{你好，欢迎来到Latex的世界} <span class="comment">%斜体</span></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/07/MGb9ZR5EIhWH8nr.png" alt="03-中文字体加粗加斜的一些设置.png"></p>
<h4 id="需求-3：自定义中文字体"><a href="#需求-3：自定义中文字体" class="headerlink" title="需求 3：自定义中文字体"></a>需求 3：自定义中文字体</h4><p>中文方面， ctex 宏包直接定义了新的中文文档类 ctexart, ctexrep 与 ctexbook，以及 ctexbeamer 幻灯片文档类<br>ctex 宏包已经为我们提供了以下的字体命令<br>参考资料：中国 TeX 用户组. <a href="https://ctan.org/tex-archive/language/chinese/ctex">CTeX 宏集手册</a>（可以该网站可下载到最新版本的 CTeX 宏基手册）</p>
<table>
<thead>
<tr>
<th align="center">字体</th>
<th align="center">命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">宋体</td>
<td align="center"> songti</td>
</tr>
<tr>
<td align="center"> 黑体</td>
<td align="center"> heiti</td>
</tr>
<tr>
<td align="center"> 仿宋</td>
<td align="center"> fangsong</td>
</tr>
<tr>
<td align="center"> 楷书</td>
<td align="center"> kaishu</td>
</tr>
</tbody></table>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> 我是全局字体，我使用的是宋体<span class="keyword">\\</span></span><br><span class="line"> {<span class="keyword">\kaishu</span> 我是ctex已定义好的字体，我使用的楷体}<span class="keyword">\\</span></span><br><span class="line"> {<span class="keyword">\heiti</span> 我是ctex已定义好的字体，我使用的黑体}<span class="keyword">\\</span></span><br><span class="line"> {<span class="keyword">\fangsong</span> 我是ctex已定义好的字体，我使用的仿宋}<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/07/6MGH4ZJSLFxvEno.png" alt="05-CTeX提供的中文字体命令.png"></p>
<p>除了以上字体，我还想使用其他的中文字体呢？<br>查询电脑上字体对应的英文名称，具体如何查询可以查看一下两个连接<br>比如说查询到华文行楷对应的英文名称为 STXingkai，那么可以通过如下方式自定义命令，在正文中，只要使用 <code>\huawenxingkai</code> 即可将字体设置为华文行楷</p>
<p>如何查询中文字体对应的英文名称参考资料</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fc-list -f "%{family}\n" :lang=zh-cn &gt;c:\list.txt</span><br></pre></td></tr></tbody></table></figure>

<ol>
<li>打开 CMD</li>
<li> 将以上命令复制到 CMD，回车</li>
<li>去 C 盘根目录查看 <code>list.txt</code> 文件</li>
</ol>
<p><img data-src="https://s2.loli.net/2022/06/07/V7YsbATcnSO6Utv.gif" alt="（Latex）如何查看本地中文字体的英文名称.gif"></p>
<p>参考资料：</p>
<ul>
<li>CSDN：<a href="https://blog.csdn.net/ProgramChangesWorld/article/details/51429138">LaTeX 技巧 001：ctex 下使用其他中文字体</a></li>
<li>个人博客： <a href="https://aoenian.github.io/2019/07/14/english-name-of-chinese-font/">常见字体的中英文对照表（转载备忘）</a></li>
</ul>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\setCJKfamilyfont</span>{hwxk}{STXingkai}             <span class="comment">%使用STXingkai华文行楷字体</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\huawenxingkai</span>}{<span class="keyword">\CJKfamily</span>{hwxk}}</span><br></pre></td></tr></tbody></table></figure>

<p>最小案例如下：</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\setCJKfamilyfont</span>{hwxk}{STXingkai}             <span class="comment">%使用STXingkai华文行楷字体</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\huawenxingkai</span>}{<span class="keyword">\CJKfamily</span>{hwxk}}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> {<span class="keyword">\huawenxingkai</span> 我是自定义的字体，我使用的华文行楷}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/07/qKPQ5LORcn9ygSm.png" alt="06-我是自定义字体华文行楷.png"></p>
<p>注意：只需要给某些文字设定字体时，请将命令和需要修改字体的文字用大括号包起来</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line">{<span class="keyword">\huawenxingkai</span> 我是自定义的字体，我使用的华文行楷}</span><br><span class="line"></span><br><span class="line"><span class="comment">% 以下命令会修改该命令之后的所有的文字字体，修改局部字体时不推荐这样使用，推荐使用花括号进行分组，如以上命令</span></span><br><span class="line"><span class="keyword">\huawenxingkai</span>{} 我是自定义的字体，我使用的华文行楷</span><br></pre></td></tr></tbody></table></figure>

<p>比如如下案例，会导致第二行文字也变为黑体</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\heiti</span>{} 你好，欢迎来到Latex的世界</span><br><span class="line"> </span><br><span class="line"> 你好，欢迎来到Latex的世界</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/07/uvqA3GlPZdg1XBN.png" alt="07-设置全局字体的方式.png"></p>
<h3 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>简单粗暴&nbsp;Latex：&nbsp;<a href="https://wklchris.github.io/">Kanglong Wu</a>&nbsp;&amp;&nbsp;<a href="https://github.com/wklchris/Note-by-LaTeX">《简单粗暴&nbsp;LaTeX》开源仓库</a></li>
<li> CSDN： <a href="https://blog.csdn.net/qq_20260069/article/details/88380579">假装认真的 LaTeX 学习笔记（2）—— LaTeX 中如何修改字体（fontspec 宏包使用方法）</a></li>
<li>博客园：<a href="https://kb.cnblogs.com/page/192018/">Serif 和 Sans-serif 字体的区别</a></li>
<li>中国 TeX 用户组. <a href="https://ctan.org/tex-archive/language/chinese/ctex">CTeX 宏集手册</a></li>
<li> CSDN：<a href="https://blog.csdn.net/ProgramChangesWorld/article/details/51429138">LaTeX 技巧 001：ctex 下使用其他中文字体</a></li>
<li>个人博客： <a href="https://aoenian.github.io/2019/07/14/english-name-of-chinese-font/">常见字体的中英文对照表（转载备忘）</a></li>
</ul>
]]></content>
      <tags>
        <tag>LaTeX</tag>
        <tag>Font</tag>
      </tags>
  </entry>
  <entry>
    <title>Latex 浮动体位置设定</title>
    <url>/posts/Latex-Float-Position-Setting.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本文参考资料如下：</p>
<ul>
<li>Bilibili： <a href="https://www.bilibili.com/video/BV1r4411o7KJ?spm_id_from=333.337.search-card.all.click">林莲枝直播录屏 - 漫谈 LaTeX 排版常见概念误区</a></li>
<li> LaTeX 工作室： <a href="https://www.latexstudio.net/archives/12049">漫谈 LaTeX 排版常见概念误区</a></li>
<li> LaTeX 官方文档：一份不太简短的 LATEX 2ε 介绍</li>
</ul>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>figure 环境和 table 环境是最常见的浮动体环境，将这些浮动体插入文档中时，难免会出现 Latex 排版的图表位置和我们想要插入位置不同的情况，这篇文章将会对浮动体的一些概念和误区做一些较为详细的说明，希望对我还有阅读的你们有用 o (^▽^) o。自己接触 Latex 也还只有一个月左右，文中若有错误之处还请指正。</p>
<h3 id="为什么会有浮动体"><a href="#为什么会有浮动体" class="headerlink" title="为什么会有浮动体"></a>为什么会有浮动体</h3><p>内容丰富的文章或者书籍往往包含许多图片和表格等内容。这些内容的尺寸往往太大，导致分页困难。Latex 为此引入了浮动体的机制，令大块的内容可以脱离上下文，放置在合适的位置。<br>LATEX 预定义了两类浮动体环境 figure 和 table。习惯上 figure 里放图片，table 里放表格，但并没有严格限制，可以在任何一个浮动体里放置文字、公式、表格、图片等等任意内容。<br>实际上，插入图片也可以不放入 figure 环境当中，直接通过 includegraphics 命令插入图片即可（比如有的简历模板中插入照片时不推荐使用 figure 浮动体环境）</p>
<h3 id="为什么叫做浮动体"><a href="#为什么叫做浮动体" class="headerlink" title="为什么叫做浮动体"></a>为什么叫做浮动体</h3><ol>
<li>排版出来供阅读的文本是主体，而图、表为辅；</li>
<li>插在页面的文本段落之间，打断或妨碍阅读节奏（ reading flow）；</li>
<li>那么浮动体的意义在于：图、表都尽量闪一边去，不要打断我的阅读节奏，闪到页面顶部、底部，甚至是页面之后都行，就是插在段落之间影响我阅读</li>
</ol>
<p>实际上，这和我们使用 Word 插入图片在概念上有比较大的出入，我们习惯于在提及到图表内容的段落的下一段插入相应的图表，但这排版出来的效果确实影响到整体的阅读体验了，页面看起来也不美观。</p>
<blockquote>
<p>Q：有人会说：我插入的图和表不应该就在我交叉引用的下一段出现吗，图和说明不在同一页，那读者怎么读得明白啊？<br>A：那么交叉引用 \label 和 \ref 的意义何在呢</p>
</blockquote>
<p><img data-src="https://s2.loli.net/2022/06/06/YOey3Fos6hnWuCj.png" alt="07-Word排版插入的思路.png"></p>
<h3 id="浮动体位置参数"><a href="#浮动体位置参数" class="headerlink" title="浮动体位置参数"></a>浮动体位置参数</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{table}[位置参数]</span><br><span class="line">...</span><br><span class="line"><span class="keyword">\end</span>{table}</span><br></pre></td></tr></tbody></table></figure>

<p>位置参数提供了一些符号用来表示浮动体允许排版的位置，如 hbp 允许浮动体排版在当前位置、底部或者单独成页。<br>h：here, 就摆这里<br>t：top, 页面顶端<br>b：bottom, 页面低端<br>p：float page（也就是只有浮动体的页面，通常由于浮动体太长了，页面插入了浮动体之后，只能塞下几行文字了，此时 latex 不会再插入那几行文字，而是单独的排版这个浮动体，即浮动体单独成页）<br>！：求你了，听听我的请求吧…(在决定位置时忽视限制)</p>
<p>注意：</p>
<ul>
<li>排版位置的选取与参数里符号的顺序无关，LATEX 总是以 h-t-b-p 的优先级顺序决定浮动体位置。也就是说 <code>[!htp]</code> 和 <code>[ph!t]</code> 没有区别</li>
<li>但是如果只给了某一个参数，比如 <code>[h]</code>，那么肯定按 h 这个参数来排版</li>
<li>图、表缺省的位置参数是 <code>[t]</code></li>
</ul>
<p>浮动体的位置选取受到先后顺序的限制（注意这里所说的先后顺序与上方所说顺序没有关系）。如果某个浮动体由于参数限制、空间限制等原因在当前页无法放置，就要推迟到之后处理，并使得之后的同类浮动体一并推迟。<br>比如说我论文中的图片太多了，Latex 排版时，将许多图片一并推迟到了非常靠后的页面，此时使用 <code>\clearpage</code> 命令，会在另起一页之前，先将所有推迟处理的浮动体排版成页，此时 htbp 等位置限制被完全忽略（clearpage 可以将之前推迟的所有浮动体一口气全排出来）。</p>
<h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>为了演示方便，本案例使用了 blindtext 宏包以用来生成假文</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[a4paper,twocolumn]{article}</span><br><span class="line"><span class="keyword">\usepackage</span>{blindtext} <span class="comment">%生成假文宏包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">    <span class="keyword">\section</span>{Table position}</span><br><span class="line">    <span class="keyword">\blindtext</span>[3] <span class="comment">%生成假文</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">\begin</span>{table}</span><br><span class="line">        <span class="keyword">\centering</span></span><br><span class="line">        <span class="keyword">\begin</span>{tabular}{ccc}</span><br><span class="line">            <span class="keyword">\hline</span></span><br><span class="line">            1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">            1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">            1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">            <span class="keyword">\hline</span></span><br><span class="line">        <span class="keyword">\end</span>{tabular}</span><br><span class="line">    <span class="keyword">\end</span>{table}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">\blindtext</span>[3] <span class="comment">%生成假文</span></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p>如果不给表格添加位置参数，其默认的位置参数是 t</p>
<p><img data-src="https://s2.loli.net/2022/06/06/ZSfNyHuGLwg9FQD.png" alt="01-不给位置参数则默认为顶部.png"></p>
<p>对于双栏排版，如果想要图、表跨栏显示，如何处理？<br>双栏排版环境下，LATEX 提供了 <code>table*</code> 和 <code>figure*</code> 环境用来排版跨栏的浮动体。它们的用法与 table 和 figure 一样，不同之处为双栏的 ⟨placement⟩ 参数只能用 tp 两个位置。</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{table*}[t]</span><br><span class="line">    <span class="keyword">\centering</span></span><br><span class="line">    <span class="keyword">\begin</span>{tabular}{ccc}</span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">        1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">        1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">        1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">        <span class="keyword">\hline</span></span><br><span class="line">    <span class="keyword">\end</span>{tabular}</span><br><span class="line"><span class="keyword">\end</span>{table*}</span><br></pre></td></tr></tbody></table></figure>

<p>注意是 table 带星，不是 tabular 带星</p>
<h3 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h3>]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX 之字体颜色篇</title>
    <url>/posts/Latex-font-colors.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="速览"><a href="#速览" class="headerlink" title="速览"></a>速览</h3><p>使用 xcolor 宏包可用来方便地调用颜色：<br>该宏包为我们提供了 <code>\textcolor</code> , <code>\definecolor</code> 两关键命令</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\textcolor</span>{red}{Red为xcolor宏包预定义的命令} <span class="comment">%修改颜色</span></span><br><span class="line"><span class="comment">%语法：\definecolor{name}{model-list}{spec-list}</span></span><br><span class="line"><span class="keyword">\definecolor</span>{Gcolor}{RGB}{66, 134, 243} <span class="comment">%定义自定义颜色</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="宏包预定义的颜色命令"><a href="#宏包预定义的颜色命令" class="headerlink" title="宏包预定义的颜色命令"></a>宏包预定义的颜色命令</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\textcolor</span>{colorname}{text} <span class="comment">%修改text的颜色</span></span><br></pre></td></tr></tbody></table></figure>

<p>宏包预定义的颜色及命令如下</p>
<p><img data-src="https://s2.loli.net/2022/06/07/i7Zn6glNyVoUTAf.png" alt="01-xcolor宏包预定义颜色.png"></p>
<h4 id="案例-1-宏包预定的颜色修改字体颜色"><a href="#案例-1-宏包预定的颜色修改字体颜色" class="headerlink" title="案例 1 宏包预定的颜色修改字体颜色"></a>案例 1 宏包预定的颜色修改字体颜色</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{xcolor}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\textcolor</span>{red}{Red为xcolor宏包预定义的命令} <span class="comment">%将字体颜色修改为红色</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\textcolor</span>{pink}{Pink也为xcolor宏包预定义的命令}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/07/NzWDuXltC1xZL7E.png" alt="02-xcolor宏包预定义的颜色命令.png"></p>
<h4 id="案例-2-设置颜色透明度"><a href="#案例-2-设置颜色透明度" class="headerlink" title="案例 2 设置颜色透明度"></a>案例 2 设置颜色透明度</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{xcolor}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\textcolor</span>{red}{红色文字} </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\textcolor</span>{red!50}{透明度为50的红色}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/07/NgwpToGD45a63eS.png" alt="03-调节颜色透明度.png"></p>
<ul>
<li>红色文字字体颜色 RGB (255,0,0)</li>
<li> 透明度为 50% 的红色字体颜色 RGB (255,128,128)</li>
</ul>
<h4 id="案例-3-混合色"><a href="#案例-3-混合色" class="headerlink" title="案例 3 混合色"></a>案例 3 混合色</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{xcolor}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\textcolor</span>{red}{红色文字} </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\textcolor</span>{red!50!black}{50<span class="keyword">\%</span>的红色 + 50<span class="keyword">\%</span>的黑色}</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\textcolor</span>{red!50!white}{50<span class="keyword">\%</span>的红色 + 50<span class="keyword">\%</span>的白色}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/10/hRTiszBuwZPa6kc.png" alt="091-混合色语法.png"></p>
<ul>
<li>red!50!black：即 50% 的红色（255,0,0）混合 50% 的黑色（0,0,0），最终得到（128,0,0）</li>
<li>同理，red!50!white 最终得到（255,128,128）</li>
</ul>
<h3 id="定义新的颜色命令"><a href="#定义新的颜色命令" class="headerlink" title="定义新的颜色命令"></a>定义新的颜色命令</h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%语法：\definecolor{name}{model-list}{spec-list}</span></span><br><span class="line"><span class="comment">%语法：\definecolor{颜色}{颜色模式}{参数序列}</span></span><br><span class="line"><span class="comment">%RGB实例如下</span></span><br><span class="line"><span class="keyword">\definecolor</span>{keywordcolor}{RGB}{34,34,250} <span class="comment">%定义新的颜色命令</span></span><br><span class="line"><span class="comment">%HTML实例如下</span></span><br><span class="line"><span class="keyword">\definecolor</span>{main}{HTML}{ff8080} <span class="comment">%注意HTML是大写，后面的参数序列不跟“#”</span></span><br></pre></td></tr></tbody></table></figure>

<p>语法中的 model-list 可以是我们常使用的 RGB、CMYK、HSV 等（整合了 12 种色彩模式 rgb, cmy, cmyk, hsb, Hsb, tHsb, gray, RGB, HTML, HSB, Gray, wave）。比如说 OFFICE 系列的软件在调节颜色时，通常会提供 RGB 和 HSV 两种颜色模式</p>
<p><img data-src="https://s2.loli.net/2022/06/07/BoCfgJpOTbcRSZL.png" alt="05-PPT当中的颜色模式.png"></p>
<h4 id="案例-4：定义新的颜色命令"><a href="#案例-4：定义新的颜色命令" class="headerlink" title="案例 4：定义新的颜色命令"></a>案例 4：定义新的颜色命令</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{xcolor}</span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\begin</span>{figure}</span><br><span class="line">  <span class="keyword">\centering</span></span><br><span class="line">  <span class="keyword">\includegraphics</span>[width=5in]{figs/Google-logo}</span><br><span class="line"> <span class="keyword">\end</span>{figure}</span><br><span class="line"> <span class="comment">%语法：\definecolor{name}{model-list}{spec-list}</span></span><br><span class="line"> <span class="keyword">\definecolor</span>{Gcolor}{RGB}{66, 134, 243}</span><br><span class="line"> <span class="keyword">\definecolor</span>{Lcolor}{RGB}{52, 170, 82}</span><br><span class="line"> <span class="keyword">\centering</span></span><br><span class="line"> <span class="keyword">\textcolor</span>{Gcolor}{这是Google logo中G的颜色}</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\textcolor</span>{Lcolor}{这是Google logo中L的颜色}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/07/MCAjx6dcvziGynU.png" alt="04-自定义颜色命令.png"></p>
<h3 id="拓展应用-彩色表格"><a href="#拓展应用-彩色表格" class="headerlink" title="拓展应用 彩色表格"></a>拓展应用 彩色表格</h3><p>xcolor 宏包的 <code>\rowcolors</code> 命令 (需要 colortbl 宏包的支持)，可以分别设置表格奇偶行的背景颜色</p>
<h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%语法：{起始行}{奇数行颜色}{偶数行颜色}，如一下示例</span></span><br><span class="line"><span class="keyword">\rowcolors</span>{1}{White}{Lavender}</span><br></pre></td></tr></tbody></table></figure>

<p><code>\hiderowcolors</code> 命令是用来暂停显示前面设置的奇偶行颜色，否则后面的其他表格会继续显示颜色。另一个命令 <code>\showrowcolors</code> 可以用来重新激活奇偶行颜色设置。</p>
<h4 id="案例-5：彩色表格"><a href="#案例-5：彩色表格" class="headerlink" title="案例 5：彩色表格"></a>案例 5：彩色表格</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>[table]{xcolor} <span class="comment">%提供rowcolor命令</span></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\definecolor</span>{mygray}{RGB}{245, 245, 245} <span class="comment">%自定义的一种灰色颜色命令</span></span><br><span class="line"><span class="keyword">\begin</span>{table}[!ht]</span><br><span class="line"> <span class="keyword">\centering</span></span><br><span class="line"> <span class="keyword">\rowcolors</span>{1}{white}{mygray} <span class="comment">%彩色表格，从第一行开始，奇偶行背景色分别为白色和自定义的灰色（注意颜色名称的大小写不要写错）</span></span><br><span class="line"> <span class="keyword">\begin</span>{tabular}{cc}</span><br><span class="line">  <span class="keyword">\hline</span></span><br><span class="line">  文献类型标识 <span class="built_in">&amp;</span> 载体类型标识 <span class="keyword">\\</span></span><br><span class="line">  <span class="keyword">\hline</span></span><br><span class="line">  <span class="keyword">\verb</span>|<span class="string">[DB/OL]</span>| <span class="built_in">&amp;</span> 联机网上数据库 (database online) <span class="keyword">\\</span></span><br><span class="line">  <span class="keyword">\verb</span>|<span class="string">[DB/MT]</span>| <span class="built_in">&amp;</span> 磁带数据库 (database on magnetic tape) <span class="keyword">\\</span></span><br><span class="line">  <span class="keyword">\verb</span>|<span class="string">[M/CD]</span>|  <span class="built_in">&amp;</span> 光盘图书 (monograph on CD-ROM) <span class="keyword">\\</span></span><br><span class="line">  <span class="keyword">\verb</span>|<span class="string">[CP/DK]</span>| <span class="built_in">&amp;</span> 磁盘软件 (computer program on disk) <span class="keyword">\\</span></span><br><span class="line">  <span class="keyword">\verb</span>|<span class="string">[J/OL]</span>| <span class="built_in">&amp;</span> 网上期刊 (serial online) <span class="keyword">\\</span></span><br><span class="line">  <span class="keyword">\verb</span>|<span class="string">[EB/OL]</span>| <span class="built_in">&amp;</span> 网上电子公告 (electronic bulletin board online)<span class="keyword">\\</span></span><br><span class="line">  <span class="keyword">\hline</span></span><br><span class="line">  <span class="keyword">\hiderowcolors</span> <span class="comment">%暂停使用奇偶行颜色设定，防止对后续表格的背景色产生影响，后续如果想要开启，可以使用\showrowcolors来重新激活奇偶行颜色设置</span></span><br><span class="line"> <span class="keyword">\end</span>{tabular}</span><br><span class="line"><span class="keyword">\end</span>{table}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/07/RhMes5uTINztD4w.png" alt="09-正常表格以及彩色表格.png"></p>
<p>需要注意的地方</p>
<ol>
<li><code>\usepackage[table]{xcolor} 如果仅使用</code> \usepackage{xcolor}<code>，无法识别</code> \rowcolors<code>、</code>\hiderowcolors` 等命令</li>
<li><code>\hiderowcolors</code> 写在 tabular 环境内，否则报 <code>Misplaced \noalign</code> 错</li>
</ol>
<p>关于第 2 点的报错，可参考：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> CSDN：<a href="https://blog.csdn.net/xovee/article/details/106743469">翻译 Misplaced noalign</a>@<a href="https://xovee.blog.csdn.net/" title="Xovee">Xovee</a> ✅ 2023-08-10</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/06/07/xmkwTfgHhidRZVB.png" alt="08-彩色表格报错.png"></p>
<h3 id="主要参考资料"><a href="#主要参考资料" class="headerlink" title="主要参考资料"></a>主要参考资料</h3><ul>
<li>雷太赫排版系统简介（第二版）：<a href="https://github.com/huangxg/lnotes">Github 仓库</a></li>
<li> CSDN：<a href="https://blog.csdn.net/xovee/article/details/106743469">翻译 Misplaced noalign</a></li>
<li> 个人博客：<a href="https://liam.page/2016/07/22/using-the-tcolorbox-package-to-create-a-new-theorem-environment/">LaTeX 黑魔法（一）：tcolorbox 宏包简明教程</a></li>
</ul>
<h3 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h3>]]></content>
      <tags>
        <tag>LaTeX</tag>
        <tag>Font</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown Emoji</title>
    <url>/posts/Markdown-Emoji.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Emoji Code Sheet：<a href="https://www.webfx.com/tools/emoji-cheat-sheet/">Emoji Cheat Sheet</a></li>
<li>VScode 插件：<a href="https://marketplace.visualstudio.com/items?itemName=bierner.markdown-emoji">Markdown Emoji</a></li>
<li>Obsidian 插件：<a href="https://github.com/phibr0/obsidian-emoji-shortcodes">Emoji shortcodes</a>（自带补全提示）</li>
<li><a href="https://dev.to/nikolab/complete-list-of-github-markdown-emoji-markup-5aia">Complete list of github markdown emojis</a></li>
</ol>
<h3 id="常用-Emoji"><a href="#常用-Emoji" class="headerlink" title="常用 Emoji"></a>常用 Emoji</h3><p>只是，同样的 Markdown Emoji 符号，在不同的地方显示可能不同，比如 VScode 和 Obsidian，更别说其他浏览器里</p>
<ul>
<li>😄：smile</li>
<li>😭：sob</li>
<li>😂：joy</li>
<li>😁：grin</li>
<li>😉：wink</li>
<li>😳：flushed</li>
<li>👍：+1</li>
<li>😅：sweat_smile</li>
</ul>
]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 之脚注语法</title>
    <url>/posts/Markdown-footnote-syntax.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>脚注使您可以添加注释和参考，而不会使文档正文混乱。当您创建脚注时，带有脚注的上标数字会出现在您添加脚注参考的位置。读者可以单击链接以跳至页面底部的脚注内容。参考资料 <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Markdown 脚注](https://markdown.com.cn/extended-syntax/footnotes.html)
">[1]</span></a></sup>。</p>
<p>要创建脚注参考，请在方括号（<code>[]</code>）内添加插入符号 (<code>^</code>) 和标识符 (类似于标签 label)。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注参考与脚注本身相关联 - 在输出中，脚注按顺序编号。</p>
<p>在括号内使用另一个插入符号和标识符 (数字) 添加脚注，并用冒号和文本。<strong>注意可以不必在文档末尾添加脚注</strong>，可以将这些引用放在除列表，块引号和表之类的其他元素之外的任何位置。</p>
<p>语法如下：</p>
<figure class="highlight markdown"><table><tbody><tr><td class="code"><pre><span class="line">This is my blog<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="[Markdown 脚注](https://markdown.com.cn/extended-syntax/footnotes.html)
">[1]</span></a></sup></span><br><span class="line"></span><br><span class="line">[<span class="string">^1</span>]: [<span class="string">智朋的个人博客</span>](<span class="link">https://coffeelize.top</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>比如其他编辑器中渲染出来的脚注是这样的</p>
<p><img data-src="https://s2.loli.net/2022/06/28/tzdSv4WAHwxoUhT.jpg" alt="04-其他编辑器中渲染markdown脚注.jpeg"></p>
<p>但是 Hexo 默认的 Markdown 渲染器是不支持渲染脚注的 <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="个人博客：[Hexo-NexT 主题个性优化](https://guanqr.com/tech/website/hexo-theme-next-customization/#%E6%8F%92%E5%85%A5%E8%84%9A%E6%B3%A8)
">[2]</span></a></sup>，为了实现上述的功能，可以通过安装如下插件 hexo-reference<sup id="fnref:3"><a href="#fn:3" rel="footnote"><span class="hint--top hint--error hint--medium hint--rounded hint--bounce" aria-label="Github: [hexo-reference](https://github.com/kchen0x/hexo-reference)
">[3]</span></a></sup>：</p>
<p><img data-src="https://s2.loli.net/2022/06/28/slVMKg2vrT4Ghwb.jpg" alt="01-hexo默认的渲染器无法渲染markdown的脚注语法.jpeg"></p>
<p>具体安装过程详见该仓库的 Readme（很简单的操作，一句安装代码即可搞定），如下是安装插件后的效果</p>
<p><img data-src="https://s2.loli.net/2022/06/28/Q9b1kDEe2atsoXu.jpg" alt="03-安装脚注渲染插件之后.jpeg"></p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://markdown.com.cn/extended-syntax/footnotes.html">Markdown 脚注</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"> 个人博客：<a href="https://guanqr.com/tech/website/hexo-theme-next-customization/#%E6%8F%92%E5%85%A5%E8%84%9A%E6%B3%A8">Hexo-NexT 主题个性优化</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;">Github: <a href="https://github.com/kchen0x/hexo-reference">hexo-reference</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 简明笔记</title>
    <url>/posts/Maven-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Maven-主要功能"><a href="#Maven-主要功能" class="headerlink" title="Maven 主要功能"></a>Maven 主要功能</h3><p>Maven 是专门用于管理和构建 Java 项目的工具，它的主要功能有：</p>
<ul>
<li>提供了一套标准化的项目结构</li>
<li>提供了一套标准化的构建流程（编译，测试，打包，发布…）</li>
<li>提供了一套依赖管理机制</li>
</ul>
<h3 id="标准化的项目结构"><a href="#标准化的项目结构" class="headerlink" title="标准化的项目结构"></a>标准化的项目结构</h3><p>不同 IDE 之间，项目结构不一样，不通用<br><img data-src="https://s2.loli.net/2022/12/03/2UqzrDVtQE4JFci.png" alt="01-不同IDE之间项目结构不一致.png"></p>
<p>所有 IDE 使用 Maven 构建的项目结构完全一样，所有 IDE 创建的 Maven 项目都可以通用</p>
<p>Maven 的项目结构<br><img data-src="https://s2.loli.net/2022/12/03/2yNB1P6z37dorsf.png" alt="02-Maven项目结构.png"></p>
<h3 id="标准化的构建流程"><a href="#标准化的构建流程" class="headerlink" title="标准化的构建流程"></a>标准化的构建流程</h3><p>源代码⇒编译⇒测试⇒打包⇒发布，Maven 提供了一套简单的命令来完成项目构建</p>
<h3 id="提供了一套依赖管理机制"><a href="#提供了一套依赖管理机制" class="headerlink" title="提供了一套依赖管理机制"></a>提供了一套依赖管理机制</h3><p>比如 JDBC，需要使用的 MySQL 的驱动包，依赖管理其实就是管理你项目所依赖的第三方资源（Jar 包、依赖），原先我们是如何操作的呢：</p>
<ol>
<li>下载 jar 包</li>
<li>将 jar 包复制到 lib 文件夹里</li>
<li>右键 jar 包，作为库</li>
</ol>
<p>那 Maven 是如何管理依赖的呢</p>
<ol>
<li>Maven 使用标准的 <strong>坐标</strong> 配置来管理各种依赖</li>
<li>只需要简单的配置就可以完成依赖管理<br><img data-src="https://s2.loli.net/2022/12/03/l4dLFEwaQbsVCgB.png" alt="03-通过坐标管理依赖.png"></li>
</ol>
<h3 id="Maven-简介"><a href="#Maven-简介" class="headerlink" title="Maven 简介"></a>Maven 简介</h3><p>Apache Maven 是一个项目管理和构建工具，它基于项目对象模型（POM）的概念，通过一小段描述信息来管理项目的构建、报告和文档</p>
<p>仓库分类</p>
<ul>
<li>本地仓库</li>
<li>中央仓库：有 Maven 团队维护的全球唯一的仓库（免费的开源的 jar 包）</li>
<li>远程仓库（私服）：一般有公司团队搭建的私有仓库（可以存放一下自己的公司的和一些可能具有版权的 jar 包）</li>
</ul>
<p>查找流程：首先会查找本地仓库，如果本地仓库没有，则去中央仓库查找是否有，有的话就会 <strong>自动下载</strong> 到本地仓库</p>
<h3 id="Maven-的安装和配置"><a href="#Maven-的安装和配置" class="headerlink" title="Maven 的安装和配置"></a>Maven 的安装和配置</h3><ol>
<li>解压即可安装</li>
<li>配置环境变量</li>
</ol>
<p>下图中的 Maven 文件夹呢就是包含 bin 文件夹的文件夹<br><img data-src="https://s2.loli.net/2022/12/03/PiCMQwYabNHjqLF.png" alt="04-配置Maven环境路径1.png"></p>
<p>将 bin 目录添加到 Path 目录中<br><img data-src="https://s2.loli.net/2022/12/03/2Lig39VGsfNqd7Q.png" alt="05-配置Maven环境路径2.png"></p>
<ol start="3">
<li>配置本地仓库：修改 conf/setting.xml 中的 <code>&lt;localRepository&gt;</code> 为其指定一个目录</li>
</ol>
<p><img data-src="https://s2.loli.net/2022/12/03/XxrK3vGfNjqcA1T.png" alt="06-指定本地仓库路径.png"></p>
<p>注意：为了保守起见，在 Intellij 中也对 Maven 的本地路径配置一下：)<br><img data-src="https://s2.loli.net/2022/12/03/LjZ7q38RftUCYig.png" alt="12-指定本地仓库路径2.png"></p>
<ol start="4">
<li>配置阿里云私服：修改 conf/setting.xml 中的 <code>&lt;mirrors&gt;</code> 标签，为其添加如下子标签 </li>
</ol>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/12/03/XWRcT5hMvpO7Aur.png" alt="07-配置阿里云远程仓库.png"></p>
<h3 id="Maven-的基本使用"><a href="#Maven-的基本使用" class="headerlink" title="Maven 的基本使用"></a>Maven 的基本使用</h3><h4 id="Maven-的常用命令"><a href="#Maven-的常用命令" class="headerlink" title="Maven 的常用命令"></a>Maven 的常用命令</h4><ul>
<li>compile：编译</li>
<li> clean：清理，删除前面编译产生的 target 目录</li>
<li> test：测试，执行 test 文件夹下的代码</li>
<li> package：打包</li>
<li> install：安装</li>
</ul>
<p>在含有 pom.xml 文件的目录下，进入 PowerShell</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mvn compile</span><br><span class="line">mvn clean</span><br><span class="line">mvn package</span><br><span class="line">mvn tast</span><br><span class="line">mvn install</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Maven-的生命周期"><a href="#Maven-的生命周期" class="headerlink" title="Maven 的生命周期"></a>Maven 的生命周期</h3><p>Maven 对项目构建的生命周期划分为三套</p>
<ul>
<li>clean：清理工作</li>
<li> default：核心工作，例如编译，测试，打包，安装等</li>
<li> site：产生报告，发布站点等</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/12/03/EQ7SK6XnLpfkJhw.png" alt="08-Maven的生命周期.png"></p>
<p>比如说执行 install，就会自动执行 compile，但是不会自动执行 clean（因为这是两套不同的生命周期）</p>
<h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>使用坐标导入 jar 包</p>
<ol>
<li>在 pom.xml 中编写 <code>&lt;dependencies&gt;</code> 标签</li>
<li>在 <code>&lt;dependencies&gt;</code> 标签中使用 <code>&lt;dependency&gt;</code> 来引入坐标</li>
<li>定义坐标的 groupId，artifactId，version</li>
<li> 点击刷新按钮，是坐标生效（或者对 IDE 进行配置，每次变更自动生效）</li>
</ol>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入 mysql 驱动jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>比如去找 MySQL 的 Maven 配置信息（浏览器搜索 <code>mysql maven</code>），比如从以下网页中找到了：<a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java/6.0.6">MySQL Connector Java</a></p>
<p>还为我们提供了 maven 需要使用的信息<br><img data-src="https://s2.loli.net/2022/12/03/GWJwatOcH9zZRyj.png" alt="09-从官网获得Maven的配置信息.png"></p>
<h3 id="快速导入坐标信息到-pom-xml"><a href="#快速导入坐标信息到-pom-xml" class="headerlink" title="快速导入坐标信息到 pom.xml"></a>快速导入坐标信息到 pom.xml</h3><p>如果本地仓库就有相应的 jar 包，那么直接可以通过搜索 jar 包的名字来导入（即可自动导入模板）</p>
<ol>
<li>在 pom.xml 文件中，Alt+Insert</li>
<li> 选择依赖项模板，自动为我们添加模板</li>
</ol>
<p><img data-src="https://s2.loli.net/2022/12/03/sifvKxMy7mGwtXg.png" alt="10-快速插入依赖项模板.png"></p>
<h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p>通过设置坐标依赖范围（scope），可以设置对应 jar 包的作用范围：编译环境、测试环境、运行环境</p>
<p>编译环境：在主工程 java 文件夹中可以使用<br>测试环境：在测试文件夹 test 中可以使用<br>运行环境：</p>
<p>依赖范围的取值有以下六种，默认值是 compile（其实范围也是最大的）</p>
<h3 id="分模块开发与设计"><a href="#分模块开发与设计" class="headerlink" title="分模块开发与设计"></a>分模块开发与设计</h3><p>将原始模块按照功能拆分为若干个子模块，方便模块间的相互调用，接口共享</p>
<p><img data-src="https://s2.loli.net/2022/12/20/2KG3AFHn9IkrQ7s.png" alt="01-分模块开发思想.png"></p>
<p>Intellij 中同时导入多个模块方式如下：<br><img data-src="https://s2.loli.net/2022/12/20/hYWKdaNVUjRFDug.png" alt="02-Intellij同时导入多个模块.png"></p>
<p>1、项目准备：之前做好的 SSM 整合的项目 maven_02_ssm 进行讲解<br>2、新建一个模块：maven_03_pojo</p>
<p>1）新建 com.itheima.domain 包<br>2）将 maven_02_ssm 中的 domain 下的 Book 实体类剪切至 maven_03_pojo 下的 domain 包下<br>3）此时 maven_02_ssm 将无法运行，因为缺少了 Book 实体类<br>4）现在要做到是：如何在 maven_02_ssm 中访问 / 加载 maven_03_pojo 下的 Book 实体类呢？</p>
<p>maven_03_pojo 模块中 pom.xml 的坐标如下</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_03_pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>那么我们在 maven_02_ssm 中引入上面的坐标</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖domain运行--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_03_pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>此时就将 maven_03_pojo 模块引入进来了，此时 maven_02_ssm 也没有报错了</p>
<p>总结：将一个模块中的一部分功能抽取出来单独做一个模块，然后在原来的使用方去引用这个抽取出来的模块，这样就做成了两个模块</p>
<p>但是此时 02 模块会有问题？为什么呢<br>因为通过坐标导入，会将相应的资源下载到本地仓库，02 模块引入了 03 模块，但是本地仓库里面却找不到 03 的资源。因此，我们还需要将 03 模块 install 到本地仓库中</p>
<p><img data-src="https://s2.loli.net/2022/12/20/ZKzeAFyfxuqWJD1.png" alt="03-导入坐标之后需要安装到本地仓库.png"></p>
<p>安装完之后，本地仓库中就可以找到模块 03 的资源了。此时我们在 compile 一下 02 模块，若能够编译成功，说明没有问题了</p>
<h3 id="依赖管理-1"><a href="#依赖管理-1" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>如果一个模块 A 依赖了模块 B，而 B 模块依赖了其他的东西，那么这个 A 模块可以直接使用这些东西</p>
<p>直接依赖：在当前项目中通过依赖配置建立的依赖关系<br>简介依赖：被依赖的资源如果依赖其他资源，当前项目简介依赖其他资源</p>
<h4 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h4><ul>
<li>路径优先：当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高</li>
<li>声明优先：当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的</li>
<li>特殊优先：当同级配置类相同资源的不同版本，后配置的覆盖先配置的</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/12/20/NS41odfFWlRwQan.png" alt="04-依赖层级关系.png"></p>
<p>可以通过此处查看项目中的依赖关系<br><img data-src="https://s2.loli.net/2022/12/20/boJTGpKOdmHg3Vw.png" alt="05-Intellij中查看依赖层级关系.png"></p>
<h4 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h4><p>比如说 02 模块引用了 04 模块，04 模块中引用了几个坐标。现在的需求是，我不想让 02 模块能够加载或引用 04 模块中的坐标，怎么处理呢？</p>
<p>那么在 04 模块中，对如下这个坐标进行处理</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_03_pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--可选依赖是隐藏当前工程所依赖的资源，隐藏后对应资源将不具有依赖传递性--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>其实这个需要就是想要某个坐标没有传递性</p>
<h4 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h4><p>比如引用了 <code>maven_04_dao</code> 坐标，但是排除这个坐标下的另外两个坐标</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.itheima&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;maven_04_dao&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;</span><br><span class="line">  &lt;!--排除依赖是隐藏当前资源对应的依赖关系--&gt;</span><br><span class="line">  &lt;exclusions&gt;</span><br><span class="line"> &lt;exclusion&gt;</span><br><span class="line">   &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line"> &lt;/exclusion&gt;</span><br><span class="line"> &lt;exclusion&gt;</span><br><span class="line">   &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line"> &lt;/exclusion&gt;</span><br><span class="line">  &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>那么可选和排除有什么区别呢：</p>
<ul>
<li>用的可选，别人引用了我的坐标，但是不知道我背后引用了哪些坐标；对外隐藏当前所依赖的资源</li>
<li>用的排除，别人是知道我背后引用了那些坐标的；主动断开依赖的资源，被排除的资源无需指定版本</li>
</ul>
<h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p><img data-src="https://s2.loli.net/2022/12/20/u2RJgQrAbdtn1yO.png" alt="06-聚合的引入.png"></p>
<p>比如：上面的三个模块都是依赖 pojo 模块的，假如我们更新了 pojo 模块，上面三个模块会及时更新吗？如果 pojo 因为更新出现了问题，上面三个模块能够及时发现吗？</p>
<p>聚合：将多个模块组织成一个整理，同时进行项目构建的过程称为聚合（其实有点像事务的概念）<br>聚合工程：通常是一个不具有业务功能的 “空” 工程（仅有一个 pom 文件）<br>作用：使用聚合工程可以将多个模块编组，通过对聚合工程进行构建，实现对所包含的模块进行同步构建；当工程中某个模块发生更新时，必须保障工程中与已更新模块关联的模块同步更新，此时可以使用聚合工程来解决批量模块同步构建的问题</p>
<p>1）创建新 Maven 模块<br>2）聚合工程的特点：在 pom.xml 中，将打包方式设置为 pom</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>3）设置管理模块的模块名称</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置管理模块名称</span></span><br><span class="line"><span class="comment">	..表示当前文件pom.xml文件的上一级文件	</span></span><br><span class="line"><span class="comment">--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_02_ssm<span class="tag">&lt;/<span class="name">module</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_03_pojo<span class="tag">&lt;/<span class="name">module</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>../maven_04_dao<span class="tag">&lt;/<span class="name">module</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/12/20/W4X3NPlEJMkL1qb.png" alt="07-聚合-引入子模块.png"></p>
<p><img data-src="https://s2.loli.net/2022/12/20/U8B1hmP9NRurxy2.png" alt="08-聚合后各层级的关系.png"></p>
<p>4）进行同步编译 compile</p>
<p><img data-src="https://s2.loli.net/2022/12/20/4WN2ZoTL8AxvcaY.png" alt="09-聚合后进行同步编译.png"></p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>概念：继承描述的是两个工程间的关系，与 Java 中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承</p>
<p>作用：简化配置；减少版本冲突</p>
<p>1）继承关系在子类中描述</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置当前工程继承自parent工程--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_01_parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../maven_01_parent/pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>此时，就可以继承父工程中依赖的坐标了</p>
<p>2）父工程中的坐标都必须要被所有子工程继承吗？不一定<br>可以在父工程 pom 文件中通过 <code>dependencyManagement</code> 来指定这是一个可选的坐标</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义依赖管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>${junit.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>如果子工程中想要引用的话就在 pom 中加上相应的坐标，但是注意不要加版本号，因为他会自动继承父类中坐标的版本号；而对于其他子工程就不会自动继承引用这个坐标</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">  &lt;groupId&gt;junit&lt;/groupId&gt;  </span><br><span class="line">  &lt;artifactId&gt;junit&lt;/artifactId&gt;  </span><br><span class="line">  &lt;scope&gt;test&lt;/scope&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>3）子工程继承父工程中的坐标，只要父工程中坐标的版本号一改，所有子工程中对应的版本号都会改</p>
<p>聚合与继承的区别</p>
<ul>
<li>作用<ul>
<li>聚合用于快速构建项目</li>
<li>继承用于快速配置</li>
</ul>
</li>
<li>相同点<ul>
<li>聚合与继承的 pom.xml 文件打包方式均为 pom，可以将两种关系制作到同一个 pom 文件中</li>
<li>聚合与继承均属于设计型模块，并无实际的模块内容</li>
</ul>
</li>
<li>不同点<ul>
<li>聚合是在当前模块中配置关系，聚合可以感知到参与聚合的模块有哪些</li>
<li>继承是在子模块中配置关系，父模块无法感知哪些子模块继承了自己</li>
</ul>
</li>
</ul>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><img data-src="https://s2.loli.net/2022/12/20/7U4sAGSDOdz3f9e.png" alt="10-属性问题的引入.png"></p>
<p>1）定义属性</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义属性，标签名可以自定义--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>2）在定义坐标时，可以直接使用变量</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${spring.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>3）这样就好了呀，以后可以直接从这儿就可以看到各种坐标的版本</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义属性--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--&lt;jdbc.url&gt;jdbc:mysql://127.0.0.1:3306/ssm_db&lt;/jdbc.url&gt;--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><p>比如如下为某一工程 pom.xml 中的坐标，其中的 version 有什么用呢？</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;groupId&gt;com.itheima&lt;/groupId&gt;  </span><br><span class="line">&lt;artifactId&gt;maven_02_ssm&lt;/artifactId&gt;  </span><br><span class="line">&lt;version&gt;<span class="number">1.0</span>-SNAPSHOT&lt;/version&gt;  </span><br><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>工程版本<ul>
<li> SNAPSHOT（快照版本）<ul>
<li>项目开发过程中临时输出的版本，称为快照版本</li>
<li>快照版本会随着开发的进展不断更新</li>
</ul>
</li>
<li> RELESE（发布版本）<ul>
<li>项目开发到进入阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构建文件时稳定的，即便进行功能的后续开发，也不会改变当前发布版本的内容，这种版本称为发布版本</li>
</ul>
</li>
</ul>
</li>
<li>发布版本<ul>
<li> alpha 版</li>
<li> beta 版</li>
<li>纯数字版</li>
</ul>
</li>
</ul>
<h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h3><p><img data-src="https://s2.loli.net/2022/12/20/AJfgMke7ODpBI8r.png" alt="011-多环境配置.png"></p>
<p>maven 提供配置多种环境的设定，帮助开发者使用过程中快速切换环境</p>
<p>1）在父工程 pom.xml 中</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置多环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--开发环境--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_dep<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.1.1.1:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--设定是否为默认启动环境--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--生产环境--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.2.2.2:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--测试环境--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">jdbc.url</span>&gt;</span>jdbc:mysql://127.3.3.3:3306/ssm_db<span class="tag">&lt;/<span class="name">jdbc.url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>2）对工程进行 install，然后可以查看项目构建好的 war 包，双击 war 包，进入 WEB-INF 文件夹 ⇒ classes 文件夹 ⇒ jdbc.properties 文件，查看配置是否生效</p>
<p>如果要更换环境，可以将设置默认启动环境的那几行代码切换一下位置，比如切换到测试环境中，那么 install 后，默认就是测试环境的配置了</p>
<p>或者可以不用挪动那几行代码，直接使用 Maven 指令来表明我们将使用 <code>env_dep</code> 环境来进行 install，如下图所示<br><img data-src="https://s2.loli.net/2022/12/20/iYJEPMRwrdWb1jV.png" alt="012-Maven指令处理多环境.png"></p>
<p><img data-src="https://s2.loli.net/2022/12/20/fISheL961B4DZxt.png" alt="013-Maven指令处理多环境-2.png"></p>
<h4 id="跳过测试"><a href="#跳过测试" class="headerlink" title="跳过测试"></a>跳过测试</h4><p>跳过测试：跳过所有测试<br><img data-src="https://s2.loli.net/2022/12/20/RS4pDOViCos8awT.png" alt="014-跳过测试.png"><br>跳过测试：指定跳过某些内容</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排除掉不参与测试的内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/BookServiceTest.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Mermaid 简明教程</title>
    <url>/posts/Mermaid-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Mermaid 官方文档：<a href="https://mermaid-js.github.io/mermaid/#/">mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs.</a></li>
<li>Github：<a href="https://github.com/mermaid-js/mermaid/blob/develop/README.zh-CN.md">Mermaid 中文说明文档</a></li>
<li> Mermaid 在线编辑 Github：<a href="https://github.com/mermaidjs/mermaid-live-editor">mermaid-live-editor</a></li>
<li>VScode 插件：<a href="https://marketplace.visualstudio.com/items?itemName=bierner.markdown-mermaid">Markdown Preview Mermaid Support</a></li>
<li>VScode 插件：<a href="https://marketplace.visualstudio.com/items?itemName=bpruitt-goddard.mermaid-markdown-syntax-highlighting">Mermaid Markdown Syntax Highlighting</a></li>
</ol>
<h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ol>
<li>个人博客：<a href="https://ghobam.com/2022/05/06/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE/">Mermaid 流程图 - Sherwood 的博客</a></li>
</ol>
<h3 id="流程图快速入门"><a href="#流程图快速入门" class="headerlink" title="流程图快速入门"></a>流程图快速入门</h3><h4 id="案例-1：常规流程图"><a href="#案例-1：常规流程图" class="headerlink" title="案例 1：常规流程图"></a>案例 1：常规流程图</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[Christmas] --&gt;|Get money| B(Go shopping)</span><br><span class="line">    B --&gt; C{Let me think}</span><br><span class="line">    C --&gt;|One| D[Laptop]</span><br><span class="line">    C --&gt;|Two| E[iPhone]</span><br><span class="line">    C --&gt;|Three| F[Car]</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[Christmas] --&gt;|Get money| B(Go shopping)</span><br><span class="line">    B --&gt; C{Let me think}</span><br><span class="line">    C --&gt;|One| D[Laptop]</span><br><span class="line">    C --&gt;|Two| E[iPhone]</span><br><span class="line">    C --&gt;|Three| F[Car]</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><p>第一行：TD（Top down）自上而下；<br>除此之外，还有上 (Top) 下 (Bottom) 左 (Left) 右 (Right)，可以两两组合来确定流程图的方向</p>
</li>
<li><p>第二行：中括号表示图形中的矩形，圆括号为圆角矩形，两竖线之间的表示箭头上的文字<br>除此之外，还有各种箭头和图形样式，这里不再列举，详细请查看官方文档和 <a href="https://ghobam.com/2022/05/06/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE/">Mermaid 流程图 - Sherwood 的博客</a></p>
</li>
</ul>
<h4 id="案例-2：带有子图的流程图"><a href="#案例-2：带有子图的流程图" class="headerlink" title="案例 2：带有子图的流程图"></a>案例 2：带有子图的流程图</h4><p>子图的基本语法为</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">subgraph title</span><br><span class="line"> graph definition</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure>

<p>完整案例如下</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">flowchart&nbsp;RL</span><br><span class="line">    b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br><span class="line">    servlet1--&gt;|data|b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;Browsers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;servers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">flowchart&nbsp;RL</span><br><span class="line">    b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br><span class="line">    servlet1--&gt;|data|b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;Browsers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;b2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;subgraph&nbsp;servers  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet1</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;servlet2</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;end</span><br></pre></td></tr></tbody></table></figure>

<p>特别注意：两竖线中的内容（也就是箭头上的文字）不能包含双引号，在 Mermaid 中算是特殊符号，请查阅 <a href="https://ghobam.com/2022/05/06/Mermaid%E6%B5%81%E7%A8%8B%E5%9B%BE/">Mermaid 流程图 - Sherwood 的博客</a>，需要额外进行处理。<code>&amp;quot;</code> 来表示双引号。所以，在箭头上还是尽量少用双引号吧😀</p>
<p>以下方式均会导致绘图出错</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">b1--&gt;|1.username = '"zhangsan"'|servlet1</span><br><span class="line">b1--&gt;'|1.username = "zhangsan"|'servlet1</span><br><span class="line">b1--&gt;|'1.username = "zhangsan"'|servlet1</span><br></pre></td></tr></tbody></table></figure>

<p>正确的处理方式</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">b1--&gt;|"username = &amp;quot;zhangsan&amp;quot;"|servlet1</span><br></pre></td></tr></tbody></table></figure>

<h3 id="基础表达形式"><a href="#基础表达形式" class="headerlink" title="基础表达形式"></a>基础表达形式</h3><h4 id="直线结构"><a href="#直线结构" class="headerlink" title="直线结构"></a>直线结构</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">A[Christmas] --&gt;|Get money| B(Go shopping)</span><br></pre></td></tr></tbody></table></figure>

<p>![[Pasted image 20240327083121.png]]</p>
<h4 id="多分支结构"><a href="#多分支结构" class="headerlink" title="多分支结构"></a>多分支结构</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">B --&gt; C{Let me think}</span><br><span class="line">C --&gt;|One| D[Laptop]</span><br><span class="line">C --&gt;|Two| E[iPhone]</span><br><span class="line">C --&gt;|Three| F[Car]</span><br></pre></td></tr></tbody></table></figure>

<p>![[Pasted image 20240327083210.png]]</p>
<h4 id="多合一结构"><a href="#多合一结构" class="headerlink" title="多合一结构"></a>多合一结构</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">A --&gt; C</span><br><span class="line">B --&gt; C</span><br><span class="line">D --&gt; C</span><br></pre></td></tr></tbody></table></figure>

<p>![[Pasted image 20240327083404.png]]</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>比如说一个任务流程图，需要同时确认了 A 和 B，才能执行 C，那么流程图该怎么表达</p>
<p>参考案例 1：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[Christmas] --&gt;|Get money| B(Go shopping)</span><br><span class="line">    B --&gt; C{Let me think}</span><br><span class="line">    C --&gt;|One| D[Laptop]</span><br><span class="line">    C --&gt;|Two| E[iPhone]</span><br><span class="line">    C --&gt;|Three| F[Car]</span><br></pre></td></tr></tbody></table></figure>

<p>参考案例 2：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[First node] --&gt; C</span><br><span class="line">    B --&gt; C</span><br><span class="line">    D --&gt; C</span><br></pre></td></tr></tbody></table></figure>

<p>根据案例 2，如何给 A，B 添加样式，以区别显示呢：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    style A fill:#9f9,stroke:#333,stroke-width:2px;</span><br><span class="line">    style B fill:red;</span><br><span class="line">    style D fill:cyan,stroke:dark gray;</span><br><span class="line">    style C fill:yellow;</span><br><span class="line">    A --&gt; C</span><br><span class="line">    B --&gt; C</span><br><span class="line">    D --&gt; C</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>Design</tag>
      </tags>
  </entry>
  <entry>
    <title>Mermaid 甘特图</title>
    <url>/posts/Mermaid-Gantt-chart.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>mermaid 中文网教程：<a href="https://mermaid.nodejs.cn/syntax/gantt.html">甘特图 | Mermaid 中文网</a></li>
<li> mermaid 在线编辑器：<a href="https://mermaid.live/edit">Online FlowChart &amp; Diagrams Editor - Mermaid Live Editor</a></li>
</ul>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">  title 项目进度</span><br><span class="line">  dateFormat YYYY-MM-DD</span><br><span class="line">  section 设计</span><br><span class="line">  任务1: a1, 2022-01-01, 3d</span><br><span class="line">  任务2: a2, after a1, 2d</span><br><span class="line">  %% 注释内容</span><br><span class="line">  section 开发</span><br><span class="line">  任务3: b1, after a2, 4d</span><br><span class="line">  里程碑: milestone, after b1</span><br><span class="line">  section 测试</span><br><span class="line">  任务4:c1, after b1, 2d</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240612212555.png"></p>
<h4 id="修改坐标轴格式"><a href="#修改坐标轴格式" class="headerlink" title="修改坐标轴格式"></a>修改坐标轴格式</h4><p>坐标轴（横坐标）默认输出日期格式为 YYYY-MM-DD，以天作为单位，如何以分钟或者秒作为横坐标的单位呢：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">axisFormat %Y-%m-%d</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">%a - 缩写的星期几名称。</span><br><span class="line">%A - 完整的星期几名称。</span><br><span class="line">%b - 缩写的月份名称。</span><br><span class="line">%B - 完整的月份名称。</span><br><span class="line">%c - 日期和时间，格式为 "%a %b %e %H:%M:%S %Y"。</span><br><span class="line">%d - 以十进制数表示的零填充的月份中的日期 [01,31]。</span><br><span class="line">%e - 以十进制数表示的空格填充的月份中的日期 [ 1,31]；等同于 %_d。</span><br><span class="line">%H - 小时（24小时制）的十进制数表示 [00,23]。</span><br><span class="line">%I - 小时（12小时制）的十进制数表示 [01,12]。</span><br><span class="line">%j - 以十进制数表示的一年中的日期 [001,366]。</span><br><span class="line">%m - 以十进制数表示的月份 [01,12]。</span><br><span class="line">%M - 以十进制数表示的分钟 [00,59]。</span><br><span class="line">%L - 以十进制数表示的毫秒数 [000, 999]。</span><br><span class="line">%p - 上午（AM）或下午（PM）。</span><br><span class="line">%S - 以十进制数表示的秒数 [00,61]。</span><br><span class="line">%U - 以十进制数表示的一年中的周数（以星期日作为一周的第一天） [00,53]。</span><br><span class="line">%w - 以十进制数表示的星期几 [0（星期日）,6]。</span><br><span class="line">%W - 以十进制数表示的一年中的周数（以星期一作为一周的第一天） [00,53]。</span><br><span class="line">%x - 日期，格式为 "%m/%d/%Y"。</span><br><span class="line">%X - 时间，格式为 "%H:%M:%S"。</span><br><span class="line">%y - 以十进制数表示的不带世纪的年份 [00,99]。</span><br><span class="line">%Y - 以十进制数表示的带世纪的年份。</span><br><span class="line">%Z - 时区偏移，例如 "-0700"。</span><br><span class="line">%% - 字面上的 "%" 字符。</span><br></pre></td></tr></tbody></table></figure>

<p>例如需要将坐标轴改为小时和分钟，那么：</p>
<figure class="highlight diff"><table><tbody><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">    title 甘特图</span><br><span class="line"><span class="addition">+   axisFormat %H-%M</span></span><br><span class="line"><span class="addition">+   dateFormat  HH:mm</span></span><br><span class="line">    section 样本1</span><br><span class="line">    任务1:a1,00:00, 70s</span><br><span class="line">    任务2:after a1, 100s</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240612213529.png" alt="image.png"></p>
<p>将坐标轴改成分钟和秒，那么：</p>
<figure class="highlight diff"><table><tbody><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">    title 效率计算</span><br><span class="line"><span class="addition">+   axisFormat %M:%S</span></span><br><span class="line"><span class="addition">+   dateFormat  mm:ss</span></span><br><span class="line">%% 进样</span><br><span class="line">    section 流程1</span><br><span class="line">    步骤1: milestone,a0,0,0s</span><br><span class="line">    步骤2: a1,after a0,8.6s</span><br><span class="line">    步骤3: a2,after a1,3s</span><br><span class="line">    步骤4: a3,after a2,10s</span><br><span class="line">    section 流程2</span><br><span class="line">    步骤2: b1,after a2,8.6s</span><br><span class="line">    步骤3: b2,after b1,3s</span><br><span class="line">    步骤4: b3,after b2,10s</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240612213950.png" alt="image.png"></p>
<h4 id="给里程碑取别名"><a href="#给里程碑取别名" class="headerlink" title="给里程碑取别名"></a>给里程碑取别名</h4><figure class="highlight diff"><table><tbody><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">    dateFormat HH:mm</span><br><span class="line">    axisFormat %H:%M</span><br><span class="line"><span class="addition">+   Initial milestone : milestone, m1, 17:49, 2m</span></span><br><span class="line">    Task A : 10m</span><br><span class="line">    Task B : 5m</span><br><span class="line"><span class="addition">+   Final milestone : milestone, m2, 18:08, 4m</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240612214239.png" alt="image.png"></p>
<h3 id="某效率计算"><a href="#某效率计算" class="headerlink" title="某效率计算"></a>某效率计算</h3><p>案例分析如下，对于有同步运行的动作，可通过这种时间重叠的方式，求出仪器检测样本的最快时间：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">    title 水分检测效率计算</span><br><span class="line">    axisFormat %M-%S</span><br><span class="line">    dateFormat  mm-ss</span><br><span class="line">   </span><br><span class="line">    section 样本1</span><br><span class="line">    开始检测: milestone,SF1-0,0,0s</span><br><span class="line">    样本瓶就位:SF1-1,after SF1-0,10s</span><br><span class="line">    夹取注射器: SF1-2,after SF1-0,10s</span><br><span class="line">    开盖:SF1-3,after SF1-1,10s</span><br><span class="line">    润洗3次注射器: SF1-4,after SF1-2,45s</span><br><span class="line">    抽取样品: SF1-5,after SF1-4,10s</span><br><span class="line">    拧盖:SF1-6,after SF1-5,10s</span><br><span class="line">    称重: SF1-7,after SF1-5,20s</span><br><span class="line">    注入仪器:SF1-8,after SF1-7,20s</span><br><span class="line">    称重: SF1-9,after SF1-8,20s</span><br><span class="line">    注射器放托盘: SF1-10,after SF1-9,10s</span><br><span class="line">    水分检测:SF1-11,after SF1-8,240s</span><br><span class="line"></span><br><span class="line">    section 样本2</span><br><span class="line">    样本瓶就位:SF2-1,after SF1-10,10s</span><br><span class="line">    夹取注射器: SF2-2,after SF1-10,10s</span><br><span class="line">    开盖:SF2-3,after SF2-1,10s</span><br><span class="line">    润洗3次注射器: SF2-4,after SF2-2,45s</span><br><span class="line">    抽取样品: SF2-5,after SF2-4,10s</span><br><span class="line">    拧盖:SF2-6,after SF2-5,10s</span><br><span class="line">    称重: SF2-7,after SF2-5,20s</span><br><span class="line">    注入仪器:SF2-8,after SF2-7,20s</span><br><span class="line">    称重: SF2-9,after SF2-8,20s</span><br><span class="line">    注射器放托盘: SF2-10,after SF2-9,10s</span><br><span class="line">    水分检测:SF2-11,after SF2-8,240s</span><br><span class="line"></span><br><span class="line">    section 样本3</span><br><span class="line">    样本瓶就位:SF3-1,after SF2-10,10s</span><br><span class="line">    夹取注射器: SF3-2,after SF2-10,10s</span><br><span class="line">    开盖:SF3-3,after SF3-1,10s</span><br><span class="line">    润洗3次注射器: SF3-4,after SF3-2,45s</span><br><span class="line">    抽取样品: SF3-5,after SF3-4,10s</span><br><span class="line">    拧盖:SF3-6,after SF3-5,10s</span><br><span class="line">    称重: SF3-7,after SF3-5,20s</span><br><span class="line">    注入仪器:SF3-8,after SF3-7,20s</span><br><span class="line">    称重: SF3-9,after SF3-8,20s</span><br><span class="line">    注射器放托盘: SF3-10,after SF3-9,10s</span><br><span class="line">    水分检测:SF3-11,after SF3-8,240s</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240612214658.png" alt="image.png"></p>
<p>Tips：每个样本检测需要执行的操作都是一样的。第一个样本的代码写完后，后续可以通过查找替换的方式，进行批量替换。例如在样本一中将 <code>SF1-1</code> 第一个 <code>1</code> 替换为 <code>2</code>，即 <code>SF2-1</code>，样本 2 的代码便很快可以修改完毕。</p>
]]></content>
      <tags>
        <tag>image</tag>
        <tag>mermaid</tag>
      </tags>
  </entry>
  <entry>
    <title>Minipage 环境参数</title>
    <url>/posts/Minipage-Environmental-Parameters.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>minipage 环境在 LaTeX 官方入门手册（一份（不太）简短的 LaTeX2ε 介绍 V6.03）中的介绍的较少，和 <code>\parbox</code> 命令一个案例就过去了，其实这样安排是挺好的，毕竟这本书的定位和一些宏包的使用手册是不一样的。对于读者来说，可能看起来很模糊，一个环境带有三个可选参数和一个必选参数，且可选参数中还有两个是涉及到和盒子位置相关的参数，不仔细看难理解。我自己也是看了好久才明白过来，如果能有对比更加鲜明的案例和可视化的图片讲解啥的最好不过了，因此，写下了本文，希望对读者们有用。</p>
<p>需要注意的是先了解 minipage 环境的定位：该环境在入门手册中位于 <code>垂直盒子</code> 这一小节。在以下的案例中，希望读者们将它作为一个盒子看待</p>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{minipage}[位置][高度][内容位置]{宽度}</span><br><span class="line"> 盒子内容</span><br><span class="line"><span class="keyword">\end</span>{minipage}</span><br></pre></td></tr></tbody></table></figure>

<p>minipage 环境带有一个必要参数：宽度，内容超过盒子宽度就会自动换行</p>
<p>以下内容摘自刘海洋编著的《LaTeX 入门》。这里我们只讨论 minipage，而不讨论 <code>\parbox</code> 命令，这两者都是垂直盒子，故经常放在一起进行讲解，请自动忽略有关 <code>\parbox</code> 的内容。</p>
<blockquote>
<p><code>\parbox</code> 和 minipage 环境还可以带三个可选参数，分别表示盒子的基线位置、盒子的高度以及（指定高度后）盒子内容在盒子内的位置。位置参数可以使用 c（居中）、t（顶部）、b（底部），默认为居中。内容位置参数可以使用 c、t、b、s（垂直分散对齐）。其中 s 参数只有有弹性间距时生效。而 t 选项指按第一行的基线对齐，而不是盒子顶端。</p>
</blockquote>
<p>是不是看晕了…</p>
<h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">正文内容正文内容正文内容正文内容正文内容正文内容正文内容正文内容正文内容正文内容</span><br><span class="line"></span><br><span class="line"><span class="keyword">\vspace</span>{2ex}</span><br><span class="line">这里也是正文</span><br><span class="line"><span class="keyword">\begin</span>{minipage}[c][4cm][t]{2em} </span><br><span class="line"> 上下天光</span><br><span class="line"><span class="keyword">\end</span>{minipage}</span><br><span class="line"><span class="keyword">\qquad</span></span><br><span class="line"><span class="keyword">\begin</span>{minipage}[c][4cm][c]{2em} </span><br><span class="line"> 一碧万顷</span><br><span class="line"><span class="keyword">\end</span>{minipage}</span><br><span class="line"><span class="keyword">\qquad</span></span><br><span class="line"><span class="keyword">\begin</span>{minipage}[c][4cm][b]{2em} </span><br><span class="line"> 沙鸥翔集</span><br><span class="line"><span class="keyword">\end</span>{minipage}</span><br><span class="line">这里也是正文</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p>输出如下<br><img data-src="https://s2.loli.net/2022/07/04/cnrlAoYDgZeSiCQ.png" alt="03-minipage参数讲解.png"></p>
<p>标注如下<br><img data-src="https://s2.loli.net/2022/07/04/7ZJbjY3uTmvPUfe.png" alt="05-做好标注的minipage.png"></p>
<h3 id="案例讲解"><a href="#案例讲解" class="headerlink" title="案例讲解"></a>案例讲解</h3><p>配合如上的标注图片，以第一个盒子说明</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{minipage}[t][4cm][t]{2em} </span><br></pre></td></tr></tbody></table></figure>

<p>前两个参数 <code>[t][4cm]</code>：表示盒子的基线（顶线）与盒子当前所处环境的基线（也就是 “这里也是正文” 的基线）之间的距离为 4cm<br>第三个参数 <code>[t]</code>：表示盒子内容在盒子中垂直方向的对齐方式，此处为顶部对齐（2 盒子则为垂直居中对齐，3 盒子为底部对齐）<br>第四个参数 <code>{2em}</code>：表示盒子宽度就 2 个字符宽度，超出则自动换行（“上下天光” 共 4 个字符宽度，故超盒子宽度自动换行）<br>第二、三两个盒子可以对照着盒一的标注进行分析，这里就不在赘述了。</p>
<p>PS：标注图当中是 <code>\qquad</code> 表示水平间距，常见的命令如 <code>\quad</code>，<code>\qquad</code> 相当于两个 <code>\quad</code> 长度</p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>如果在 minipage 里使用 <code>\footnote</code> 命令，生成的脚注会出现在盒子底部，编号是独立的，并且使用小写字母编号。这也是 minipage 环境之被称为 “迷你页”（Mini-page）的原因。</p>
<p><img data-src="https://s2.loli.net/2022/07/04/aqsdZyKLP7ToEDN.png" alt="01-minipage中插入脚注png.png"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>刘海洋：LaTeX 入门</li>
<li> Latex 的官方入门手册：一份（不太）简短的 LaTeX2ε 介绍</li>
</ul>
]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 增删改查案例</title>
    <url>/posts/MyBatis-add-delete-change-and-check-cases.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><ul>
<li>为了开发更加方便推荐安装 MyBatisX 插件</li>
<li>数据库：准备数据库表 tb_brand</li>
<li>pom.xml 文件：已导入 MaBatis 和 MySQL 坐标</li>
<li>已配置好 mybatis-config.xml 配置文件<ul>
<li>设置好了 typeAliases 标签</li>
<li>设置好了数据库的连接信息</li>
</ul>
</li>
<li>实体类：在项目下新建 pojo 软件包，创建 Brand 实体类</li>
<li>测试用类：将主程序写在 test 文件夹的项目包下</li>
</ul>
<p>测试用类及项目结构如下图所示<br><img data-src="https://s2.loli.net/2022/12/11/qemNTEcL6xypfwk.png" alt="01-测试用类及项目结构.png"></p>
<h3 id="MyBatisX-插件"><a href="#MyBatisX-插件" class="headerlink" title="MyBatisX 插件"></a>MyBatisX 插件</h3><p>MyBatisX 是一款基于 IDEA 的快速开发插件，为效率而生</p>
<p>插件的主要功能有：</p>
<ol>
<li>XML 和接口方法相互跳转</li>
<li>根据接口方法生成 statement</li>
</ol>
<p><img data-src="https://s2.loli.net/2022/12/11/XHDGzeAbqBwER7u.png" alt="02-安装MaBatisX插件.png"></p>
<p>安装完重启 IDEA，相应的 xml 文件图标就变成小鸟的图标了<br>红色的小鸟：SQL 的映射文件<br>蓝色的小鸟：Mapper 的接口</p>
<p><img data-src="https://s2.loli.net/2022/12/11/9oNSWvHw2Qeh4Uj.png" alt="03-蓝色小鸟与红色小鸟.png"></p>
<h3 id="查询所有数据"><a href="#查询所有数据" class="headerlink" title="查询所有数据"></a>查询所有数据</h3><h4 id="1、编写接口方法：Mapper-接口"><a href="#1、编写接口方法：Mapper-接口" class="headerlink" title="1、编写接口方法：Mapper 接口"></a>1、编写接口方法：Mapper 接口</h4><ul>
<li>参数：无</li>
<li>返回类型：<code>List&lt;Brand&gt;</code></li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Brand&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2、编写-Mapper-配置文件"><a href="#2、编写-Mapper-配置文件" class="headerlink" title="2、编写 Mapper 配置文件"></a>2、编写 Mapper 配置文件</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--查询标签，id为这条SQL语句的唯一标识，resultType为返回结果类型，不区分大小写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"brand"</span>&gt;</span>  </span><br><span class="line">    select * from tb_brand;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/12/11/iWeNoqLa7ClvmUk.png" alt="04-利用MaBatisx插件自动在配置文件中生成对应标签.png"></p>
<h4 id="3、执行方法，测试"><a href="#3、执行方法，测试" class="headerlink" title="3、执行方法，测试"></a>3、执行方法，测试</h4><p>MaBatis 完成操作只需要三步</p>
<ol>
<li>编写接口方法</li>
<li>编写 SQL</li>
<li> 执行方法</li>
</ol>
<h4 id="查询结果中部分字段显示为-null"><a href="#查询结果中部分字段显示为-null" class="headerlink" title="查询结果中部分字段显示为 null"></a>查询结果中部分字段显示为 null</h4><p>查询出来的结果中，部分字段显示 NULL，为什么呢？</p>
<p><img data-src="https://s2.loli.net/2022/12/11/XRmEskYTrgxpt2h.png" alt="05-部分字段显示为null.png"></p>
<p>因为这些字段，原本在数据库中比如说 <code>brand_name</code>，到了 Java 当中变量名就变成了 <code>brandName</code>（在 POJO 的实体类），<strong>数据库表的字段名称和实体类的属性名称不一样</strong>，所有就不会为我们自动封装了</p>
<h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法 1"></a>解决办法 1</h4><p>在 SQL 查询语句中为相应的字段设置别名，让别名和实体类的属性名一致即可</p>
<p>原来的 SQL 查询</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>"selectAll" resultType<span class="operator">=</span>"brand"<span class="operator">&gt;</span>  </span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_brand;  </span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>修改后的 SQL 查询</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>"selectAll" resultType<span class="operator">=</span>"brand"<span class="operator">&gt;</span>  </span><br><span class="line">    <span class="keyword">select</span> id,brand_name brandName,company_name companyName,ordered,status  </span><br><span class="line">    <span class="keyword">from</span> tb_brand  </span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>但是这样每进行一次查询都需要重新设置一次，而且不能复用</p>
<h4 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法 2"></a>解决办法 2</h4><p>使用 resultMap 标签（最为常用）</p>
<p><img data-src="https://s2.loli.net/2022/12/11/NuRgQdcHexomhAJ.png" alt="06-ResultMap实现字段名和类的属性名一一对应.png"></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"brandResultMap"</span> <span class="attr">type</span>=<span class="string">"brand"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--id标签完成主键的映射,result标签完成非主键的映射--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;id&gt;&lt;/id&gt;--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"brand_name"</span> <span class="attr">property</span>=<span class="string">"brandName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"company_name"</span> <span class="attr">property</span>=<span class="string">"companyName"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultMap</span>=<span class="string">"brandResultMap"</span>&gt;</span></span><br><span class="line"> select</span><br><span class="line"> *</span><br><span class="line"> from tb_brand</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>resultMap 标签中：</p>
<ul>
<li>id：唯一标识</li>
<li> type：映射的类型，支持别名</li>
<li> id 子标签：完成主键字段的映射，具有属性 column 表的列名和 property 实体类的属性，以上代码中并没有演示 id 子标签的使用</li>
<li> result 子标签：完成一半字段的映射，具有属性 column 表的列名和 property 实体类的属性</li>
</ul>
<p>注意：select 标签中原先的 <code>resultType="brand"</code> 改为了 <code>resultMap="brandResultMap"</code>，因为在 resultMap 标签中 <code>type</code> 属性也定义了类型</p>
<h3 id="根据-id-查询数据"><a href="#根据-id-查询数据" class="headerlink" title="根据 id 查询数据"></a>根据 id 查询数据</h3><h4 id="1、编写接口方法：Mapper-接口-1"><a href="#1、编写接口方法：Mapper-接口-1" class="headerlink" title="1、编写接口方法：Mapper 接口"></a>1、编写接口方法：Mapper 接口</h4><ul>
<li>参数：id</li>
<li> 返回类型：Brand 类 </li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//传入一个id，最终返回一个Brand类型</span></span><br><span class="line"><span class="function">Brand <span class="title">selectById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2、编写-SQL-语句"><a href="#2、编写-SQL-语句" class="headerlink" title="2、编写 SQL 语句"></a>2、编写 SQL 语句</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>"selectById" resultMap<span class="operator">=</span>"brandResultMap" <span class="operator">&gt;</span></span><br><span class="line"> <span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"> <span class="keyword">from</span> tb_brand</span><br><span class="line"> <span class="keyword">where</span> id <span class="operator">=</span> #{id};</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="3、执行方法，测试-1"><a href="#3、执行方法，测试-1" class="headerlink" title="3、执行方法，测试"></a>3、执行方法，测试</h4><p>只需要修改执行方法这一部分代码，其他地方不需要改动</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//4.执行方法  </span></span><br><span class="line"><span class="keyword">int</span> id = <span class="number">1</span>;  </span><br><span class="line">Brand brand = brandMapper.selectById(id); <span class="comment">//返回一个brand对象  </span></span><br><span class="line">System.out.println(brand);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="条件查询-多条件查询"><a href="#条件查询-多条件查询" class="headerlink" title="条件查询 - 多条件查询"></a>条件查询 - 多条件查询</h3><h4 id="1、编写接口方法：Mapper-接口-2"><a href="#1、编写接口方法：Mapper-接口-2" class="headerlink" title="1、编写接口方法：Mapper 接口"></a>1、编写接口方法：Mapper 接口</h4><ul>
<li>参数：所有查询条件</li>
<li>返回类型：<code>List&lt;Brand&gt;</code></li>
</ul>
<h4 id="2、编写-SQL-语句-1"><a href="#2、编写-SQL-语句-1" class="headerlink" title="2、编写 SQL 语句"></a>2、编写 SQL 语句</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>"selectByCondition" resultMap<span class="operator">=</span>"brandResultMap"<span class="operator">&gt;</span></span><br><span class="line"> <span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"> <span class="keyword">from</span> tb_brand</span><br><span class="line"> <span class="keyword">where</span> status <span class="operator">=</span> #{status}</span><br><span class="line"> <span class="keyword">and</span> company_name <span class="keyword">like</span> #{companyName}</span><br><span class="line"> <span class="keyword">and</span> brand_name <span class="keyword">like</span> #{brandName};</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>注意：以上代码中需输入三个参数才能查出结果，如果某一个参数没有填写就查询不出来，因此需要 SQL 语句动态变化（SQL 语句会随着用户的输入或外部条件的变化而变化）</p>
<p>解决方案 1：在 where 后面添加一个恒等式，然后所有的判断条件语句中都可以加上 <code>and</code> 这个关键词</p>
<figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  </span><br><span class="line"><span class="keyword">from</span> tb_brand  </span><br><span class="line"><span class="keyword">where</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span>  </span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>"status!=null"<span class="operator">&gt;</span>  </span><br><span class="line">    <span class="keyword">and</span> status <span class="operator">=</span> #{status}  </span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span>  </span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>"companyName!=null and companyName!='' "<span class="operator">&gt;</span>  </span><br><span class="line">    <span class="keyword">and</span> company_name <span class="keyword">like</span> #{companyName}  </span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span>  </span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>"brandName!=null and brandName!='' "<span class="operator">&gt;</span>  </span><br><span class="line">    <span class="keyword">and</span> brand_name <span class="keyword">like</span> #{brandName}  </span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>解决方案 2：利用 MaBatis 提供的 where 标签</p>
<p>这样的话，就不需要管到底用户传递了几个参数过来，会动态判断是否需要添加 <code>and</code> 关键字</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;where&gt;  </span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"status!=null"</span>&gt;  </span><br><span class="line">        and status = #{status}  </span><br><span class="line">    &lt;/<span class="keyword">if</span>&gt;  </span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"companyName!=null and companyName!='' "</span>&gt;  </span><br><span class="line">        and company_name like #{companyName}  </span><br><span class="line">    &lt;/<span class="keyword">if</span>&gt;  </span><br><span class="line">    &lt;<span class="keyword">if</span> test=<span class="string">"brandName!=null and brandName!='' "</span>&gt;  </span><br><span class="line">        and brand_name like #{brandName}  </span><br><span class="line">    &lt;/<span class="keyword">if</span>&gt;  </span><br><span class="line">&lt;/where&gt;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="3、执行方法"><a href="#3、执行方法" class="headerlink" title="3、执行方法"></a>3、执行方法</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//执行方法</span></span><br><span class="line">List&lt;Brand&gt; brands = brandMapper.selectByCondition(brand);<span class="comment">//传入一个brand对象  </span></span><br><span class="line">System.out.println(brands);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="三种接收参数的格式"><a href="#三种接收参数的格式" class="headerlink" title="三种接收参数的格式"></a>三种接收参数的格式</h3><h4 id="1-散装参数格式"><a href="#1-散装参数格式" class="headerlink" title="1. 散装参数格式"></a>1. 散装参数格式</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//1.散装参数的格式，需要使用@Param("SQL参数占位符名称")  </span></span><br><span class="line"><span class="function">List&lt;Brand&gt; <span class="title">selectByCondition</span><span class="params">(<span class="meta">@Param("status")</span> <span class="keyword">int</span> status, <span class="meta">@Param("companyName")</span> String companyName, <span class="meta">@Param("brandName")</span> String brandName)</span></span>;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2-对象参数"><a href="#2-对象参数" class="headerlink" title="2. 对象参数"></a>2. 对象参数</h4><p>对象的属性名称要和参数占位符一致</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Brand&gt; <span class="title">selectByCondition</span><span class="params">(Brand brand)</span></span>;</span><br></pre></td></tr></tbody></table></figure>

<p>注意：对于对象参数，在处理参数的时候，需要有封装对象的处理</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//接收参数  </span></span><br><span class="line"><span class="keyword">int</span> status = <span class="number">1</span>;  </span><br><span class="line">String companyName = <span class="string">"华为"</span>;  </span><br><span class="line">String brandName = <span class="string">"华为"</span>;  </span><br><span class="line"><span class="comment">//封装对象  </span></span><br><span class="line">Brand brand = <span class="keyword">new</span> Brand();  </span><br><span class="line">brand.setStatus(status);  </span><br><span class="line">brand.setBrandName(brandName);  </span><br><span class="line">brand.setCompanyName(companyName);</span><br></pre></td></tr></tbody></table></figure>

<h4 id="三、Map-对象格式"><a href="#三、Map-对象格式" class="headerlink" title="三、Map 对象格式"></a>三、Map 对象格式</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//接收参数  </span></span><br><span class="line"><span class="keyword">int</span> status = <span class="number">1</span>;  </span><br><span class="line">String companyName = <span class="string">"华为"</span>;  </span><br><span class="line">String brandName = <span class="string">"华为"</span>;  </span><br><span class="line"><span class="comment">//处理参数，用作模糊匹配  </span></span><br><span class="line">companyName = <span class="string">"%"</span> + companyName + <span class="string">"%"</span>;  </span><br><span class="line">brandName = <span class="string">"%"</span> + brandName + <span class="string">"%"</span>;  </span><br><span class="line"><span class="comment">//map对象  </span></span><br><span class="line">Map map = <span class="keyword">new</span> HashMap();  </span><br><span class="line">map.put(<span class="string">"status"</span>,status);  </span><br><span class="line">map.put(<span class="string">"companyName"</span>,companyName);  </span><br><span class="line">map.put(<span class="string">"brandName"</span>,brandName);</span><br></pre></td></tr></tbody></table></figure>

<p>MaBatis 对动态 SQL 有很强大的支撑</p>
<ul>
<li>if</li>
<li>choose(when,otherwise)</li>
<li>trim(where,set)</li>
<li>foreach</li>
</ul>
<h3 id="条件查询-多个条件中选择一个"><a href="#条件查询-多个条件中选择一个" class="headerlink" title="条件查询 - 多个条件中选择一个"></a>条件查询 - 多个条件中选择一个</h3><p>多个条件中选择一个，如下图片所示的下拉选项一样<br><img data-src="https://s2.loli.net/2022/12/11/ilwT9byce35Zsmq.png" alt="07-下拉菜单（多选一）.png"></p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单条件查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByConditionSingle"</span> <span class="attr">resultMap</span>=<span class="string">"brandResultMap"</span>&gt;</span></span><br><span class="line"> select *</span><br><span class="line"> from tb_brand</span><br><span class="line"> where</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span><span class="comment">&lt;!--相当于switch--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"status!=null"</span>&gt;</span><span class="comment">&lt;!--相当于case--&gt;</span></span><br><span class="line">    status = #{status}</span><br><span class="line">   <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"companyName!=null and companyName!=''"</span>&gt;</span></span><br><span class="line">    company_name like #{companyName}</span><br><span class="line">   <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"brandName!=null and brandName!='' "</span>&gt;</span></span><br><span class="line">    and brand_name like #{brandName}</span><br><span class="line">   <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>对于如上代码，当给定一个值时好说，但是如果一个值都没有给的话，此时就需要一个保底的方案，不然 SQL 会报语法错误。</p>
<p>那么我们可以使用 <code>&lt;otherwise&gt;</code> 标签，标签中边放一个恒定值，那么当用户给了一个参数之后，就不会执行 otherwise 中的内容，如果没有给参数的话，恒等式派上用场</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span><span class="comment">&lt;!--相当于switch--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"status!=null"</span>&gt;</span><span class="comment">&lt;!--相当于case--&gt;</span></span><br><span class="line">  status = #{status}</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"companyName!=null and companyName!=''"</span>&gt;</span></span><br><span class="line">  company_name like #{companyName}</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"brandName!=null and brandName!='' "</span>&gt;</span></span><br><span class="line">  and brand_name like #{brandName}</span><br><span class="line"> <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span><span class="comment">&lt;!--相当于default--&gt;</span></span><br><span class="line">  1 = 1</span><br><span class="line"> <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>那么更进一步，可以和前面的 where 标签结合起来，就不需要使用到 otherwise 标签了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;where&gt;  </span><br><span class="line">    &lt;choose&gt;&lt;!--相当于<span class="keyword">switch</span>--&gt;  </span><br><span class="line">        &lt;when test=<span class="string">"status!=null"</span>&gt;&lt;!--相当于<span class="keyword">case</span>--&gt;  </span><br><span class="line">            status = #{status}  </span><br><span class="line">        &lt;/when&gt;  </span><br><span class="line">        &lt;when test=<span class="string">"companyName!=null and companyName!=''"</span>&gt;  </span><br><span class="line">            company_name like #{companyName}  </span><br><span class="line">        &lt;/when&gt;  </span><br><span class="line">        &lt;when test=<span class="string">"brandName!=null and brandName!='' "</span>&gt;  </span><br><span class="line">            and brand_name like #{brandName}  </span><br><span class="line">        &lt;/when&gt;  </span><br><span class="line">    &lt;/choose&gt;</span><br><span class="line">&lt;/where&gt;</span><br></pre></td></tr></tbody></table></figure>

<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><h4 id="1、编写接口方法：Mapper-接口-3"><a href="#1、编写接口方法：Mapper-接口-3" class="headerlink" title="1、编写接口方法：Mapper 接口"></a>1、编写接口方法：Mapper 接口</h4><ul>
<li>参数：除了 id 主键之外的所有参数</li>
<li>结果：void</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Brand brand)</span></span>;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2、编写-SQL-语句-2"><a href="#2、编写-SQL-语句-2" class="headerlink" title="2、编写 SQL 语句"></a>2、编写 SQL 语句</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--添加功能--&gt;  </span></span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">insert</span> id<span class="operator">=</span>"add"<span class="operator">&gt;</span>  </span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> tb_brand (brand_name, company_name, ordered, description, status)  </span><br><span class="line">    <span class="keyword">values</span>(#{brandName},#{companyName},#{ordered},#{description},#{status})<span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">insert</span><span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="3、执行方法-1"><a href="#3、执行方法-1" class="headerlink" title="3、执行方法"></a>3、执行方法</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//4.执行方法  </span></span><br><span class="line">brandMapper.add(brand);  </span><br><span class="line"><span class="comment">//提交事务  </span></span><br><span class="line">sqlSession.commit();</span><br></pre></td></tr></tbody></table></figure>

<p>在没有手动提交事务以前，虽然没有报错，但是查看数据库，并没有添加数据，原来是 <code>autocommit</code> 设置成了 false，所以需要我们手动提交一下<br>![[Pasted image 20221203151443.png]]</p>
<p>注：那么每次都需要手动提交事务，那不是挺麻烦。可以在获取 sqlSession 对象的时候就设置好自动提交事务</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/12/11/XctrTZGqyifRAn6.png" alt="08-对数据库进行了修改操作后需要手动提交事务.png"></p>
<p>MaBatis 事务</p>
<ul>
<li>openSession ()：默认开启事务，进行增删改操作后需要使用 sqlSession.commit () 手动提交事务</li>
<li> openSession (true)：可以设置为自动提交事务（即关闭事务）</li>
</ul>
<h3 id="添加数据并主键返回"><a href="#添加数据并主键返回" class="headerlink" title="添加数据并主键返回"></a>添加数据并主键返回</h3><p>在数据添加成功后，需要获取插入数据库数据的主键的值</p>
<p>通过之前的添加方法，实际上是已经添加了一条数据，但是这个新添加的数据的 id 并没有绑定在这个新添加的对象上，所以 <code>brand.getId()</code> 返回的是一个 null</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//4.执行方法  </span></span><br><span class="line">brandMapper.add(brand);  </span><br><span class="line">Integer id = brand.getId();  </span><br><span class="line">System.out.println(id);</span><br></pre></td></tr></tbody></table></figure>

<p>那么如何在添加数据的时候，将主键值和这个新添加的对象绑定在一起呢？</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加功能并主键返回--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span>  </span><br><span class="line">    insert into tb_brand (brand_name, company_name, ordered, description, status)  </span><br><span class="line">    values(#{brandName},#{companyName},#{ordered},#{description},#{status})<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>在 insert 标签中添加两个属性 <code>useGeneratedKeys="true"</code> 和 <code>keyProperty="id"</code></p>
<h3 id="修改-修改全部字段"><a href="#修改-修改全部字段" class="headerlink" title="修改 - 修改全部字段"></a>修改 - 修改全部字段</h3><h4 id="1、编写接口方法：Mapper-接口-4"><a href="#1、编写接口方法：Mapper-接口-4" class="headerlink" title="1、编写接口方法：Mapper 接口"></a>1、编写接口方法：Mapper 接口</h4><ul>
<li>参数：所有数据</li>
<li>返回类型：void</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Brand brand)</span></span>; <span class="comment">//不返回结果值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Brand brand)</span></span>; <span class="comment">//返回影响的行数</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="2、编写-SQL-语句-3"><a href="#2、编写-SQL-语句-3" class="headerlink" title="2、编写 SQL 语句"></a>2、编写 SQL 语句</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="operator">!</span><span class="comment">--修改功能--&gt;</span></span><br><span class="line"><span class="operator">&lt;</span>update id<span class="operator">=</span>"update"<span class="operator">&gt;</span></span><br><span class="line"> update tb_brand</span><br><span class="line"> <span class="keyword">set</span> brand_name <span class="operator">=</span> #{brandName},</span><br><span class="line">  company_name <span class="operator">=</span> #{companyName},</span><br><span class="line">  ordered <span class="operator">=</span> #{ordered},</span><br><span class="line">  status <span class="operator">=</span> #{status},</span><br><span class="line">  description <span class="operator">=</span> #{description}</span><br><span class="line"> <span class="keyword">where</span> id <span class="operator">=</span> #{id};</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>update<span class="operator">&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="3、执行方法-2"><a href="#3、执行方法-2" class="headerlink" title="3、执行方法"></a>3、执行方法</h4><p>需要在传入参数的时候把 id 也传进去，然后封装对象的时候，也 brand.setid (id)</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//4.执行方法  </span></span><br><span class="line"><span class="keyword">int</span> count = brandMapper.update(brand);  <span class="comment">//返回影响的行数</span></span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></tbody></table></figure>

<p>会存在一个问题，当我们之传入了某几个参数之后，另外几个没有传参，那么运行的话，就会把没有传参的字段赋值为 NULL</p>
<h3 id="修改-动态修改字段"><a href="#修改-动态修改字段" class="headerlink" title="修改 - 动态修改字段"></a>修改 - 动态修改字段</h3><p>比如设置新密码，此时账号就不需要修改，而是只需要修改某几个数据，那么就需要使用到动态 SQL</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--修改动态字段--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update2"</span>&gt;</span>  </span><br><span class="line">    update tb_brand  </span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"brandName!=null and brandName!='' "</span>&gt;</span>  </span><br><span class="line">            brand_name = #{brandName},  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"companyName!=null and companyName!='' "</span>&gt;</span>  </span><br><span class="line">            company_name = #{companyName},  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description!=null and description!='' "</span>&gt;</span>  </span><br><span class="line">            description = #{description},  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ordered!=null"</span>&gt;</span>  </span><br><span class="line">            ordered = #{ordered},  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"status!=null"</span>&gt;</span>  </span><br><span class="line">            status = #{status}  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span>  </span><br><span class="line">    where id=#{id};  </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>那么此时，我们可以之修改某几个参数，另外几个参数没有修改的话，也不会被 NULL 值覆盖了</p>
<h3 id="删除一个"><a href="#删除一个" class="headerlink" title="删除一个"></a>删除一个</h3><h4 id="1、编写接口方法：Mapper-接口-5"><a href="#1、编写接口方法：Mapper-接口-5" class="headerlink" title="1、编写接口方法：Mapper 接口"></a>1、编写接口方法：Mapper 接口</h4><ul>
<li>参数：id</li>
<li> 返回类型：void</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2、编写-SQL-语句-4"><a href="#2、编写-SQL-语句-4" class="headerlink" title="2、编写 SQL 语句"></a>2、编写 SQL 语句</h4><figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteById"</span>&gt;</span>  </span><br><span class="line">    delete from tb_brand where id = #{id};  </span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="3、执行方法-3"><a href="#3、执行方法-3" class="headerlink" title="3、执行方法"></a>3、执行方法</h4><p>传递参数的时候只要将 id 传进来就可以了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//4.执行方法  </span></span><br><span class="line">brandMapper.deleteById(id);</span><br></pre></td></tr></tbody></table></figure>

<h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><h4 id="1、编写接口方法：Mapper-接口-6"><a href="#1、编写接口方法：Mapper-接口-6" class="headerlink" title="1、编写接口方法：Mapper 接口"></a>1、编写接口方法：Mapper 接口</h4><ul>
<li>参数：id 数组</li>
<li>返回类型：void</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteByIds</span><span class="params">(<span class="meta">@Param("ids")</span> <span class="keyword">int</span>[] ids)</span></span>;</span><br></pre></td></tr></tbody></table></figure>

<p>如果没有加注解的话，就报了下面的错误</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Parameter <span class="string">'ids'</span> not found. Available parameters are [array, arg0]</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2、编写-SQL-语句-5"><a href="#2、编写-SQL-语句-5" class="headerlink" title="2、编写 SQL 语句"></a>2、编写 SQL 语句</h4><p>占位符的个数需要根据删除的个数进行变化，也就是需要遍历这个数组，MyBatis 中提供了相应的标签 <code>&lt;foreach&gt;</code>，可以用来遍历数组</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MaBatis会将数组参数封装为一个Map集合，默认情况下</span></span><br><span class="line"><span class="comment">	key为array</span></span><br><span class="line"><span class="comment">	value为数组</span></span><br><span class="line"><span class="comment">	但是通过使用@param注解之后，使用ids已经替换了默认的array，因此collection="ids"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByIds"</span>&gt;</span></span><br><span class="line"> delete from tb_brand</span><br><span class="line"> where id in (</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">   #{id}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>以上 SQL 语句仍然有问题，当有多个 id 时，就变成了如下</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;foreach collection=<span class="string">"ids"</span> item=<span class="string">"id"</span>&gt;</span><br><span class="line"> #{id} #{id} #{id} </span><br><span class="line">&lt;/foreach&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>占位符之间少了逗号分隔符，因此还需要在 foreach 标签中添加属性</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MaBatis会将数组参数封装为一个Map集合，默认情况下</span></span><br><span class="line"><span class="comment">	key为array</span></span><br><span class="line"><span class="comment">	value为数组</span></span><br><span class="line"><span class="comment">	但是通过使用@param注解之后，使用ids已经替换了默认的array，因此collection="ids"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByIds"</span>&gt;</span></span><br><span class="line"> delete from tb_brand</span><br><span class="line"> where id in (</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">   #{id}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="3、执行方法-4"><a href="#3、执行方法-4" class="headerlink" title="3、执行方法"></a>3、执行方法</h4><p>传入一个 ids 数组</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//4.执行方法  </span></span><br><span class="line">brandMapper.deleteByIds(ids);</span><br></pre></td></tr></tbody></table></figure>

<h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><p>如下代码可以正常执行功能，但是 foreach 标签包裹在小括号中，可不可以去掉外边的小括号呢？</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MaBatis会将数组参数封装为一个Map集合，默认情况下</span></span><br><span class="line"><span class="comment">	key为array</span></span><br><span class="line"><span class="comment">	value为数组</span></span><br><span class="line"><span class="comment">	但是通过使用@param注解之后，使用ids已经替换了默认的array，因此collection="ids"</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByIds"</span>&gt;</span></span><br><span class="line"> delete from tb_brand</span><br><span class="line"> where id in (</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">   #{id}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>改为如下代码，即在 foreach 标签中添加 open 和 close 属性</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByIds"</span>&gt;</span></span><br><span class="line"> delete from tb_brand</span><br><span class="line"> where id in </span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">   #{id}</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<hr>
<h3 id="MyBatis-参数传递"><a href="#MyBatis-参数传递" class="headerlink" title="MyBatis 参数传递"></a>MyBatis 参数传递</h3><p>MyBatis 接口方法中可以接收各种各样的参数，MyBatis 底层对于这些参数进行不同的封装处理方式。扩展阅读：<a href="https://blog.csdn.net/DoUUnderstand/article/details/78466203">Mybatis @Param 注解的作用_DoUUnderstand 的博客 - CSDN 博客</a></p>
<ul>
<li>单个参数<ul>
<li> POJO 类型：直接使用，属性名和参数占位符名称一致</li>
<li> Map 集合：直接使用，键名和参数占位符名称一致</li>
<li> Collection：封装为 Map 集合<ul>
<li> map.put (“arg0”,collection 集合)</li>
<li>map.put (“collection”,collection 集合)</li>
</ul>
</li>
<li>List：封装成 Map 集合<ul>
<li> map.put (“arg0”,list 集合)</li>
<li>map.put (“collection”,list 集合)</li>
<li>map.put (“list”,list 集合)</li>
</ul>
</li>
<li>Array：封装成 Map 集合<ul>
<li> map.put (“arg0”, 数组)</li>
<li>map.put (“array”, 数组)</li>
</ul>
</li>
<li> 其他类型：直接使用</li>
</ul>
</li>
<li>多个参数<ul>
<li>比如查询时的散装参数</li>
</ul>
</li>
</ul>
<p>总之，当有多个参数时，不要使用 Map 集合中的默认键名，使用 <code>@Param</code> 注解的方式来替换默认的键名</p>
<p>Map 集合中默认的键名如下</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">map.put(<span class="string">"arg0"</span>,参数值<span class="number">1</span>)</span><br><span class="line">map.put(<span class="string">"param1"</span>,参数值<span class="number">2</span>)</span><br><span class="line">map.put(<span class="string">"arg1"</span>,参数值<span class="number">1</span>)</span><br><span class="line">map.put(<span class="string">"param2"</span>,参数值<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure>

<p>设置好 <code>@Param</code> 注解之后呢，会将新的键名覆盖掉默认的 arg0、arg1 键名，可读性更强</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Brand&gt; <span class="title">selectByCondition</span><span class="params">(<span class="meta">@Param("status")</span> <span class="keyword">int</span> status, <span class="meta">@Param("companyName")</span> String companyName)</span></span>;</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加@Param前--&gt;</span></span><br><span class="line">select *</span><br><span class="line">from ...</span><br><span class="line">where status = #{arg0}</span><br><span class="line">and company_name = #{arg1} </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--添加@Param后--&gt;</span></span><br><span class="line">select *</span><br><span class="line">from ...</span><br><span class="line">where status = #{status}</span><br><span class="line">and company_name = #{companyName} </span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 简明笔记</title>
    <url>/posts/MyBatis-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="什么是-MyBatis"><a href="#什么是-MyBatis" class="headerlink" title="什么是 MyBatis"></a>什么是 MyBatis</h2><ul>
<li>MyBatis 是一款优秀的 <strong>持久层框架</strong>，用于简化 JDBC 开发</li>
</ul>
<p>持久层</p>
<ul>
<li>负责将数据保存到数据库的那一层代码</li>
<li> JavaEE 三层结构：表现层（页面展示）、业务层（逻辑处理）、持久层（数据库相关）</li>
</ul>
<p>框架</p>
<ul>
<li>框架是一个 <strong>半成品</strong> 软件，是一套可重用的、通用的、软件基础代码模型</li>
<li>在框架的基础之上构建编写更加高效、规范、通用、可扩展</li>
</ul>
<h2 id="为什么-MyBatis"><a href="#为什么-MyBatis" class="headerlink" title="为什么 MyBatis"></a>为什么 MyBatis</h2><h3 id="JDBC-缺点"><a href="#JDBC-缺点" class="headerlink" title="JDBC 缺点"></a>JDBC 缺点</h3><ol>
<li>硬编码问题</li>
</ol>
<p>比如注册驱动，获取连接对象时，需要通过变量接收这些字符串，都是写死在代码中的，但是后期可能会对这些字符串进行修改</p>
<ol start="2">
<li>操作繁琐</li>
</ol>
<p>对于处理对象中的问号占位符，手动封装结果集，都需要手动设置参数，操作繁琐</p>
<h3 id="MyBatis-简化"><a href="#MyBatis-简化" class="headerlink" title="MyBatis 简化"></a>MyBatis 简化</h3><ol>
<li>硬编码问题 ⇒ 通过配置文件解决</li>
</ol>
<p>比如字符串硬编码问题，将字符串写到 <code>mybatis-config.xml</code> 文件中；将 mysql 语句写到 <code>UserMapper.xml</code> 文件中</p>
<ol start="2">
<li>操作繁琐 ⇒ 自动完成</li>
</ol>
<p>MaBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作</p>
<h2 id="MyBatis-快速入门"><a href="#MyBatis-快速入门" class="headerlink" title="MyBatis 快速入门"></a>MyBatis 快速入门</h2><h3 id="案例-1：查询-user-表中的所有数据"><a href="#案例-1：查询-user-表中的所有数据" class="headerlink" title="案例 1：查询 user 表中的所有数据"></a>案例 1：查询 user 表中的所有数据</h3><ol>
<li>创建 user 表，添加数据</li>
<li>创建模块，导入坐标</li>
<li>创建 MyBatis 核心配置文件⇒替换连接信息，解决硬编码问题</li>
<li>创建 SQL 映射文件⇒统一管理 SQL 语句，解决硬编码问题<ol>
<li>在项目下新建 mapper 包，创建 UserMapper 接口</li>
<li>在 resources 资源文件夹下，创建 UserMapper.xml 配置文件</li>
</ol>
</li>
<li> Demo 主程序<ol>
<li>定义 POJO 类</li>
<li>加载核心配置文件，获取 SqlSessionFactory 对象</li>
<li>获取 SqlSession 对象，执行 SQL 语句</li>
<li>释放资源</li>
</ol>
</li>
</ol>
<h4 id="1、创建-user-表，添加数据"><a href="#1、创建-user-表，添加数据" class="headerlink" title="1、创建 user 表，添加数据"></a>1、创建 user 表，添加数据</h4><figure class="highlight sql"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database mybatis;</span><br><span class="line">use mybatis;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_user;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line"> id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line"> username <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"> password <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"> gender <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line"> addr <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'zhangsan'</span>, <span class="string">'123'</span>, <span class="string">'男'</span>, <span class="string">'北京'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'李四'</span>, <span class="string">'234'</span>, <span class="string">'女'</span>, <span class="string">'天津'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_user <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'王五'</span>, <span class="string">'11'</span>, <span class="string">'男'</span>, <span class="string">'西安'</span>);</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2、创建模块，导入坐标"><a href="#2、创建模块，导入坐标" class="headerlink" title="2、创建模块，导入坐标"></a>2、创建模块，导入坐标</h4><ol>
<li>新建空项目</li>
<li>点击项目结构，模块，新建模块，选择 Maven 项目</li>
<li>在 pom.xml 文件中导入如下坐标 </li>
</ol>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--加载mysql驱动--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="3、创建-MyBatis-核心配置文件"><a href="#3、创建-MyBatis-核心配置文件" class="headerlink" title="3、创建 MyBatis 核心配置文件"></a>3、创建 MyBatis 核心配置文件</h4><ol>
<li>在 resources 文件下新建 <code>mybatis-config.xml</code> 文件，将以下内容粘贴到 xml 文件中。注：代码模板可从 <a href="https://mybatis.org/mybatis-3/zh/getting-started.html#%E4%BB%8E-xml-%E4%B8%AD%E6%9E%84%E5%BB%BA-sqlsessionfactory">mybatis 官方入门</a> 复制</li>
</ol>
<p>注意修改数据库的连接信息</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"https://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库的连接信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver "</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///mybatis?useSSL=false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--加载sql映射文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="4、创建-SQL-映射文件及接口"><a href="#4、创建-SQL-映射文件及接口" class="headerlink" title="4、创建 SQL 映射文件及接口"></a>4、创建 SQL 映射文件及接口</h4><ol>
<li>在 mapper 包下新建 UserMapper 接口 </li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>{</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//User selectById(int id);</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>在 resources 文件夹下，新建 UserMapper.xml 配置文件 </li>
</ol>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"https://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    namespace：名称空间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询标签，id为这条SQL语句的唯一标识，resultType为返回结果类（POJO类）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"com.itheima.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>注：此处的代码模板也可以官方的实例模板中粘贴：<a href="https://mybatis.org/mybatis-3/zh/getting-started.html#%E4%BB%8E-xml-%E4%B8%AD%E6%9E%84%E5%BB%BA-sqlsessionfactory">探究已映射的 SQL 语句</a></p>
<h4 id="5、Demo-主程序"><a href="#5、Demo-主程序" class="headerlink" title="5、Demo 主程序"></a>5、Demo 主程序</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//1.加载mybatis的核心配置文件，获取SqlSessionFactory</span></span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取SqlSession对象，用它来执行SQL</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.执行SQl语句,名称空间.ID,返回list集合</span></span><br><span class="line">        List&lt;User&gt; users = sqlSession.selectList(<span class="string">"test.selectAll"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(users);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian2Anki</title>
    <url>/posts/Obsidian-to-Anki.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://github.com/Pseudonium/Obsidian_to_Anki">GitHub - Pseudonium/Obsidian_to_Anki: Script to add flashcards from text/markdown files to Anki</a></li>
<li><a href="https://www.bilibili.com/video/BV1i5411P7wc/?spm_id_from=333.337.search-card.all.click&amp;vd_source=3ae7ae95fa254383ab9ae83f75abd29d">快速制作 anki 卡片 | 笔记神器 Obsidian 完全指南_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/read/cv10387577">用 Obisidian 制作 Anki 里面用的代码 - 哔哩哔哩</a></li>
<li><a href="https://www.youtube.com/watch?v=PXyv6pnVGhA">How To Sync Obsidian With Anki Automatically / Plugin Walkthrough - YouTube</a></li>
</ul>
<iframe width="560" height="315" src="https://www.youtube.com/embed/PXyv6pnVGhA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen=""></iframe>

<h3 id="Obsidian-to-Anki-插件教程"><a href="#Obsidian-to-Anki-插件教程" class="headerlink" title="Obsidian_to_Anki 插件教程"></a>Obsidian_to_Anki 插件教程</h3><p>对 Anki 进行设置：工具 —&gt; 插件 —&gt; 设置 AnkiConnect 插件</p>
<h4 id="Anki-插件设置"><a href="#Anki-插件设置" class="headerlink" title="Anki 插件设置"></a>Anki 插件设置</h4><figure class="highlight diff"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    "apiKey": null,</span><br><span class="line">    "apiLogPath": null,</span><br><span class="line">    "webBindAddress": "127.0.0.1",</span><br><span class="line">    "webBindPort": 8765,</span><br><span class="line">    "webCorsOrigin": "http://localhost",</span><br><span class="line">    "webCorsOriginList": [</span><br><span class="line">        "http://localhost",</span><br><span class="line"><span class="addition">+       "app://obsidian.md"</span></span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>修改完之后如下：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">    "apiKey": null,</span><br><span class="line">    "apiLogPath": null,</span><br><span class="line">    "webBindAddress": "127.0.0.1",</span><br><span class="line">    "webBindPort": 8765,</span><br><span class="line">    "webCorsOrigin": "http://localhost",</span><br><span class="line">    "webCorsOriginList": [</span><br><span class="line">        "http://localhost",</span><br><span class="line">        "app://obsidian.md"</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Ob-笔记设置"><a href="#Ob-笔记设置" class="headerlink" title="Ob 笔记设置"></a>Ob 笔记设置</h4><p>安装 Obsidian 插件：Export to Anki</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/20240428091654.webp"></p>
<p>笔记开头声明牌组：<code>TARGET DECK: Test</code></p>
<ul>
<li>Test 表示对应 Anki 中的目标牌组名</li>
<li>卡片笔记的书写格式请参考：<a href="https://github.com/Pseudonium/Obsidian_to_Anki/wiki/Neuracache-flashcard-style">Neuracache flashcard style · Pseudonium/Obsidian_to_Anki Wiki · GitHub</a>，或者继续阅读下文</li>
</ul>
<h3 id="普通卡-Neuracache"><a href="#普通卡-Neuracache" class="headerlink" title="普通卡 Neuracache"></a>普通卡 Neuracache</h3><p>正则表达式：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">((?:[^\n][\n]?)+)&nbsp;#flashcard&nbsp;?\n*((?:\n(?:^.{1,3}$|^.{4}(?&lt;!&lt;!--).*))+)</span><br></pre></td></tr></tbody></table></figure>

<p>参考资料：<a href="https://github.com/Pseudonium/Obsidian_to_Anki/wiki/Neuracache-flashcard-style">Neuracache flashcard style · Pseudonium/Obsidian_to_Anki Wiki · GitHub</a></p>
<p>卡片语法示例</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">TARGET DECK: Test</span><br><span class="line"></span><br><span class="line">卡片正面内容&nbsp;#flashcard</span><br><span class="line">卡片背面内容</span><br></pre></td></tr></tbody></table></figure>

<p>如下，若添加进 Anki 成功的话，会自动在卡片的下方添加上一个 html 注释</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">TARGET DECK: Test</span><br><span class="line"></span><br><span class="line">卡片正面内容&nbsp;#flashcard</span><br><span class="line">卡片背面内容</span><br><span class="line">&lt;!--ID: 1691487007086--&gt;</span><br></pre></td></tr></tbody></table></figure>

<p>如果想要清除 Anki 中的卡片，在 ID 上一行添加 <code>DELETE</code></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">这是卡片正面 #flashcard</span><br><span class="line">this is the back of the card</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>DELETE 需要大写，同步之后，Anki 中对应的卡片就被自动删除了，Ob 中的笔记还在，只是将这条笔记下方的 ID 被删除了（也就是说下次同步时，还会自动往 Anki 中添加这条笔记）</li>
<li>如果 Anki 中删除了笔记，而 Ob 中没有删除的话，那么同步 Ob 时，也不会往 Anki 中添加卡片了，因为这条笔记下面的 ID 还没有被删除</li>
</ul>
<h3 id="挖空卡-Cloze"><a href="#挖空卡-Cloze" class="headerlink" title="挖空卡 Cloze"></a>挖空卡 Cloze</h3><p>正则表达式：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">((?:.+\n)*(?:.*{.*)(?:\n(?:^.{1,3}$|^.{4}(?&lt;!&lt;!--).*))*)</span><br></pre></td></tr></tbody></table></figure>

<p>参考资料：<a href="https://github.com/Pseudonium/Obsidian_to_Anki/wiki/Cloze-Paragraph-style">Cloze Paragraph style · Pseudonium/Obsidian_to_Anki Wiki · GitHub</a></p>
<p>注意：将正则表达式粘贴到 Cloze 类型的模板当中</p>
<h3 id="高亮挖空卡"><a href="#高亮挖空卡" class="headerlink" title="高亮挖空卡"></a>高亮挖空卡</h3><p>正则表达式：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">((?:.+\n)*(?:.*==.*)(?:\n(?:^.{1,3}$|^.{4}(?&lt;!&lt;!--).*))*)</span><br></pre></td></tr></tbody></table></figure>

<p>参考资料：<a href="https://github.com/Pseudonium/Obsidian_to_Anki/wiki/Cloze-Paragraph-style">Cloze Paragraph style · Pseudonium/Obsidian_to_Anki Wiki · GitHub</a></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">this is the ==highlight== note</span><br></pre></td></tr></tbody></table></figure>

<p>注意：如果是需要开启 Highlight-cloze style，那么需要同时打开 CurlyCloze 和 CurlyCloze - Highlights to Cloze 两关开关</p>
]]></content>
      <categories>
        <category>Anki</category>
      </categories>
      <tags>
        <tag>Anki</tag>
        <tag>Obsidian</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian2Hexo</title>
    <url>/posts/Obsidian-to-Hexo.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="最终流程图"><a href="#最终流程图" class="headerlink" title="最终流程图"></a>最终流程图</h2><ul>
<li>简明流程：Win (obsidian) &lt;— 坚果云 —&gt; Mac (obsidian) &lt;— 软链接 —&gt; Hexo</li>
<li> 实现功能：Win 的 Obsidian 做笔记，或者 Mac 的 Obsidian 做笔记 —&gt; md 格式的文件 —&gt; 通过 hexo 的 3 条命令上传至博客</li>
</ul>
<p><img data-src="https://s2.loli.net/2023/10/15/utePdQFq2JiV9o1.png" alt="image.png"></p>
<h2 id="Why-Obsidian"><a href="#Why-Obsidian" class="headerlink" title="Why Obsidian"></a>Why Obsidian</h2><p>博客文章都是使用 Markdown 格式完成的，在 Markdown 编辑体验上，Obsidian 的体验要远远好于 VS Code。毕竟术业有专攻，Obsidian 主打 Markdown 这种垂直领域的文件编辑，而 VS Code 作为通用代码编辑器，不奢求太多体验，大抵能用就行</p>
<p>Obsidian 丰富的插件、轻量和自定义程度高的快捷键这几点已经足以秒杀大多数具有 Markdown 编辑功能的编辑器了</p>
<h2 id="面临的问题"><a href="#面临的问题" class="headerlink" title="面临的问题"></a>面临的问题</h2><h3 id="Yaml-字段问题"><a href="#Yaml-字段问题" class="headerlink" title="Yaml 字段问题"></a>Yaml 字段问题</h3><p>Hexo 的 URL 使用 abbrlink 永久链接，而这个永久链接是使用 CRC32 算法和十六进制表示法生成的，在 Ob 中自然没有现成的工具可以实现这个功能 —&gt; 那么转换思路，abbrlink 只要唯一就好，完全可以使用时间戳来代替这种复杂的计算</p>
<p>至于时间戳，可以使用 Ob 核心插件中的 <code>模板</code> 插件来完成，创建文件后即可自动添加 abbrlink</p>
<p><img data-src="https://s2.loli.net/2023/08/03/ngPDfHIOuK3ANVi.png" alt="image.png"></p>
<p>同理，date 和 title 字段也可以使用模板来完成，简易的 YAML 字段如下：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">title: {{NAME}}</span><br><span class="line">categories: </span><br><span class="line">date: {{DATE:YYYY-MM-DD HH:mm:ss}}</span><br><span class="line">abbrlink: {{DATE:YYYYMMDDHHmmss}}</span><br><span class="line">tag: </span><br></pre></td></tr></tbody></table></figure>

<h3 id="图片上传问题"><a href="#图片上传问题" class="headerlink" title="图片上传问题"></a>图片上传问题</h3><p>习惯使用 SM.MS 这类的图床工具，在 Ob 中插入图片还需要额外手动将文中图片一张张上传到图床中，过程简单但又浪费时间，操作过程也毫无意义 —&gt; 需要一个更加自动化的流程</p>
<p>既然锁定了图床这类工具，必然和 image 有关，思路也很清晰，去 Ob 的插件市场搜索关键词 image 即可</p>
<p><img data-src="https://s2.loli.net/2023/08/03/KCagtsEyUh4v5HB.png" alt="image.png"></p>
<p>参考资料：</p>
<ul>
<li>Obsidian 插件：<a href="https://github.com/renmu123/obsidian-image-auto-upload-plugin">GitHub - renmu123/obsidian-image-auto-upload-plugin: auto upload image with picgo</a></li>
<li>Picgo：<a href="https://github.com/Molunerfinn/PicGo">GitHub - Molunerfinn/PicGo: :rocket:A simple &amp; beautiful tool for pictures uploading built by vue-cli-electron-builder</a></li>
<li>Picgo 安装使用过程中易出现的问题（如 macOS 系统安装完 PicGo 显示「文件已损坏」或者安装完打开没有反应）：<a href="https://github.com/Molunerfinn/PicGo/blob/dev/FAQ.md">FAQ.md</a></li>
</ul>
<h3 id="图片压缩问题"><a href="#图片压缩问题" class="headerlink" title="图片压缩问题"></a>图片压缩问题</h3><p>问题也很清晰，在 <a href="https://coffeelize.top/posts/5566e923.html?highlight=%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9">图片压缩指南 | 智朋的个人博客</a> 中已经介绍过了几款工具，推荐使用 <a href="https://saerasoft.com/caesium">caesium</a>，可这仍然无法接入自动化流程 —&gt; 需要将图片上传至图床前自动压缩图片 —&gt; 也就指向了 Picgo 上传工具</p>
<p><img data-src="https://s2.loli.net/2023/08/03/WptmEhIBArL6cFw.png" alt="image.png"></p>
<p><img data-src="https://s2.loli.net/2023/08/03/TZWfD1hxiSItMUj.png" alt="image.png"></p>
<p>注：图床配置名是根据 <code>图床设置</code> 自己设置的，并非一定为 “SM”</p>
<p>参考资料：<a href="https://github.com/JuZiSang/picgo-plugin-compress">GitHub - juzisang/picgo-plugin-compress: Image compression plugin for PicGo</a></p>
<p>经测试，同样一张截图，系统直接保存图片 127KB，通过插件压缩上传后 39KB，压缩效果可以，主要是实现了自动化</p>
<p>实际上，对于非博客中的文章，如自己的一些笔记，当然还是插入本地图片更方便。插件作者在设计上增加了一个控制开关，在 MD 文件的 YAML 区添加 <code>image-auto-upload: true</code> 才实现图片粘贴上传功能 —&gt; 因此，可以利用 QuickAdd + 模板 (配置好 YAML 区) 来实现「只有某一种模板的文件，向其中粘贴图片的时候才会自动上传到图床中」</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">title: {{NAME}}</span><br><span class="line">categories: </span><br><span class="line">date: {{DATE:YYYY-MM-DD HH:mm:ss}}</span><br><span class="line">abbrlink: {{DATE:YYYYMMDDHHmmss}}</span><br><span class="line">image-auto-upload: true</span><br><span class="line">tag: </span><br></pre></td></tr></tbody></table></figure>

<h3 id="文件同步问题"><a href="#文件同步问题" class="headerlink" title="文件同步问题"></a>文件同步问题</h3><p>面临的问题：Ob 资源文件夹路径和 hexo 文件夹路径不在一块，如何将 hexo 中包含 markdown 文件的文件夹导入到 Ob 资源库中是一个问题</p>
<h4 id="尝试-1：使用-rsync-命令工具"><a href="#尝试-1：使用-rsync-命令工具" class="headerlink" title="尝试 1：使用 rsync 命令工具"></a>尝试 1：使用 rsync 命令工具</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">rsync -avzh --delete /Users/wuzhipeng/Documents/ZhPObsidian/ZhPObsidian/_posts  /Users/wuzhipeng/ZhPblog/source</span><br></pre></td></tr></tbody></table></figure>

<p>选项说明</p>
<ul>
<li><code>-a</code>&nbsp;或&nbsp;<code>--archive</code>：以归档模式同步文件，包括保留文件权限、时间戳等元数据。</li>
<li><code>-v</code>&nbsp;或&nbsp;<code>--verbose</code>：显示详细的输出信息。</li>
<li><code>-z</code>&nbsp;或&nbsp;<code>--compress</code>：使用压缩传输来减少数据传输量。</li>
<li><code>-h</code>&nbsp;或&nbsp;<code>--human-readable</code>：以易读的格式显示输出信息。</li>
<li><code>-n</code>&nbsp;或&nbsp;<code>--dry-run</code>：模拟同步操作，不实际同步文件。</li>
<li><code>-P</code>&nbsp;或&nbsp;<code>--progress</code>：显示同步进度。</li>
<li><code>--delete</code>：在目标目录中删除不存在于源文件夹中的文件。</li>
<li><code>--exclude</code>：排除指定的文件或目录。</li>
<li><code>--include</code>：只包含指定的文件或目录。</li>
<li><code>--bwlimit</code>：限制带宽使用。</li>
</ul>
<p>的确可以同步，但这样做有几个明显的缺点：</p>
<ul>
<li>单向同步：如果双方都做了修改，那么需要左右来回同步一次，容易出错</li>
<li>同步错误：虽然同步是成功的，但是有报错的出现且暂时无法解决，用起来不放心 </li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">rsync error: some files could not be transferred (code 23) at /AppleInternal/Library/BuildRoots/c2cb9645-dafc-11ed-aa26-6ec1e3b3f7b3/Library/Caches/com.apple.xbs/Sources/rsync/rsync/main.c(996)</span><br></pre></td></tr></tbody></table></figure>

<h4 id="尝试-2：软链接"><a href="#尝试-2：软链接" class="headerlink" title="尝试 2：软链接"></a>尝试 2：软链接</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ln -s /Users/wuzhipeng/Documents/ZhPObsidian/ZhPObsidian/_posts  /Users/wuzhipeng/ZhPblog/source</span><br></pre></td></tr></tbody></table></figure>

<p>没想到 Ob 支持软链接，这样 hexo 和 Obsidian 访问的就是同一文件目录，不涉及同步问题，这样也很稳定，目前使用的就是这种方案</p>
<p>注意事项：</p>
<ul>
<li>Ob 中的一个文件夹软链接到 Hexo 中，需要首先删除 Hexo 中的对应文件夹，比如以上中的 <code>_posts</code> 文件夹</li>
</ul>
<h2 id="购买-Obsidian-官方同步之后"><a href="#购买-Obsidian-官方同步之后" class="headerlink" title="购买 Obsidian 官方同步之后"></a>购买 Obsidian 官方同步之后</h2><p>仍然是使用软链接方案，删除软链接文件夹，将 Obsidian 本地库的对应文件夹路径粘贴替换一下即可。目前软链接的文件夹有：<code>_posts</code>、<code>about</code>、<code>download</code>、<code>notes</code></p>
<p><img data-src="https://s2.loli.net/2024/04/12/EPUTXmsVInAt5CY.png" alt="image.png"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ln -s /Users/wuzhipeng/Documents/SynZhPObsidian/SynZhPObsidan/_posts  /Users/wuzhipeng/ZhPblog/source</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ln -s /Users/wuzhipeng/Documents/SynZhPObsidian/SynZhPObsidan/download  /Users/wuzhipeng/ZhPblog/source</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ln -s /Users/wuzhipeng/Documents/SynZhPObsidian/SynZhPObsidan/about  /Users/wuzhipeng/ZhPblog/source</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ln -s /Users/wuzhipeng/Documents/SynZhPObsidian/SynZhPObsidan/notes  /Users/wuzhipeng/ZhPblog/source</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>Obsidian</tag>
      </tags>
  </entry>
  <entry>
    <title>PhotoShop 简明笔记</title>
    <url>/posts/PhotoShop-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul>
<li>标尺：Ctrl + R</li>
<li> 反选：Ctrl + Shift + I</li>
<li> 参考线：从标尺处拖拉可新建参考线；</li>
<li>显示 / 隐藏参考线：Ctrl + ；</li>
<li>内容填充：框选，右键，填充</li>
<li>复制图层：Ctrl + J</li>
<li> 将框选的图层复制到新文档：先框选 –&gt; Ctrl + J –&gt; Ctrl + N –&gt; 从剪切板导入。这样做的目的是框选的图层长宽多大，新文档的长宽就是多大，不会有大量多余的空白部分</li>
<li>按比例裁剪：裁剪前可设置裁剪的长宽比（Visio 中似乎没有这个功能，就只能在 PS 中操作了）</li>
<li>对图形进行变换操作：Ctrl + T</li>
<li> 对图形进行连续相同的变换操作：Ctrl + Shift + T</li>
<li> 取消选区：Ctrl + D</li>
<li> 恢复选区：Ctrl + Shift + D</li>
</ul>
]]></content>
      <tags>
        <tag>Research</tag>
      </tags>
  </entry>
  <entry>
    <title>QHUMaster 使用指南</title>
    <url>/posts/QHUMaster-User&#39;s-Guide.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="资料准备"><a href="#资料准备" class="headerlink" title="资料准备"></a>资料准备</h2><table>
<thead>
<tr>
<th>文件名</th>
<th>下载</th>
</tr>
</thead>
<tbody><tr>
<td> QHUMaster.zip</td>
<td><a href="https://github.com/coffeelize/coffeelize.github.io/blob/master/download/QHUMaster.zip">QHUMaster.zip</a></td>
</tr>
<tr>
<td> 一份简短的 LaTeX 介绍.pdf </td>
<td><a href="https://github.com/coffeelize/coffeelize.github.io/blob/master/download/%E4%B8%80%E4%BB%BD%E7%AE%80%E7%9F%AD%E7%9A%84LaTeX%E4%BB%8B%E7%BB%8D.pdf">一份简短的 LaTeX 介绍.pdf</a></td>
</tr>
</tbody></table>
<h2 id="Overleaf-在线编译"><a href="#Overleaf-在线编译" class="headerlink" title="Overleaf 在线编译"></a>Overleaf 在线编译</h2><h3 id="注册-or-登录帐号"><a href="#注册-or-登录帐号" class="headerlink" title="注册 or 登录帐号"></a>注册 or 登录帐号</h3><p>官网：<a href="https://www.overleaf.com/project">Online LaTeX Editor</a></p>
<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>Projects —&gt; Create a new project —&gt; Blank project (空项目) —&gt; 为项目取一个名字</p>
<p><img data-src="https://s2.loli.net/2024/01/09/kabndM4ozVc9KWZ.png" alt="image.png"></p>
<p>创建项目完之后，将出现如下界面：</p>
<p><img data-src="https://s2.loli.net/2024/01/09/oqa5lxQL7dhREj9.png" alt="image.png"></p>
<h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h3><p>1）对 QHUMaster.zip 进行解压，得如下文件；</p>
<p><img data-src="https://s2.loli.net/2024/01/09/gQRtCHrUbfwe3Nu.png" alt="image.png"></p>
<p>2）将 Manuscript.tex、QHUMaster.cls 以及 reference.bib 拖入到 Overleaf 的项目当中，进行上传</p>
<p><img data-src="https://s2.loli.net/2024/01/09/8PQrEUW57tKpV1A.png" alt="image.png"></p>
<p>3）新建文件夹，取名 <code>imgs</code></p>
<p><img data-src="https://s2.loli.net/2024/01/09/nODSKBrG46jUeXN.png" alt="image.png"></p>
<p>将 imgs 文件夹中的两张图片拖入 overleaf 项目中的 imgs 文件夹下，进行上传<br><img data-src="https://s2.loli.net/2024/01/09/xMt36FSDCOH8YWh.png" alt="image.png"></p>
<h3 id="项目设置"><a href="#项目设置" class="headerlink" title="项目设置"></a>项目设置</h3><p>1）全选复制 <code>Manuscript.tex</code> 中的所有内容；<br>``<br><img data-src="https://s2.loli.net/2024/01/09/D15TYJVenckNZRr.png" alt="image.png"></p>
<p>2）删除 <code>main.tex</code> 文件中的所有内容，粘贴刚才复制的内容到 <code>main.tex</code> </p>
<p>3）点击左上角的 Menu，将 pdfLaTeX 改为 XeLaTeX</p>
<p><img data-src="https://s2.loli.net/2024/01/09/osG98VcPhnmw3La.png" alt="image.png"></p>
<h3 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h3><p>接下来按快捷键 <code>Ctrl+S</code>，项目开始编译；编译结束后右侧将出现生成的 PDF 文件</p>
<p><img data-src="https://s2.loli.net/2024/01/09/odFphf2OgEJA4vD.png" alt="image.png"></p>
<h3 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h3><ul>
<li>下载 PDF 文件</li>
</ul>
<p><img data-src="https://s2.loli.net/2024/01/09/qTbPaefZjXYF1GB.png" alt="image.png"></p>
<ul>
<li>打包下载整个项目</li>
</ul>
<p><img data-src="https://s2.loli.net/2024/01/09/VxlIn2aijCeuyoU.png" alt="image.png"></p>
<ul>
<li>多人共同编辑：Share —&gt; 通过邮件分享项目，可多人在线同时编辑</li>
</ul>
<p><img data-src="https://s2.loli.net/2024/01/09/cJwXrpYxhm2tKyd.png" alt="image.png"></p>
<ul>
<li>代码和 PDF 位置的跳转</li>
</ul>
<p><img data-src="https://s2.loli.net/2024/01/09/moaTYqizg3xQdOp.png" alt="image.png"></p>
<h2 id="模板介绍"><a href="#模板介绍" class="headerlink" title="模板介绍"></a>模板介绍</h2><h3 id="中英文封面修改"><a href="#中英文封面修改" class="headerlink" title="中英文封面修改"></a>中英文封面修改</h3><p><img data-src="https://s2.loli.net/2024/01/09/5X8otNPwusj1l2c.png" alt="image.png"></p>
<p>同理，可以相应修改英文封面的内容</p>
<p><img data-src="https://s2.loli.net/2024/01/09/mrZFnJI7dgxS6pc.png" alt="image.png"></p>
<h3 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h3><p>这里仅对照图片介绍部分命令，对于 LaTeX 通用命令，大家完全可以使用 GPT 或者搜索引擎就行搜索</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">% 插入章节</span><br><span class="line">\chapter{时运不齐，命途多舛}</span><br><span class="line">% 插入小节</span><br><span class="line">\section{插入图片}</span><br><span class="line">% 插入假文</span><br><span class="line">\zhlipsum[1]</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2024/01/09/MvEmwVUp8Ku9jYP.png" alt="image.png"></p>
<h2 id="LaTeX-实用资源"><a href="#LaTeX-实用资源" class="headerlink" title="LaTeX 实用资源"></a>LaTeX 实用资源</h2><ul>
<li>LaTeX 工作室：<a href="https://www.latexstudio.net/">LaTeX 工作室</a><ul>
<li><a href="https://www.latexstudio.net/texdoc/#/29?page_id=155">入门看哪些文档 - LaTeX 工作室</a></li>
<li><a href="https://ask.latexstudio.net/ask/">首页 - LaTeX 工作室 问答社区</a></li>
</ul>
</li>
<li> CTAN.org 宏包大全：<a href="https://ctan.org/pkg/">CTAN: Packages</a></li>
<li>CTEX.org 常用宏包：<a href="http://www.ctex.org/documents/packages/">CTEX - 在线文档 - TeX/LaTeX 常用宏包</a></li>
<li> CTEX.org：<a href="http://www.ctex.org/documents/latex/graphics/graphics.html">LATEX2e&nbsp;插图指南</a></li>
<li> CTEX.org 主页：<a href="http://www.ctex.org/HomePage#">科技排版系统</a></li>
<li> LaTeX 编辑部：<a href="https://www.latexstudio.net/hulatex/index.htm">LaTeX 编辑部</a></li>
<li><a href="https://coffeelize.top/posts/a9e583b4.html">LaTeX 相关资源汇总 | 智朋的个人博客</a></li>
</ul>
]]></content>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Rest 简明笔记</title>
    <url>/posts/Rest-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Rest-简介"><a href="#Rest-简介" class="headerlink" title="Rest 简介"></a>Rest 简介</h3><p>Rest (Representation State Transfer, 表现形式状态转换)，即访问网络资源的格式</p>
<p>传统风格资源描述形式书写如下</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">http://localhost/user/getById?id=1</span><br><span class="line">http://localhost/user/saveUser</span><br></pre></td></tr></tbody></table></figure>

<p>REST 风格描述形式如下</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">http://localhost/user/1</span><br><span class="line">http://localhost/user</span><br></pre></td></tr></tbody></table></figure>

<p>特点</p>
<ul>
<li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li>
<li>书写简化</li>
<li>按照 REST 风格访问资源时使用行为动作区分对资源进行了何种操作</li>
<li>根据 REST 风格对资源进行访问称为 RESTful</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/12/19/eKqgoT9l7jDJRNI.png" alt="Rest风格增删改查.png"></p>
<p>注意事项</p>
<ul>
<li>上述行为是约定方式，约定不是规范，可以打破，所以称 REST 风格，而不是 REST 规范</li>
<li>描述模块的名称通常使用复数，也就是加 s 的格式描述，表示此类资源，而非单个资源，例如：users、books 等</li>
</ul>
<h3 id="Rest-入门案例"><a href="#Rest-入门案例" class="headerlink" title="Rest 入门案例"></a>Rest 入门案例</h3><p>1、原先的风格</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping("/save")</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user save..."</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user save'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、REST 风格</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//设置当前请求方法为POST，表示REST风格中的添加操作  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.POST)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user save..."</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user save'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//设置当前请求方法为DELETE，表示REST风格中的删除操作  </span></span><br><span class="line"><span class="comment">//@PathVariable注解用于设置路径变量（路径参数），要求路径上设置对应的占位符，并且占位符名称与方法形参名称相同  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users/{id}",method = RequestMethod.DELETE)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user delete..."</span> + id);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user delete'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>注意 Postman 中的请求路径：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">http://localhost//users/1</span><br></pre></td></tr></tbody></table></figure>

<p><code>@PathVariable</code> 表示后面的变量来自路径，但是来自路径中的哪儿呢？<br>而通过 <code>value = "/users/{id}"</code> 中就指明了路径参数（路径变量）</p>
<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//设置当前请求方法为PUT，表示REST风格中的修改操作  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.PUT)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user update..."</span>+user);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user update'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="根据-id-查询"><a href="#根据-id-查询" class="headerlink" title="根据 id 查询"></a>根据 id 查询</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//设置当前请求方法为GET，表示REST风格中的查询操作  </span></span><br><span class="line"><span class="comment">//@PathVariable注解用于设置路径变量（路径参数），要求路径上设置对应的占位符，并且占位符名称与方法形参名称相同  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users/{id}" ,method = RequestMethod.GET)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user getById..."</span>+id);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user getById'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//设置当前请求方法为GET，表示REST风格中的查询操作  </span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.GET)</span>  </span><br><span class="line"><span class="meta">@ResponseBody</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAll</span><span class="params">()</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"user getAll..."</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'user getAll'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>设定 http 请求动作：<code>@RequestMapping</code> 的 mathod 属性设置请求动作</li>
<li>设定请求参数（路径变量）</li>
<li><code>@PathVariable</code> 形参注解，用于绑定路径参数与处理器方法形参间的关系，要求路径参数名和形参名一一对应</li>
</ol>
<p><code>@RequestBody</code>：用于接收 json 数据<br><code>@RequestParam</code>：接受 URL 地址传参或表单传参<br><code>@PathVariable</code>：用于接收路径参数，使用 {参数名称} 描述路径参数</p>
<h3 id="RESTful-快速开发"><a href="#RESTful-快速开发" class="headerlink" title="RESTful 快速开发"></a>RESTful 快速开发</h3><h4 id="简化书写"><a href="#简化书写" class="headerlink" title="简化书写"></a>简化书写</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = "/users/{id}" ,method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.PUT)</span></span><br></pre></td></tr></tbody></table></figure>

<p>问题 1：可以看到，以上的这几个中 <code>value = "/users"</code> 都是重复要写的内容，能不能更简化呢？</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line"> <span class="comment">//各种处理器方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>问题 2：每一个处理器方法前面都带着一个 <code>@ResponseBody</code> 注解，能不能更简化些呢？</p>
<p>将 <code>@ResponseBody</code> 写到类的前面</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line"> <span class="comment">//各种处理器方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>Spring ⇒ 既然每次都得写 <code>@Controller</code> 和 <code>@ResponseBody</code>，那就合二为一吧，使用 <code>@RestController</code> 即可</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line"> <span class="comment">//各种处理器方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>问题 3：每个处理器方法中都有</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">method = RequestMethod.POST</span><br><span class="line">method = RequestMethod.DELETE</span><br><span class="line">method = RequestMethod.PUT</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></tbody></table></figure>

<p>那么能不能简化书写呢？</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestMapping( method = RequestMethod.POST)  </span></span><br><span class="line"><span class="comment">//使用@PostMapping简化Post请求方法对应的映射配置</span></span><br><span class="line"><span class="meta">@PostMapping</span>        </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"book save..."</span> + book);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'book save'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>也就是说，使用注解 <code>@PostMapping</code> 来实现前面 mathod 属性中的功能</p>
<p>那么对于含有路径参数的呢？比如 delete ⇒ <code>@DeleteMapping("/{id}")</code></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//@RequestMapping(value = "/{id}" ,method = RequestMethod.DELETE)  </span></span><br><span class="line"><span class="meta">@DeleteMapping("/{id}")</span>     <span class="comment">//使用@DeleteMapping简化DELETE请求方法对应的映射配置  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{  </span><br><span class="line">    System.out.println(<span class="string">"book delete..."</span> + id);  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'book delete'}"</span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping("/{id}")</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@GetMapping("/{id}")</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="页面数据展示"><a href="#页面数据展示" class="headerlink" title="页面数据展示"></a>页面数据展示</h4><p>非本案例重点，这里省略操作</p>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>基于 RESTful 页面数据交互总结</p>
<ul>
<li>先做后台功能，开发接口并调通接口</li>
<li>再做页面异步调用，确认功能可以正常访问</li>
<li>最后完成页面数据展示</li>
</ul>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Revision Letter</title>
    <url>/posts/Revision-Letter.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h3><p>可以使用 Overleaf 在线编译（XeLaTeX），也可以本地编译</p>
<p><img data-src="https://s2.loli.net/2023/10/27/DPbHwd6G5SxsatO.jpg" alt="Revision_Letter_页面_1.jpg"></p>
<p><img data-src="https://s2.loli.net/2023/10/27/cDjf51SBb6aHq94.jpg" alt="Revision_Letter_页面_2.jpg"></p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">│  Revision Letter.tex</span><br><span class="line">│  setting.tex</span><br><span class="line">└──figs</span><br><span class="line">        Fig1.png</span><br><span class="line">        Fig2.png</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2023/10/27/cLSbKjBHUImY2Vu.png" alt="image.png"></p>
<h3 id="setting-tex"><a href="#setting-tex" class="headerlink" title="setting.tex"></a>setting.tex</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\usepackage{amsfonts}%</span><br><span class="line">\usepackage{amssymb}</span><br><span class="line">\usepackage{mathrsfs}</span><br><span class="line">\usepackage{latexsym,amsmath,amsfonts}</span><br><span class="line">\usepackage{xcolor}% http://ctan.org/pkg/xcolor</span><br><span class="line">\usepackage{ifmtarg}% http://ctan.org/pkg/ifmtarg</span><br><span class="line">\usepackage{xifthen}% http://ctan.org/pkg/xifthen</span><br><span class="line">\usepackage{environ}% http://ctan.org/pkg/environ</span><br><span class="line">\usepackage{multido}% http://ctan.org/pkg/multido</span><br><span class="line">\usepackage{lipsum,ctex}% http://ctan.org/pkg/lipsum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%\usepackage[displaymath]{lineno}</span><br><span class="line">\usepackage[backref]{hyperref}</span><br><span class="line">\linespread{1}</span><br><span class="line">%\usepackage{showkeys}</span><br><span class="line"></span><br><span class="line">%\usepackage{times}</span><br><span class="line">\allowdisplaybreaks</span><br><span class="line">%\date{\today}</span><br><span class="line">\date{\today}</span><br><span class="line">\newcommand{\red}{\color{red} } %红色字体</span><br><span class="line">\def\ft{\frac d{dt}}</span><br><span class="line">\def\pt{\partial_{t}}</span><br><span class="line">\def\r{\mathbb{R}^2}</span><br><span class="line">\def\no{\nonumber}</span><br><span class="line">\def\eps{\epsilon}</span><br><span class="line"> \textwidth 150mm</span><br><span class="line"> \textheight 220mm</span><br><span class="line">\voffset -25mm \hoffset -15mm\topmargin1.4 cm</span><br><span class="line">\renewcommand{\baselinestretch}{1.235}</span><br><span class="line"></span><br><span class="line">\makeatletter%</span><br><span class="line">\newcommand{\commenthang}{% top comment decoration</span><br><span class="line">  \begingroup%</span><br><span class="line">  \setlength{\unitlength}{.005\linewidth}% \linewidth/200</span><br><span class="line">    \begin{picture}(0,0)(1.5,0)%</span><br><span class="line">      \linethickness{0.45pt} \color{blue!50}%</span><br><span class="line">      \put(-3,2){\line(1,0){206}}% Top line</span><br><span class="line">      \multido{\iA=2+-1,\iB=50+-10}{5}{% Top hangs</span><br><span class="line">        \color{blue!\iB}%</span><br><span class="line">        \put(-3,\iA){\line(0,-1){1}}% Top left hang</span><br><span class="line">        \put(203,\iA){\line(0,-1){1}}% Top right hang</span><br><span class="line">      }%</span><br><span class="line">    \end{picture}%</span><br><span class="line">  \endgroup%</span><br><span class="line">}%</span><br><span class="line">\newcommand{\commenthung}{% bottom comment decoration</span><br><span class="line">  \nobreak</span><br><span class="line">  \begingroup%</span><br><span class="line">    \setlength{\unitlength}{.005\linewidth}% \linewidth/200</span><br><span class="line">    \begin{picture}(0.0,0)(1.5,0)%</span><br><span class="line">      \linethickness{0.45pt} \color{blue!50}%</span><br><span class="line">      \put(-3,0){\line(1,0){206}}% Bottom line</span><br><span class="line">      \multido{\iA=0+1,\iB=50+-10}{5}{% Bottom hangs</span><br><span class="line">        \color{blue!\iB}%</span><br><span class="line">        \put(-3,\iA){\line(0,1){1}}% Bottom left hang</span><br><span class="line">        \put(203,\iA){\line(0,1){1}}% Bottom right hang</span><br><span class="line">      }%</span><br><span class="line">    \end{picture}%</span><br><span class="line">  \endgroup%</span><br><span class="line">}%</span><br><span class="line"></span><br><span class="line">\newcounter{comment}</span><br><span class="line">\renewcommand{\thecomment}{\arabic{comment}}</span><br><span class="line">\NewEnviron{comment}[1][]{%</span><br><span class="line">	\par\noindent\commenthang\par\nobreak\noindent%\addvspace{-.5ex}</span><br><span class="line">	\refstepcounter{comment}\postdisplaypenalty=10000 %</span><br><span class="line">	{\sffamily\bfseries\upshape Comment \thecomment\@ifnotmtarg{#1}{\ (#1)}}\ \ \ignorespaces%</span><br><span class="line">	\BODY % Typeset comment body/content</span><br><span class="line">	\par\addvspace{-1ex}\nobreak\noindent\commenthung\par\addvspace{.4ex}%</span><br><span class="line">}</span><br><span class="line">\makeatother</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Revision-Letter-tex"><a href="#Revision-Letter-tex" class="headerlink" title="Revision Letter.tex"></a>Revision Letter.tex</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\documentclass[reqno,12pt]{amsart}</span><br><span class="line">\input{setting}</span><br><span class="line">\usepackage{graphicx}</span><br><span class="line">\usepackage{fontspec} </span><br><span class="line">\usepackage{xcolor}</span><br><span class="line">\usepackage{pifont}</span><br><span class="line">\usepackage{zhlipsum}</span><br><span class="line"></span><br><span class="line">\begin{document}</span><br><span class="line"></span><br><span class="line">\begin{center}</span><br><span class="line">   \textbf{\Large Response to Reviewers}</span><br><span class="line">\end{center}</span><br><span class="line">\vspace{2ex}</span><br><span class="line"></span><br><span class="line">\begin{flushleft}</span><br><span class="line">尊敬的审稿专家和编辑老师：</span><br><span class="line">\end{flushleft}</span><br><span class="line"></span><br><span class="line">您们好！非常感谢您们提出的评审意见，您们的所有建议都非常的重要，它们对我的论文写作和科研工作都具有重要的指导意义，这些中肯的意见是对我莫大的鼓励与支持。在下文中，我们将解释如何在修订中充分考虑到您们的意见。</span><br><span class="line"></span><br><span class="line">\begin{comment}</span><br><span class="line">此类综述较多（尤其以外文为主），如何明确该文的特色、创新，仍需作者在引言部分明确论述；</span><br><span class="line"></span><br><span class="line">\vspace{1ex}</span><br><span class="line">\noindent{\bf Response \thecomment} 非常感谢专家提出的建议。我们已在引言部分重新修正和完善了这一部分内容， \textcolor{red}{修正后的内容如下}：</span><br><span class="line"></span><br><span class="line">\zhlipsum[1]</span><br><span class="line"></span><br><span class="line">再次感谢专家老师的宝贵意见。</span><br><span class="line">\end{comment}</span><br><span class="line"></span><br><span class="line">\begin{comment}</span><br><span class="line">此类综述较多（尤其以外文为主），如何明确该文的特色、创新，仍需作者在引言部分明确论述；</span><br><span class="line"></span><br><span class="line">\vspace{1ex}</span><br><span class="line">\noindent{\bf Response \thecomment} 非常感谢专家提出的建议。我们已在引言部分重新修正和完善了这一部分内容， \textcolor{red}{修正后的内容如下}：</span><br><span class="line"></span><br><span class="line">\zhlipsum[1]</span><br><span class="line"></span><br><span class="line">再次感谢专家老师的宝贵意见。</span><br><span class="line">\end{comment}</span><br><span class="line"></span><br><span class="line">最后感谢审稿专家在百忙之中对论文提出的中肯建议，使论文质量得到提高。同时也感谢编辑老师辛苦的工作。</span><br><span class="line"></span><br><span class="line">愿各位工作顺利，身体健康！</span><br><span class="line"></span><br><span class="line">此致！</span><br><span class="line"></span><br><span class="line">\noindent{敬礼！}</span><br><span class="line"></span><br><span class="line">\vspace{2ex}</span><br><span class="line">\begin{flushright}</span><br><span class="line">	全体作者</span><br><span class="line">	</span><br><span class="line">	2022年9月23日</span><br><span class="line">\end{flushright}</span><br><span class="line"></span><br><span class="line">\end{document}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <tags>
        <tag>research</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlet 简明笔记</title>
    <url>/posts/Servlet-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Servlet-简介"><a href="#Servlet-简介" class="headerlink" title="Servlet 简介"></a>Servlet 简介</h3><p>Servlet 是 Java 提供的一门动态 web 资源开发技术<br><img data-src="https://s2.loli.net/2022/12/17/6VbzvcT3BZtsx17.png" alt="01-Servelet功能示意图.png"></p>
<p>Servlet 是 JavaEE 规范之一，其实就是一个 <strong>接口</strong>，将来我们需要定义 Servlet 类实现 Servlet 接口，并在 web 服务器运行 Servlet。Servlet 接口 API 文档中的五个方法，实现这个接口的话需要实现这五个方法</p>
<p><img data-src="https://s2.loli.net/2022/12/17/WezZCuthJBvk1y3.png" alt="02-Servlet需要重写的5个方法.png"></p>
<h3 id="Servlet-入门案例"><a href="#Servlet-入门案例" class="headerlink" title="Servlet 入门案例"></a>Servlet 入门案例</h3><ol>
<li>创建 Web 项目，导入 Servlet 依赖坐标</li>
</ol>
<p>在 <code>pom.xml</code> 文件中，插入如下代码</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>注意：需要加上 scope，设置为 <code>provided</code></p>
<ol start="2">
<li>创建：定义一个类，实现 Servlet 接口，并重写接口中的所有方法，并在 service 方法中输入一句话</li>
</ol>
<p>根据提示（Alt+Enter），重写类中的五个方法，这里我们重点关注 service 方法；因为 serlvet 在被访问的时候，service 方法被自动执行。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">    System.out.println(<span class="string">"servlet hello world"</span>);  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>配置：在类上使用 <code>@WebServlet</code> 注解，配置该 Servlet 的访问路径 </li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet("/demo1")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li>访问：启动 Tomcat，浏览器输入 URL 访问该 Servlet</li>
</ol>
<h3 id="Servlet-的执行流程"><a href="#Servlet-的执行流程" class="headerlink" title="Servlet 的执行流程"></a>Servlet 的执行流程</h3><p>我们并没有创建 Servlet 对象，也没有调用 service 方法，那么程序是如何执行的呢？<br>Servlet 对象是由服务器 Tomcat 创建的，并且 service 方法也是 Tomcat 调用的</p>
<p><img data-src="https://s2.loli.net/2022/12/17/EPN7DVMqtAIcgkB.png" alt="03-Servlet的执行流程.png"></p>
<p>服务器怎么知道 Servlet 中一定有 service 方法呢？<br>因为实现 Sevlet 接口必须复写其方法，而 Servlet 接口中有 service 方法</p>
<h3 id="Sevlet-生命周期"><a href="#Sevlet-生命周期" class="headerlink" title="Sevlet 生命周期"></a>Sevlet 生命周期</h3><p>那 Tomcat 什么时候给我们创建的 servlet 对象呢？</p>
<p>Servlet 运行在 Servlet 容器（Web 服务器）中，其生命周期由容器来管理，分为四个阶段</p>
<ol>
<li>加载和实例化：默认情况下，当 Servlet 第一次被访问时，由容器创建 Servlet 对象</li>
<li>初始化：在 Servlet 实例化之后，容器将调用 Servlet 的 init () 方法初始化这个对象，完成一些如加载配置文件、创建连接等初始化的工作。<strong>该方法只调用一次</strong></li>
<li>请求处理：每次请求 Servlet 时，Servlet 容器都会调用 Servlet 的 service () 方法对请求进行处理</li>
<li>服务终止：当需要释放内存或者容器关闭时，容器就会调用 Servlet 实例的 destroy () 方法完成资源的释放。在 destroy () 方法调用之后，容器会释放这个 Servlet 实例，该实例随后会被 Java 的垃圾收集器所回收</li>
</ol>
<h4 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法"></a>初始化方法</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//初始化方法  </span></span><br><span class="line"><span class="comment">//1.调用时机：默认情况下，servlet被第一次访问时调用  </span></span><br><span class="line"><span class="comment">//2.调用次数：1次  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>{  </span><br><span class="line">    System.out.println(<span class="string">"服务器正在初始化"</span>);  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>注：也可以通过配置手动改变 Servlet 的创建时机</p>
<ul>
<li>负整数：第一次被访问时创建 Servlet 对象；默认值是 -1</li>
<li>0 或正整数：服务器启动时创建 Servlet 对象，数字越小优先级越高；创建的时机提前了 </li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = "/demo",loadOnStartup = 1)</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="服务方法"><a href="#服务方法" class="headerlink" title="服务方法"></a>服务方法</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//1.调用时机：每一次servlet被访问时调用  </span></span><br><span class="line"><span class="comment">//2.调用次数：每一次  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">    System.out.println(<span class="string">"服务器正在服务中"</span>);  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="销毁方法"><a href="#销毁方法" class="headerlink" title="销毁方法"></a>销毁方法</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//1.调用时机：内存释放或服务器关闭，servlet对象被销毁  </span></span><br><span class="line"><span class="comment">//2.调用次数：1次  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{  </span><br><span class="line">    System.out.println(<span class="string">"服务器已被关闭"</span>);  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Servlet-体系结构"><a href="#Servlet-体系结构" class="headerlink" title="Servlet 体系结构"></a>Servlet 体系结构</h3><p>我们常用的就是 service 方法，其他四个方法都用的少，但是每次都还是得去实现它们，如何才能更简化一些呢？</p>
<p><img data-src="https://s2.loli.net/2022/12/17/BzYQNefaHXscwFT.png" alt="04-HttpServlet.png"></p>
<p>我们将来开发 B/S 架构的 Web 项目，都是针对 HTTP 协议，所以我们自定义 Servlet，直接继承 HttpServlet 即可（用于简化开发）⇒ 复写 HttpServlet 中的方法即可（doPost 方法和 doGet 方法）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet("/demo4")</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo4</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        System.out.println(<span class="string">"get..."</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>{  </span><br><span class="line">        System.out.println(<span class="string">"post..."</span>);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>在项目的 webapp 文件夹下新建一个 html 页面，用表单来模拟 post 请求</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/web-demo/demo4"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>注意：form 标签中，action 属性值为虚拟目录的路径</p>
<p>HttpServlet 中为什么要根据请求方式的不同，调用不同的方法呢？</p>
<p>实现 Servlet 接口，重写那五个方法，并且在 service 方法中用来处理逻辑（获取请求参数信息），但是不同的请求方式，请求参数所在的位置不同，post 请求请求参数在请求体中，而 get 请求请求方式在请求行中。因此，应该写不同的处理逻辑代码，根据请求方式的不同进行分别的处理 ⇒ 因此，出现了 HttpServlet</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Sketchup 之 3D 模型下载</title>
    <url>/posts/Sketchup-3D-Model-Download.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Youtube：<a href="https://www.youtube.com/watch?v=2MIFlGg5jJ0&amp;t=109s">Top 5 Websites for FREE 3D Models</a></li>
</ol>
<h3 id="3D-模型下载"><a href="#3D-模型下载" class="headerlink" title="3D 模型下载"></a>3D 模型下载</h3><ul>
<li><a href="https://3dwarehouse.sketchup.com/">https://3dwarehouse.sketchup.com</a></li>
<li><a href="http://www.bimobject.com/">http://www.bimobject.com</a></li>
<li><a href="https://www.cgtrader.com/">https://www.cgtrader.com</a></li>
<li><a href="https://box.pcon-solutions.com/">https://box.pcon-solutions.com</a></li>
<li><a href="https://www.caddetails.com/">https://www.caddetails.com</a></li>
</ul>
]]></content>
      <categories>
        <category>Mechanical</category>
      </categories>
      <tags>
        <tag>3D</tag>
        <tag>Drawing</tag>
      </tags>
  </entry>
  <entry>
    <title>My New Post</title>
    <url>/posts/177574ba.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>说到做到，今天就要把博客搭建起来！！！</p>
]]></content>
  </entry>
  <entry>
    <title>Sketch 绘图指南</title>
    <url>/posts/Sketch-Drawing-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>初衷： <a href="https://draveness.me/sketch-and-sketch/">技术文章配图指南</a><br>参考视频： <a href="https://www.youtube.com/watch?v=6KpYC6ckShw&amp;list=PLwO1Ou6RaKN7ZE3r_TbyAw4rCZq7QODyb">sketch 教程壹天上手</a><br>参考视频教程： <a href="https://www.sketch.net.cn/lengmenjiqiao.html">冷门但好用的 SKETCH 高频技巧</a><br>参考视频： <a href="https://www.bilibili.com/video/BV1f7411w7H9?p=1">Sketch Symbols 控件功能 - 善用组件 早点下班 - 新像素 UI 设计培训</a></p>
<h3 id="为什么是-sketch"><a href="#为什么是-sketch" class="headerlink" title="为什么是 sketch"></a>为什么是 sketch</h3><ol>
<li>上手快，操作简单（让我想起了 sketchup 草图大师）</li>
<li>矢量图软件，可轻松到处不同倍率的图片</li>
<li>比 Adobe illustrator 体积更小，使用更流畅</li>
<li>软件稳定，没有碰到软件崩溃的情况，且没有保存按钮（软件会给我们自动保存）</li>
<li>有大量的第三方插件</li>
</ol>
<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ol>
<li>切片：S；切片时双击编组，可以快速选中编组进行导出</li>
<li>旋转：command+shift+R，按住 shift 键也可以整数旋转；按住 command 键拖动角点也可以实现旋转</li>
<li>选中形状吸取颜色：control+C</li>
<li> 锁定：command+shift+L</li>
<li> 隐藏：command+shift+H</li>
<li> 导入图片：command+shift+K</li>
<li> 快速复制：按住 option 拖动，command+D 可重复上一步移动复制变换</li>
<li>上移一层：<code>command+]</code></li>
<li>下移一层：<code>command+[</code></li>
<li>切换图层：Tab</li>
<li> 连续缩放视图：command+ 滚轮键</li>
<li>微调形状尺寸：选中形状之后，按住 command+ 上下左右箭头移动 1px；可以加上 shift 移动 10px</li>
<li> 复制样式：command+option+C</li>
<li> 粘贴样式：command+option+V</li>
<li> 注意：文字效果复制到形状是无效的，形状效果复制到文本是可以的。</li>
<li>调节图片透明度：选中图层，直接按数字键可以调整（比如按 10，设置透明度为 10%）</li>
<li>显示 / 隐藏除绘图区域的所有界面：<code>command+.</code></li>
<li>穿透选择：按住 Command ，鼠标点击该元素，可以穿透编组进行选择</li>
</ol>
<p>来做个小练习吧：)</p>
<iframe src="https://quizlet.com/754181709/match/embed?i=24q5fr&amp;x=1jj1" height="500" width="100%" style="border:0"></iframe>

<p><img data-src="https://s2.loli.net/2022/03/31/drqAFMWZwiNueg1.png" alt="sketch常用快捷键.png"></p>
<h3 id="如何连接两条线段"><a href="#如何连接两条线段" class="headerlink" title="如何连接两条线段"></a>如何连接两条线段</h3><p>图层 –&gt; 路径 –&gt; 接合【layer –&gt; paths –&gt; join】</p>
<p><img data-src="https://s2.loli.net/2023/04/24/EzJt4kf56K8dCNA.png" alt="02-连接两条线段.png"></p>
<h3 id="如何获取封闭图形中的某条线段"><a href="#如何获取封闭图形中的某条线段" class="headerlink" title="如何获取封闭图形中的某条线段"></a>如何获取封闭图形中的某条线段</h3><p><img data-src="https://s2.loli.net/2023/04/24/EzJt4kf56K8dCNA.png" alt="02-连接两条线段.png"></p>
<h4 id="钢笔工具"><a href="#钢笔工具" class="headerlink" title="钢笔工具"></a>钢笔工具</h4><p>钢笔工具可能是绘图中最常用和最实用的工具了<br>钢笔工具：V<br>闭合路径：钢笔右侧窗口的功能按钮<br>结束编辑：Enter</p>
<p>四种绘制模式，快捷键分别为数字键 1，2，3，4</p>
<ul>
<li>直线角模式：没有调节把手，</li>
<li>镜像（对称模式）：两边的把手的变化是一样的</li>
<li>断开：左右把手不相关联</li>
<li>不对称模式：两个锚点到主点之间的距离是独立的，但依然会有联系</li>
</ul>
<p>移动节点：选中多个节点后（shift 可以加选），拖动节点可以移动节点<br>删除节点：选择节点，delete/backspace 即可<br>选择节点：可以通过节点框选工具，或者直接 shift 加选</p>
<h4 id="快速复制（阵列）元素"><a href="#快速复制（阵列）元素" class="headerlink" title="快速复制（阵列）元素"></a>快速复制（阵列）元素</h4><p>按住 Alt 键拖拽复制一个相同元素，你可以继续按住 Command + D 复制更多的相同元素。</p>
<h4 id="元素像素尺寸变成整数"><a href="#元素像素尺寸变成整数" class="headerlink" title="元素像素尺寸变成整数"></a>元素像素尺寸变成整数</h4><p>不光适用于单个元素，当我们对一组元素进行缩放后，组内元素间距、大小、字号都不再是像素的整数倍时，只要选中组，点一下 Round To Pixel（<strong>对齐到像素</strong>）即可使所有元素尺寸、间距都恢复为像素的整数倍。在对齐形状时特别有用</p>
<p><img data-src="https://s2.loli.net/2023/05/22/YvGRJNIUu2brt8p.png" alt="02-对齐到像素.png"></p>
<h4 id="圆角半径"><a href="#圆角半径" class="headerlink" title="圆角半径"></a>圆角半径</h4><p>方法 1：点击形状进入选中模式，快速双击进入路径模式，可以选择需要圆角的角点进行圆角设置<br>方法 2：点击形状进入选中模式，在圆角半径框中输入 <code>5;5;0;0</code> 即可给不同点设置不同圆角数值</p>
<p><img data-src="https://s2.loli.net/2022/05/10/rMn4YfRvXzLlN7H.png" alt="（sketch）设置圆角半径.png"></p>
<h3 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h3><h4 id="自适应布局"><a href="#自适应布局" class="headerlink" title="自适应布局"></a>自适应布局</h4><p>参考视频教程： <a href="https://www.sketch.net.cn/lengmenjiqiao.html">冷门但好用的 SKETCH 高频技巧</a></p>
<p>比方说可以实现的功能：保持元素间隔不变；拖拽后保持位置和大小；保持元素间隔不变<br>方法 1：通过创建控件时调整<br>方法 2：直接调整相对位置和固定大小，调整完之后可以在创建控件。一个是相对位置，一个是上下左右方向是否固定大小（对组合控件都是有效果的）</p>
<h4 id="控件的使用"><a href="#控件的使用" class="headerlink" title="控件的使用"></a>控件的使用</h4><p>参考视频： <a href="https://www.bilibili.com/video/BV1f7411w7H9?p=1">Sketch Symbols 控件功能 - 善用组件 早点下班 - 新像素 UI 设计培训</a></p>
<p>组件化：UI 设计稿标准化<br>重点：如何给组件命名，斜杠的用处；斜杠就相当于多了一个层级，加上斜杠之后，（比如 card/default 和 card/clone）default 和 clone 属于一个层级，都在 card 之下。且斜杠的使用可以无限嵌套<br>如果组件套组件，如何将被套的组件做出控件<br>可以先将组件中需要做成组件的复制出来，然后创建组件，将原先的删除，将新创建的组件放进去<br>比如 button/wechat 和 button/alipay<br>控件（相当于 sketchup 中的组件）的用处</p>
<ul>
<li>在控件编辑区，直接在控件中添加文本，图形等都会直接影响到绘图区的所有控件</li>
<li>命名逻辑：控件中可以手动更改的地方，在命名的时候可以加上一个符号等，后期复用控件的时候，一目了然知道这个控件哪些地方可以自定义修改</li>
<li>比如想要更改组件的主体颜色，可以将背景设置成控件，然后将这个控件的名字命名好</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/05/10/SOnJvbdwiV7hoQm.png" alt="（sketch）控件的层级关系.png"></p>
<h4 id="复用样式-amp-复用符号"><a href="#复用样式-amp-复用符号" class="headerlink" title="复用样式&amp;复用符号"></a>复用样式 &amp; 复用符号</h4><h5 id="复用样式"><a href="#复用样式" class="headerlink" title="复用样式"></a>复用样式</h5><p>也就相当于 word 中创建一个标题样式；与之相似，修改了应用了这个样式的属性，刷新一遍，所有应用了这个样式的元素都会跟着变化（就相当于 word 中将选中文字的样式赋予到标题样式中去了）</p>
<p><img data-src="https://s2.loli.net/2022/05/10/q9ison2gMFDrb3R.png" alt="（sketch）复用样式.png"></p>
<h5 id="复用符号"><a href="#复用符号" class="headerlink" title="复用符号"></a>复用符号</h5><p>双击复用符号，会跳转到复用符号的编辑界面，编辑完之后，可以返回<strong>实例（通过类创建的实例）</strong><br>复制多个控件，当我们编辑其中一个控件时，其他的都会跟着变化；但是当我们修改了控件中的文字，不会都跟着变哦！！！【相当于整个框架没有变】<br>比如一个圆形里面填充了一张图片，将这个圆形创建控件之后，复制一个出来，此时就可以自己更改这个圆形里面的图片了，而不会影响到其他复制的控件<br>控件的意思是不是：创建了一个框架，使得框架中的内容变得可 “ 控 “</p>
<h3 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h3><p>或许可以转至 Figma 阵营，但是似乎有些 “不幸”，Adobe 同意以约 200 亿美元收购 Figma，以后可能就是 “Adobe Figma” 了</p>
]]></content>
      <categories>
        <category>Research</category>
      </categories>
      <tags>
        <tag>Sketch</tag>
        <tag>APP</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Bean 简明笔记</title>
    <url>/posts/Spring-Bean-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="bean-基础配置"><a href="#bean-基础配置" class="headerlink" title="bean 基础配置"></a>bean 基础配置</h3><p><img data-src="https://s2.loli.net/2022/12/23/fkiRtJFzHrOahoj.png" alt="01-Bean的配置信息一览图.png"></p>
<h4 id="bean-别名配置"><a href="#bean-别名配置" class="headerlink" title="bean 别名配置"></a>bean 别名配置</h4><p>1、设置别名</p>
<p>问 1：那么不同的人编写代码，可能给 bean 不同的命名，如何解决命名问题呢？<br>答 1：可以通过给 bean 起别名的方式</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookService"</span> <span class="attr">name</span>=<span class="string">"service,service2,bookEbi"</span> <span class="attr">class</span>=<span class="string">"com.itheima.service.impl.BookServiceImpl"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookDao"</span> <span class="attr">ref</span>=<span class="string">"bookDao"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>name 属性值可以起多个别名，别名间以逗号、分号或空格来分割，比如如上代码的 <code>name="service,service2,bookEbi"</code></p>
<p>2、在到运行类中修改一下获取 bean 的 id 就可以了</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">BookService bookService = (BookService) ctx.getBean(<span class="string">"service"</span>);  </span><br><span class="line">bookService.save();</span><br></pre></td></tr></tbody></table></figure>

<p>除此之外，在 DI 配置属性的时候，也支持 name 属性，但是我们还是推荐通过 id 来进行引用<br><img data-src="https://s2.loli.net/2022/12/23/hgQYupqBtroAj2I.png" alt="02-可通过ID或者Name属性来进行引用.png"></p>
<h3 id="bean-作用范围"><a href="#bean-作用范围" class="headerlink" title="bean 作用范围"></a>bean 作用范围</h3><h4 id="Bean-的单例和多例"><a href="#Bean-的单例和多例" class="headerlink" title="Bean 的单例和多例"></a>Bean 的单例和多例</h4><p>问 1：Spring 默认给我们创建的 bean 是 <strong>单例</strong> 的；那如果我想要造一个非单例的 bean 怎么办？<br><img data-src="https://s2.loli.net/2022/12/23/LihN3Pk8G2fHCUo.png" alt="03-创建的Bean默认为单例的.png"></p>
<p>答 1：通过配置的形式，在 bean 标签中再插入一个 scope 属性（默认为 singleton）</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookDao"</span> <span class="attr">name</span>=<span class="string">"dao"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span> <span class="attr">class</span>=<span class="string">"com.itheima.dao.impl.BookDaoImpl"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>问 2：那么为什么 bean 默认为单例呢？<br>答 2：单例的 bean 如果能够复用的话，那么下次需要使用直接去容器中拿就好了，而不是每用一次就造一个对象</p>
<p>问 3：那么那些 bean 适合造单例呢？<br>答 3：适合交给容器进行管理的 bean，包括表现层对象、业务层对象、数据层对象以及工具对象等</p>
<p>问 4：那么哪些 bean 不适合交给容器进行管理呢？<br>答 4：封装实体的域对象（如记录有成员变量的）</p>
<h3 id="bean-实例化"><a href="#bean-实例化" class="headerlink" title="bean 实例化"></a>bean 实例化</h3><p>bean 本质上就是对象，创建 bean 使用构造方法完成</p>
<h4 id="构造方法（常用）"><a href="#构造方法（常用）" class="headerlink" title="构造方法（常用）"></a>构造方法（常用）</h4><p>1、提供可访问的构造方法</p>
<p>构造方法不写也行，Spring 会为我们处理；如果我们手动写上的话，注意一定是无参的构造方法。即如果我们创建了含参的构造方法，但是没有提供无参的构造方法，将抛出异常 BeanCreationException</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title">BookDao</span> </span>{  </span><br><span class="line">    <span class="comment">//无参的构造方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookDaoImpl</span><span class="params">()</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"book dao constructor is running"</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"book dao save ..."</span>);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、配置 bean</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookDao"</span> <span class="attr">class</span>=<span class="string">"com.itheima.dao.impl.BookDaoImpl"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h4><p>通过工厂的方式造对象（而不是使用 new）也是一种解耦的方式，那么通过工厂造出来的对象如何交给 Spring 进行管理呢？</p>
<p>1、静态工厂创建对象</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//静态工厂创建对象  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDaoFactory</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OrderDao <span class="title">getOrderDao</span><span class="params">()</span></span>{  </span><br><span class="line">        System.out.println(<span class="string">"factory setup...."</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderDaoImpl();  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、配置</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderDao"</span> <span class="attr">class</span>=<span class="string">"com.itheima.factory.OrderDaoFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getOrderDao"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>3、运行</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">OrderDao orderDao = OrderDaoFactory.getOrderDao();  </span><br><span class="line">orderDao.save();</span><br></pre></td></tr></tbody></table></figure>

<p>也就是说：</p>
<ol>
<li>需要在配置文件中的 class 属性中指明工厂的路径</li>
<li>通过 <code>factory-method</code> 属性指明工厂中造对象的方法</li>
</ol>
<h4 id="实例工厂（了解）"><a href="#实例工厂（了解）" class="headerlink" title="实例工厂（了解）"></a>实例工厂（了解）</h4><p>1、实例工厂创建对象</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//实例工厂创建对象  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoFactory</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">getUserDao</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>2、配置</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"userFactory"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.itheima.factory.UserDaoFactory"</span>/&gt;</span><br><span class="line">&lt;bean id=<span class="string">"userDao"</span> factory-method=<span class="string">"getUserDao"</span> factory-bean=<span class="string">"userFactory"</span>/&gt;</span><br></pre></td></tr></tbody></table></figure>

<ol>
<li>先造工厂的 bean，对应着第一行代码</li>
<li> factory-bean 指的是这个工厂的实例，也就是第一行代码中的 userFactory</li>
<li>factory-method 指明工厂中造对象的方法</li>
</ol>
<p>3、运行</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//创建实例工厂对象；  </span></span><br><span class="line">UserDaoFactory userDaoFactory = <span class="keyword">new</span> UserDaoFactory();  </span><br><span class="line"><span class="comment">//通过实例工厂对象创建对象  </span></span><br><span class="line">UserDao userDao = userDaoFactory.getUserDao();  </span><br><span class="line">userDao.save();</span><br></pre></td></tr></tbody></table></figure>

<h3 id="bean-生命周期"><a href="#bean-生命周期" class="headerlink" title="bean 生命周期"></a>bean 生命周期</h3><h4 id="通过配置文件"><a href="#通过配置文件" class="headerlink" title="通过配置文件"></a>通过配置文件</h4><p>1、在配置文件中绑定类的初始化和销毁前方法</p>
<figure class="highlight xml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookDao"</span> <span class="attr">class</span>=<span class="string">"com.itheima.dao.impl.BookDaoImpl"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destory"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>2、在类（BookDaoImpl）中创建对应的方法即可</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title">BookDao</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"book dao save ..."</span>);  </span><br><span class="line">    }  </span><br><span class="line">    <span class="comment">//表示bean初始化对应的操作  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{  </span><br><span class="line">        System.out.println(<span class="string">"init..."</span>);  </span><br><span class="line">    }  </span><br><span class="line">    <span class="comment">//表示bean销毁前对应的操作  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>{  </span><br><span class="line">        System.out.println(<span class="string">"destory..."</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>需要注意的是：当容器关闭时才会执行销毁前方法</p>
<h4 id="bean-的生命周期"><a href="#bean-的生命周期" class="headerlink" title="bean 的生命周期"></a>bean 的生命周期</h4><ul>
<li>初始化容器<ul>
<li>创建对象（内存分配）</li>
<li>执行构造方法</li>
<li>执行属性注入（set 操作）</li>
<li>执行 bean 初始化方法</li>
</ul>
</li>
<li>使用 bean<ul>
<li> 执行业务操作</li>
</ul>
</li>
<li>关闭 / 销毁容器<ul>
<li>执行 bean 销毁方法</li>
</ul>
</li>
</ul>
<h3 id="附注"><a href="#附注" class="headerlink" title="附注"></a>附注</h3><h4 id="遇到-Spring-报错信息的解决办法"><a href="#遇到-Spring-报错信息的解决办法" class="headerlink" title="遇到 Spring 报错信息的解决办法"></a>遇到 Spring 报错信息的解决办法</h4><ol>
<li>找到最后一条报错信息，Caused By：哒哒哒</li>
<li>如果最下面的能解决就 ok，不能解决就继续看上一条报错信息</li>
<li>因为第一条信息是包含全部的报错信息（很长看不到重点）</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>StackExchange 和它的游戏规则</title>
    <url>/posts/StackExchange-and-its-game-changers.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>本文转载自：<a href="https://andnot.wordpress.com/2015/02/18/stackexchange%e5%92%8c%e5%ae%83%e7%9a%84%e6%b8%b8%e6%88%8f%e8%a7%84%e5%88%99/">StackExchange 和它的游戏规则 | 与非的零空间</a>，转载前已征得原作者同意</p>
<p>我们都明白一个道理：没有规矩，不成方圆。这句话是在讲规则的重要性，规则定好了，怎么玩也玩不脱，规则没定好或者干脆没有规则，那大家就没法再愉快地玩耍了。问题就在于好的游戏规则不好制定。这很像编程，一个程序只有在合理的逻辑关系下才能跑通，跑起来还不够，如果写代码的时候没有考虑周全，迟早会碰到 bug；当事关人类行为之时，潜在的 bug 就更多了，比如自私、虚荣、懒惰…… 如何能找到一套解决方案，即使不能消除这些 bug，至少也要将之压到最低，是每一个人类社区的管理者都要考虑的问题，这个社区往大了说，可以是一个国家，往小了说，可能仅仅是一家问答网站。</p>
<h3 id="数量与质量"><a href="#数量与质量" class="headerlink" title="数量与质量"></a>数量与质量</h3><p>问答类网站是近年来发展势头很猛的一类在线社区，这类网站的崛起是伴随着互联网整体信息量的冗余而愈发显著的。用 <a href="https://zh.wikipedia.org/zh/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8">亚伦・斯沃茨</a> 的话说，就是互联网的当下问题不是大众能否发出声音，而是发声的源头太多，人们想要从这些庞杂的信息中提取出有用的东西出来是一件极其困难的事情。搜索引擎的出现为找到正确信息提供了有力支持，另一类寻找信息的工具就是问答网站，一问一答，从来都是人类交流的最有效手段，相比搜索引擎查找出来的近似结果，一个精准问题所引出的有针对性的回答势必更有帮助。</p>
<p>目前问答网站已经有很多，国内最大的当属百度知道，可是用过百度知道的人都不免发现，这个网站的回答质量不是一般的良莠不齐，而且普遍水准不高。国内比较靠谱的问答网站可能是近年来兴起的知乎，这个网站上线以来给人的感觉是干货比较多，原创也不少，与国内网络社区普遍的浮躁氛围迥异，因此被寄予厚望。我也是这个网站开放注册后的首批用户之一，可是两年多用下来，我也和网站的其他老用户一样，明显感到知乎的问答质量在逐渐降低。</p>
<p>有人说是因为随着知乎注册用户的增多，大量低水平用户涌入导致。一开始我也觉得是这样，那些问问题不经过大脑思考，回答问题只知道复制粘贴的人，说句不好听的，正如夏洛克所言，「拉低了整条街的智商」。可是当我后来发现了 <a href="http://stackoverflow.com/">Stackoverflow</a> 这个网站后，我才明白关键原因并不在于用户水平，国外也有大量的低端用户，同样也是神棍伴民科齐飞，大忽悠与脑残粉横行。而 Stackoverflow 自 2008 年成立以来，始终保持超高问答水准的原因，在于它在上线之时，就制定了一套用心良苦的游戏规则。</p>
<h3 id="制度的力量"><a href="#制度的力量" class="headerlink" title="制度的力量"></a>制度的力量</h3><p>Stackoverflow 是一个编程领域的问答社区，在其之上还有一个母站，叫做 <a href="http://stackexchange.com/">StackExchange</a>，管理着几十个大大小小的问答社区（参见 <a href="http://stackexchange.com/sites">这里</a>），Stackoverflow 是其中成立最早、规模最大的一个子站，其他的所有子站在形式上都与 Stackoverflow 保持一致，它们的主题各异，但社区制度是同一的，是一种基于声誉值（reputation）的激励制度，这里简述如下：</p>
<ul>
<li>新注册用户只有 1 声誉，此时你除了提问啥也干不了；</li>
<li>当你提出来的问题被人顶起一次，可以获得 5 声誉；</li>
<li>积累够 15 声誉时，你才能去顶别人的问题及回答；</li>
<li>当你的回答被顶一次时，可以获得 10 声誉；</li>
<li>如果你的回答被提问者采纳为答案，则可获得 15 声誉，同时提问者也可获得 2 声誉；</li>
<li>如果你的回答被反对，则声誉 -2，同时反对你的人声誉也跟着 -1；</li>
<li>如果你的问题被反对，则声誉 -2；</li>
<li>如果你的问答被至少六个人标记为垃圾，则一次性减去 100 声誉。</li>
</ul>
<p>此外还有一些额外的奖惩制度，比如我刚刚使用 Stackoverflow 时，问了一些没有认真准备的问题，结果很快就被人踩了，我心想这不行啊，本来就不多的声誉值再踩几下就没了…… 于是我立即删除了自己的问题，令我没有想到的是，不仅之前被扣的声誉值又返还给我，网站还额外奖励了 2 声誉，奖励的理由是我接纳了本社区的「同行评审」意见，主动删除低质量问题。当时我就惊呆了，「同行评审」这个词我以前仅仅在涉及到学术出版时才会遇见啊。</p>
<p>你可能会问，那么利用它这个漏洞不就可以无限刷声誉了吗，严谨的设计者当然不会犯这样的错误，当我问下一个问题时，网站在最醒目的地方告诫我，由于我问了过多的低水平问题（- -III），这个帐号正处于危险状态，我的下一个问题必须内容翔实有针对性，否则如果再被人反对，将永久失去提问资格。这个警告确实让我认真了起来，我于是拿出写论文的诚意，写了一个既有代码片段又有若干示意图的问题。果然，我的诚意也换来了别人的诚意，这个问题在很短时间内就获得了多人的回复，完美解决了我的疑问，同时也解除了我的帐户危机。</p>
<p>那么，我如果很讨厌某个用户，能否通过不断踩他的问题和答案让他的账户变成危险状态呢，这在其他的网络社区可是屡见不鲜的事情。然而在 StackExchange 则没有可能，它有一整套防止私人攻击的规则，比如你要是反对了某人的答案，则除了扣他 2 声誉，你自己也要扣去 1 声誉，这样你在踩别人的时候，必然会三思而后行；如果你真的对某人怀恨在心，只要是他的问题你就反对，那怎么办？StackExchange 不允许这种情况发生，你根本无法完成这样的操作。甚至不仅是持续反对某人，你也无法持续赞同某人，这样的行为被称为「投票欺诈」（voting fraud），系统会严格禁止此类行为，以保证问答的客观性。</p>
<h3 id="自治、自制"><a href="#自治、自制" class="headerlink" title="自治、自制"></a>自治、自制</h3><p>由于 StackExchange 是一个知识型社区，它最关心的必然是网站内容的质量，所以如何规避低端问答一定是网站设计者首要考虑的问题。很多同类社区在发展初期由于比较小众，用户水平较高，即使出现低质量内容，管理员也能及时控制；然而一旦用户增多，内容覆盖范围扩大，这个问题就没法解决了。首先管理员根本来不及控制不断涌现的内容，其次他们也未必有那个水平去做判断。</p>
<p>StackExchange 采用基于声誉值的管理制度则比较完善地解决了这个问题。初级用户不能点赞的设定，表明了网站对普通网民的不信任，这种不信任是合理的，毕竟有那么多曾经优秀的社区都被网络水军们给糟蹋了；你如果仅仅是来寻找答案的，那没问题，网站的一切内容全部公开，甚至做了 SEO，你用 Google 就能搜到 StackExchange 的任何一个问答。但你如果想对 StackExchange 有所贡献，就不那么简单了，你必须证明自己具备这个资格，如何证明？提出好问题。只有好问题才会吸引人来作答，才会被人顶起，才能获得最初的声誉。</p>
<p>StackExchange 对问问题有着严格的规定，比如提问前必须搜索已有问答，避免问重复问题，避免问与社区主题无关的问题，避免问范围模糊的问题；此外问题描述要详实具体，给出例证，要具有可重现性；语言方面还要过关，不能词不达意，也不能啰啰嗦嗦…… 这么多规定简直像是对学术论文的要求，规则制定者一定笃信只有好的问题才能引出好的答案。那么这么严苛的规定不怕把用户吓跑吗？不怕，因为吓跑的本来就不是 StackExchange 的目标用户群，这毕竟是个知识型社区，不是普通的社交网络，用户数量从来都不是它关心的，高质量用户数量才是它关心的。事实上，StackExchange 的游戏规则非但没有吓跑用户，反而正在吸引越来越多的人参与其中。</p>
<p>在我看来，这种用户自治的游戏规则是最高明的管理策略，社区建设者只用把平台搭建好，剩下的工作就交给广大用户，而真正愿意参与这个社区的用户都必然是认真对待的，声誉值越高的用户，责任感也越强，想要获得高的声誉值，就得懂得自制，按着游戏规则玩，慢慢积累。</p>
<p>你可能会奇怪，既然问个问题都如此麻烦，为何我还要在上面花费时间？原因有二：</p>
<p>首先，对于这种业界公认的知识型社区，由于它的干货比重远远超出同类网站，其用户的声誉值便也有了独特的含金量，就好比一个项目被 fork 的次数之于 GitHub，声誉值在这里可以说明一切。你若能在自己的简历中写上 Stackoverflow 声誉值过万，任何一家用人单位都不会视而不见。</p>
<p>其次，并非所有人做什么事都要有所回报，这有点类似去问那些编辑维基百科的志愿者为何要花自己时间去做这种费力不讨好的事情。现在互联网上各种社区层出不穷，质量也是参差不齐，好不容易出现一个用户都那么认真对待的社区，当然倍受欢迎，因为这上面的讨论氛围是无可比拟的，一个问题问出去，可能几分钟内就有人回复，有的是指出你提问的不足之处，有的是给出可能有帮助的参考资料，甚至还有帮你纠正英语语法错误的…… 在这样的社区中，可能要比平时多花几倍时间才能完成一次提问，但你所收获的将更多。</p>
<p>这，才是真正的「人人为我，我为人人。」</p>
]]></content>
      <tags>
        <tag>website</tag>
      </tags>
  </entry>
  <entry>
    <title>TexStudio 配置及使用笔记</title>
    <url>/posts/TexStudio-Configuration-and-Usage-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>博客园：<a href="https://www.cnblogs.com/zyg123/p/10499675.html">06LaTeX 学习系列之 —TeXstudio 的使用</a></li>
<li>博客园：<a href="https://www.cnblogs.com/tsingke/p/15874512.html">Texstudio 常用快捷键（非常实用）</a></li>
<li>个人博客：<a href="http://haccanri.github.io/tools/2015/04/22/tex_editor.html">Texstudio 使用经验</a>（高阶操作）</li>
<li>连享会：<a href="https://lianxh.cn/news/1175c7e5d0ee0.html">LaTeX：TeXStudio 编辑器快捷键大全</a></li>
</ul>
<h3 id="1、常用快捷键"><a href="#1、常用快捷键" class="headerlink" title="1、常用快捷键"></a>1、常用快捷键</h3><table>
<thead>
<tr>
<th align="center"><strong>操作</strong></th>
<th align="center"><strong>快捷键</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">插入环境</td>
<td align="center"> Ctrl+E</td>
</tr>
<tr>
<td align="center"> 插入行内公式</td>
<td align="center"> Ctrl+Shift+M</td>
</tr>
<tr>
<td align="center"> 注释 / 取消注释</td>
<td align="center"> Ctrl+T</td>
</tr>
<tr>
<td align="center"> 查看 PDF</td>
<td align="center">F7</td>
</tr>
<tr>
<td align="center"> 预览行内数学公式</td>
<td align="center"> Alt +P</td>
</tr>
<tr>
<td align="center"> 从 PDF 跳转至对应的 Tex</td>
<td align="center"> 在 PDF 中按 Ctrl 单击</td>
</tr>
</tbody></table>
<iframe src="https://quizlet.com/756156284/match/embed?i=24q5fr&amp;x=1jj1" height="500" width="100%" style="border:0"></iframe>

<h3 id="2、设置中文界面"><a href="#2、设置中文界面" class="headerlink" title="2、设置中文界面"></a>2、设置中文界面</h3><p><img data-src="https://s2.loli.net/2022/12/12/2Z6GLWJimAVSR9E.png" alt="01-Texstudio设置中文界面.png"></p>
<h3 id="3、设置编译器与编码"><a href="#3、设置编译器与编码" class="headerlink" title="3、设置编译器与编码"></a>3、设置编译器与编码</h3><p>为了正常的输出中文，我们需要把编译器改成 XeLaTeX ，utf-8 编码（默认）</p>
<h3 id="4、显示代码行号"><a href="#4、显示代码行号" class="headerlink" title="4、显示代码行号"></a>4、显示代码行号</h3><p><img data-src="https://s2.loli.net/2022/12/12/8nySts4QxHBTfje.png" alt="02-Texstudio显示行号.png"></p>
<h3 id="5、括号匹配高亮"><a href="#5、括号匹配高亮" class="headerlink" title="5、括号匹配高亮"></a>5、括号匹配高亮</h3><p>TexStudio 默认的括号匹配背景色好像是黄色的，有些看不清，不如设置个更亮一点的颜色吧</p>
<p><img data-src="https://s2.loli.net/2022/12/12/VkrzEOAZC9scXLQ.png" alt="03-括号匹配高亮1.png"></p>
<p><img data-src="https://s2.loli.net/2022/12/12/7vxtaQ1zIYOZFno.png" alt="04-括号匹配高亮2.png"></p>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
  </entry>
  <entry>
    <title>VScode 配置 md 模板</title>
    <url>/posts/VScode-configuration-md-template.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>需要使用 VScode 来编辑 md 文件，并且希望每次在创建 md 文档时，都能够自动补全 YAML 文件信息</p>
<h3 id="配置-setting-json-文件"><a href="#配置-setting-json-文件" class="headerlink" title="配置 setting.json 文件"></a>配置 setting.json 文件</h3><ol>
<li>Ctrl+Shift+P，搜索 setting，选择 <code>首选项：打开用户设置 (json)</code></li>
<li>在这给文件中添加如下代码 </li>
</ol>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">"[markdown]"</span>:  {  </span><br><span class="line">    <span class="attr">"editor.quickSuggestions"</span>: <span class="literal">true</span>  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>以下图片显示的是之前就对 setting.json 文件配置过，找到 markdown 的位置添加上述的那一行代码即可；如果之前没有配置过，只需要将上述的那一串代码全部复制到下图中最大的一对黄括号中即可<br><img data-src="https://s2.loli.net/2022/11/30/4GztnFY2WcTpmJa.png" alt="配置SettingJson.png"></p>
<h3 id="配置-md-模板"><a href="#配置-md-模板" class="headerlink" title="配置 md 模板"></a>配置 md 模板</h3><p><img data-src="https://s2.loli.net/2022/11/30/vV6rAHzYCo8EZk3.png" alt="01-VScode配置用户代码片段.png"></p>
<ol>
<li>Ctrl+Shift+P，搜索 snippets，选则 <code>配置用户代码片段</code>，再选择 <code>markdown</code></li>
<li>将一下代码复制进去保存</li>
<li>新建 md 文档之后，输入 <code>log</code> 敲 tab 即可自动补全配置好的模板 </li>
</ol>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line"> <span class="comment">// Place your snippets for markdown here. Each snippet is defined under a snippet name and has a prefix, body and</span></span><br><span class="line"> <span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line"> <span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the</span></span><br><span class="line"> <span class="comment">// same ids are connected.</span></span><br><span class="line"> <span class="comment">// Example:</span></span><br><span class="line"> <span class="comment">// 联想时显示的文字内容</span></span><br><span class="line"> <span class="attr">"create blog"</span>: {</span><br><span class="line">   <span class="attr">"prefix"</span>: <span class="string">"log"</span>, <span class="comment">// 输入log，即显示模板提示</span></span><br><span class="line">   <span class="attr">"body"</span>: [</span><br><span class="line">  <span class="comment">// body里是模板内容</span></span><br><span class="line">  <span class="string">"---"</span>,</span><br><span class="line">  <span class="string">"title: $1"</span>, <span class="comment">// $1表示生成模板后，光标最先在此位置</span></span><br><span class="line">  <span class="string">"date: $2"</span>, <span class="comment">// $2表示，在$1处输入完成后，按tab键，光标便跳转到这里，以此类推</span></span><br><span class="line">  <span class="string">"tags:"</span>,</span><br><span class="line">  <span class="string">"  - $3"</span>,</span><br><span class="line">  <span class="string">"---"</span>,</span><br><span class="line">  <span class="string">""</span>,</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">"description"</span>: <span class="string">"blog模板"</span></span><br><span class="line"> }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>个人博客：<a href="http://allanhao.com/2022/07/17/2022-07-17-vscode-markdown/">VSCode 配置 Markdown 模板 | AllanHao</a></li>
</ul>
]]></content>
      <tags>
        <tag>markdown</tag>
        <tag>VScode</tag>
      </tags>
  </entry>
  <entry>
    <title>Vimium-C 自定义配置</title>
    <url>/posts/Vimium-C-Custom-Configuration.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="了解-Vimium"><a href="#了解-Vimium" class="headerlink" title="了解 Vimium"></a>了解 Vimium</h3><ol>
<li>少数派：<a href="https://sspai.com/post/27723">让你用 Chrome 上网快到想哭：Vimium - 少数派</a></li>
<li> Chrome Web Store：<a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb/related?hl=en">Chrome Web Store - Extensions</a></li>
<li> 简书：<a href="https://www.jianshu.com/p/2b9b262e3817">Vimium——Chrome 里的极客插件</a></li>
</ol>
<h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>缘由：本想着为什么是 “j” 和 “k” 表示上下滚动，明明左手一般在键盘位置，右手握鼠标，显然 jk 这两个按键需要使用到右手，而我又不能完全放弃鼠标，这反而会影响效率。那么干脆将需要的按的键位都放在左上边，这样多好。</p>
<p>该配置上参考：<a href="https://blog.csdn.net/qq_44722174/article/details/123593899">22/03/ Vimium C: 浏览器扩展 键盘快捷键自定义_鬼扯子的博客 - CSDN 博客</a></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">unmapAll                    #取消所有映射</span><br><span class="line"></span><br><span class="line">map W scrollToTop           #滚动到顶部</span><br><span class="line">map S scrollToBottom        #滚动到底部</span><br><span class="line">map w scrollPageUp          #向上滚动半个页面的高度</span><br><span class="line">map s scrollPageDown        #向下滚动半个页面的高度</span><br><span class="line"></span><br><span class="line">map r reload                #刷新当前子页面</span><br><span class="line">map R goBack                  #返回上一页面</span><br><span class="line"></span><br><span class="line">map gg goToRoot   #返回首页</span><br><span class="line">map p openCopiedUrlInNewTab  #在新标签页中打开粘贴板网址</span><br><span class="line">map f LinkHints.activate    #点击网页中的链接和按钮</span><br><span class="line">map x removeTab               #关闭当前标签页</span><br><span class="line">map X restoreTab                   #打开关闭的标签页</span><br><span class="line">map a previousTab        #上一个标签页</span><br><span class="line">map d nextTab  #下一个标签页</span><br><span class="line">map t createTab  #新建标签页</span><br><span class="line">map yy copyCurrentUrl  #复制当前链接</span><br><span class="line"></span><br><span class="line">map o Vomnibar.activateInNewTab #新建标签页搜索</span><br><span class="line">map O Vomnibar.activate    #当前标签页搜索</span><br><span class="line">map ? showHelp              #显示帮助页面</span><br><span class="line">map q focusInput          #切换选择光标</span><br><span class="line">map A togglePinTab  #固定当前页面</span><br><span class="line">map gf firstTab  #切换到第一个页面</span><br><span class="line">map gl lastTab  #切换最后一个页面   </span><br><span class="line"></span><br><span class="line">map v enterVisualMode #进入文字选定模式</span><br><span class="line">map V enterVisualLineMode #进入文字行选定模式</span><br><span class="line"></span><br><span class="line">map / enterFindMode #进入文字查找模式</span><br><span class="line">map n performFind #查找下一处</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/12/04/RBw9cSXm3NTC78A.png" alt="Vimium-C自定义配置.png"></p>
<h3 id="作用于-Chrome-原生标签页"><a href="#作用于-Chrome-原生标签页" class="headerlink" title="作用于 Chrome 原生标签页"></a>作用于 Chrome 原生标签页</h3><p>Vimium 无法在 Chrome 新标签页和一些 Chrome 原生页面上运行快捷键，需要进行如下配置，在 chrome 浏览器中复制如下内容即可开启 <code>Extensions on chrome://URLs</code> 设置</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">chrome://flags/#extensions-on-chrome-urls</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/12/04/EehW7MSZRbVHzLa.png" alt="作用于Chrome原生标签页.png"></p>
<p>开启这个选项之后，就可以对 Chrome 的新标签页和 Chrome 原生的页面进行 Vimium 的快捷键使用啦：)</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>CSDN：<a href="https://blog.csdn.net/qq_44722174/article/details/123593899">22/03/ Vimium C: 浏览器扩展 键盘快捷键自定义_鬼扯子的博客 - CSDN 博客</a></li>
<li>个人博客：<a href="https://www.myql.xyz/post/9c212729/">扩展推荐 ——Vimium C: 键盘快捷键 - 暮雨千泷</a></li>
</ol>
]]></content>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Visio 学习笔记</title>
    <url>/posts/Visio-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="导出高清图片"><a href="#导出高清图片" class="headerlink" title="导出高清图片"></a>导出高清图片</h3><p>导出图片时的关键设置</p>
<ul>
<li>颜色格式设置为 256 位（实际上默认 24 位色也是足够了的）</li>
<li><del>分辨率设置为打印机模式（400×400 效果已经不错了）</del></li>
<li>分辨率设置为自定义，300 × 300 像素 /in. 效果已经非常不错 </li>
</ul>
<h3 id="绘制圆角箭头"><a href="#绘制圆角箭头" class="headerlink" title="绘制圆角箭头"></a>绘制圆角箭头</h3><p>有时候直接使用直线工具绘制箭头比自带的箭头工具好用得多，以下图片中演示的就是使用直线工具来绘制箭头<br><img data-src="https://s2.loli.net/2022/11/30/Ph3jGZ1o5XQbta2.gif" alt="Visio绘制圆角箭头.gif"></p>
<h3 id="格式刷的应用"><a href="#格式刷的应用" class="headerlink" title="格式刷的应用"></a>格式刷的应用</h3><p>比下图所示，箭头可以通过格式化统一成一致的样式<br><img data-src="https://s2.loli.net/2022/11/30/FsupNOYVwTB35d1.gif" alt="Visio使用格式刷绘制箭头.gif"></p>
<h3 id="标准色块的使用"><a href="#标准色块的使用" class="headerlink" title="标准色块的使用"></a>标准色块的使用</h3><p>将图片统一调整 / 裁剪成一样的比例 —&gt; 如何快速的设置选框 —&gt; 新建一个固定的标准矩形</p>
<p><img data-src="https://s2.loli.net/2023/10/20/xYOBiE8KyghI3pt.png" alt="Pasted image 20231020154604.png"></p>
<ol>
<li>新建标准矩形，添加填充色</li>
<li>裁剪的时候，会有一些透明，可以透过这层透明查找裁剪的边缘，很方便可以找到标准色块的边</li>
</ol>
<h3 id="上下角标"><a href="#上下角标" class="headerlink" title="上下角标"></a>上下角标</h3><p>Visio 不像 Word 那样有上角标，下角标按钮，需要使用到快捷键来完成这个操作</p>
<p>上角标：Ctrl + Shift + =</p>
<p>下角标：Ctrl + =</p>
<h3 id="嵌入-Word-中"><a href="#嵌入-Word-中" class="headerlink" title="嵌入 Word 中"></a>嵌入 Word 中</h3><p>如何调整 Visio 对象的嵌入格式以及 Visio 对象尺寸</p>
<p>右键 Visio 对象 —&gt; 图片 —&gt; 调整大小和版式等操作</p>
<p><img data-src="https://s2.loli.net/2023/10/20/lYVqFiXH9c5szEB.gif" alt="Visio对象嵌入Word当中调整图片.gif"></p>
<h3 id="如何插入表格"><a href="#如何插入表格" class="headerlink" title="如何插入表格"></a>如何插入表格</h3><p>从 Excel 中复制表格，粘贴到 Visio 中，粘贴的时候<strong>选择性粘贴</strong>，选择 Excel 格式。此时 Visio 中的数据是和 Excel 表格中的数据是关联的，还可以实现动态更新呢</p>
<p>如果在 Visio 中调整表格的格式，比如字体的颜色，那么需要双击进入到关联的 Excel 表格中，在 Excel 中修改格式</p>
<h3 id="粘贴到-word-中白边太宽"><a href="#粘贴到-word-中白边太宽" class="headerlink" title="粘贴到 word 中白边太宽"></a>粘贴到 word 中白边太宽</h3><p>将 Visio 图直接粘贴到 Word 中时，可能会遇到 Visio 图片显示不全的情况。word 中双击这个 Visio 对象，可以按住 control/Ctrl 键，拖动画布边缘，调整画布尺寸至合适大小，鼠标离开 Visio 对象编辑区域单击即可自动保存</p>
<h3 id="导出图片时最下方出现一行空白"><a href="#导出图片时最下方出现一行空白" class="headerlink" title="导出图片时最下方出现一行空白"></a>导出图片时最下方出现一行空白</h3><p>这可能是图片的图注造成的</p>
<p>双击图片时，自动会弹出一个文本框，如果敲了一个空格，再退出编辑，此时图片的图注就仅有一个空白的空格，导致出图的时候把这个空白的图注也带上了</p>
<p>解决方案：可以通过查询空格字符，如果能够查询得到，就会自动跳转到图注位置，删除这个空格即可</p>
<h3 id="visio-取消首字母自动大写"><a href="#visio-取消首字母自动大写" class="headerlink" title="visio 取消首字母自动大写"></a>visio 取消首字母自动大写</h3><p><img data-src="https://s2.loli.net/2022/11/30/TMo2lqfrWc8nEDO.png" alt="Visio取消首字母自动大写.png"></p>
<h3 id="两形状之间直的连接线"><a href="#两形状之间直的连接线" class="headerlink" title="两形状之间直的连接线"></a>两形状之间直的连接线</h3><p>这种情况有两种解决办法：</p>
<ol>
<li>微调：选中下面的矩形通过 shift+ 方向键 微调来完成</li>
<li>对齐：选中整个图形，选择排列，选中水平居中进行调整即可</li>
<li>对不齐的时候，试试按着 Alt 键拖动形状试试：)</li>
</ol>
<h3 id="绘图时保证图片与文字大小协调"><a href="#绘图时保证图片与文字大小协调" class="headerlink" title="绘图时保证图片与文字大小协调"></a>绘图时保证图片与文字大小协调</h3><ol>
<li>首先输入 8-12 号的字体，插入图片调整至和文字协调的大小（图片尽可能是由大图调整至小图），也就是说图片的大小按照标准的文字大小进行调整</li>
<li>最好提前想好这张图在投稿时是打算单栏排版还是双栏排版，或者两个排版方式各导出一张</li>
<li>图片更新时，最好在同一个 Visio 文件中新建页面，在新建的页面中对图片进行编辑，保存旧版本图片</li>
</ol>
<h3 id="辅助线"><a href="#辅助线" class="headerlink" title="辅助线"></a>辅助线</h3><p>从标尺处拖拉可添加辅助线</p>
<h3 id="连接线与线条"><a href="#连接线与线条" class="headerlink" title="连接线与线条"></a>连接线与线条</h3><p>能用线条的地方尽量不要用连接线。连接线通常用来连接两个形状，但是这两个形状位置或大小发生变化或者整张大图的比例需要调整时，这个连接线就会自动更着变化，非常容易导致排版问题。连续画几条线条，这几条线条会自动连接在一起，并且在属性中也可以设置圆角，箭头等属性，这样已经完全可以实现连接线的功能了，所以，尽可能不要再绘图中使用连接线。</p>
<h3 id="编辑-Xmind-导出的形状"><a href="#编辑-Xmind-导出的形状" class="headerlink" title="编辑 Xmind 导出的形状"></a>编辑 Xmind 导出的形状</h3><ol>
<li>Xmind 导出形状为 SVG 格式</li>
<li> Visio 自带 SVG 格式编辑功能</li>
<li>还是矢量图格式的，妙啊！</li>
</ol>
<h3 id="Visio2PPT"><a href="#Visio2PPT" class="headerlink" title="Visio2PPT"></a>Visio2PPT</h3><p>直接框选复制到 ppt 当中，会自动转换为 emf 格式的矢量图片，而且背景是透明的哦，不会受 vision 背景底图的影响</p>
<h3 id="思维导图样式"><a href="#思维导图样式" class="headerlink" title="思维导图样式"></a>思维导图样式</h3><p>![[Visio 一对多多对一线条绘制 1.gif]]</p>
<h3 id="导出-PDF"><a href="#导出-PDF" class="headerlink" title="导出 PDF"></a>导出 PDF</h3><p>1、如果有多个页面，导出 PDF 时默认会将所有的页面都导出。如果只想导出当前页面，记得勾选</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240612222714.png" alt="image.png"></p>
<p>2、PDF 页面是按照画布来的，有空白的地方在 PDF 中也会跟着导出，故需要提前调整画布尺寸</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240612222816.png" alt="image.png"></p>
<h3 id="CAD2Visio"><a href="#CAD2Visio" class="headerlink" title="CAD2Visio"></a>CAD2Visio</h3><p>在 Visio 中，可将复制到 CAD 图形当成一个对象，双击还可进入 CAD 中进行编辑</p>
<p><img data-src="https://s2.loli.net/2024/06/12/CWw5VeSmslQALET.gif"></p>
<h3 id="收藏夹的应用"><a href="#收藏夹的应用" class="headerlink" title="收藏夹的应用"></a>收藏夹的应用</h3><p>1、可应用 Visio 中自带的一些形状，例如水平基线和垂直基线来给图形添加尺寸</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240612223331.png" alt="image.png"></p>
<p>2、可将常用的形状加入收藏夹，后期方便反复调用</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240612223354.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>Research</category>
      </categories>
      <tags>
        <tag>PDF</tag>
        <tag>Research</tag>
        <tag>Drawing</tag>
        <tag>Visio</tag>
      </tags>
  </entry>
  <entry>
    <title>Word 操作指南</title>
    <url>/posts/Word-operation-guide.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="粘贴时保留纯文本"><a href="#粘贴时保留纯文本" class="headerlink" title="粘贴时保留纯文本"></a>粘贴时保留纯文本</h3><p>参考资料：<a href="https://jingyan.baidu.com/article/215817f78099da5fda1423da.html#:~:text=%E6%96%B9%E6%B3%95%2F%E6%AD%A5%E9%AA%A4&amp;text=%E6%89%93%E5%BC%80WORD%E6%96%87%E6%A1%A3%EF%BC%8C%E7%82%B9%E5%87%BB%E6%96%87%E4%BB%B6,%E9%80%89%E9%A1%B9%EF%BC%8C%E5%BC%B9%E5%87%BA%E9%80%89%E9%A1%B9%E8%AE%BE%E7%BD%AE%E6%A1%86%E3%80%82&amp;text=%E7%82%B9%E5%87%BB%E2%80%9C%E9%AB%98%E7%BA%A7%E2%80%9D%E9%80%89%E9%A1%B9%E5%8D%A1%EF%BC%8C,%E4%BB%85%E4%BF%9D%E7%95%99%E6%96%87%E6%9C%AC%E2%80%9D%E5%8D%B3%E5%8F%AF%E3%80%82">如何设置 WORD 粘贴时默认仅保留文本格式 - 百度经验</a></p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240614152058.png" alt="image.png"></p>
<p>之后从浏览器中粘贴过来，就不需要在按一次 Ctrl，然后再按 T 了，直接粘贴为纯文本格式</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240614152107.png" alt="image.png"></p>
<h3 id="使用自定义模板"><a href="#使用自定义模板" class="headerlink" title="使用自定义模板"></a>使用自定义模板</h3><p>参考资料：<a href="https://blog.csdn.net/glgom/article/details/115940158">office 增加自定义文档模板_用户可自定义文档类型的模板，对文档模板进行规范，并可定义模板中的 “签字标记”-CSDN 博客</a></p>
<ol>
<li>打开手头的 word 模板</li>
<li>另存为 dotx，会自动跳转到自定义 office 模板的文件夹路径，保存</li>
<li>再次新建 word 文档的时候，可从 <code>个人</code> 的模板中选择进行新建文档</li>
</ol>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240614152435.png" alt="image.png"></p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240614152439.png" alt="image.png"></p>
<h3 id="Mathtype-插入公式"><a href="#Mathtype-插入公式" class="headerlink" title="Mathtype 插入公式"></a>Mathtype 插入公式</h3><p>如果使用中文输入法，那么输出的 x 这样的字符就不是标准的数学字体，切换成英文</p>
<p><img data-src="https://s2.loli.net/2024/06/14/akbZ73Hzg9h45uG.gif"></p>
<h3 id="Word-自带的公式"><a href="#Word-自带的公式" class="headerlink" title="Word 自带的公式"></a>Word 自带的公式</h3><p>有专用和线性区别，比如说如下的 Cambria Math 字体，还有两种显示模式</p>
<p><img data-src="https://s2.loli.net/2024/06/14/abAZgeXv1yFHpqL.gif"></p>
<h3 id="调整表格行高"><a href="#调整表格行高" class="headerlink" title="调整表格行高"></a>调整表格行高</h3><p>问题：直接调整段落，设置为最小值，表格之间仍然还是有间隙</p>
<p>1、先手动减小这个高度</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240614153137.png" alt="image.png"></p>
<p>2、调整完之后，行与行之间的间隙没有了</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240614153155.png" alt="image.png"></p>
<p>3、此时在调整为最小值</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240614153210.png" alt="image.png"></p>
<h3 id="网页文字复制"><a href="#网页文字复制" class="headerlink" title="网页文字复制"></a>网页文字复制</h3><p>有些网站是禁止复制文字的 —&gt; 在不使用浏览器插件的情况下，可以将网页保存为 mhtml 本地文件</p>
]]></content>
      <tags>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>Zotero 学习笔记</title>
    <url>/posts/Zotero-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>茉莉花 Jasminum 插件：<a href="https://github.com/l0o0/jasminum">GitHub - l0o0/jasminum: A Zotero add-on to retrive CNKI meta data. 一个简单的 Zotero 插件，用于识别中文元数据</a></li>
<li> zotfile 插件：<a href="https://github.com/jlegewie/zotfile">GitHub - jlegewie/zotfile: Zotero plugin to manage your attachments: automatically rename, move, and attach PDFs (or other files) to Zotero items</a></li>
<li>Zutilo 插件：<a href="https://github.com/wshanks/Zutilo">GitHub - wshanks/Zutilo: Zotero plugin providing some additional editing features</a></li>
<li>scite-zotero-plugin 插件：<a href="https://github.com/scitedotai/scite-zotero-plugin">GitHub - scitedotai/scite-zotero-plugin: scite zotero plugin</a></li>
<li>zotero-better-bibtex 插件：<a href="https://retorque.re/zotero-better-bibtex/">Better BibTeX for Zotero :: Better BibTeX for Zotero</a></li>
<li> 个人博客：<a href="https://jieli-matrix.github.io/automatic-insert-bib/">使用 Zotero 自动导出参考文献到 Word/Latex | Trace of Life</a></li>
<li> 个人博客：<a href="https://liam.page/2020/03/30/writing-manuscript-in-Markdown-and-typesetting-with-LaTeX/">以 Markdown 撰写文稿，以 LaTeX 排版</a> 以及 <a href="https://coffeelize.top/posts/23aacf40.html">以 Markdown 撰写文稿，以 LaTeX 排版</a></li>
<li>个人博客：<a href="https://snailwish.com/291/">Zotero 插件 Bibtex for Zotero 介绍和安装</a></li>
<li>个人博客：<a href="http://47.98.142.167/238/">加入参考文献，Markdown 完美转化成 Word - 倔强的小蜗牛</a></li>
<li>个人博客：<a href="https://liuyun16.github.io/tools/2018-2-24-atom-markdown-zotero/">使用 Markdown 写作并插入参考文献（atom+pandoc+Zotero） &lt; 岁月流韵</a></li>
<li>少数派：<a href="https://sspai.com/post/60825">使用 Zotero 在 Markdown 中优雅地处理参考文献 - 少数派</a></li>
</ul>
]]></content>
      <categories>
        <category>Research</category>
      </categories>
      <tags>
        <tag>Research</tag>
      </tags>
  </entry>
  <entry>
    <title>xlsx4Anki</title>
    <url>/posts/xlsx-for-Anki.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="Anki-插件"><a href="#Anki-插件" class="headerlink" title="Anki 插件"></a>Anki 插件</h3><ul>
<li><a href="https://ankiweb.net/shared/info/716643677">Spreadsheet Import Plus - AnkiWeb</a></li>
</ul>
<h3 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h3><p>在该插件开发出来之前，需要通过 CSV/TXT 文件进行导入，过程比较繁琐，并且 CSV 文件在保存时通常不能保存所有数据 —&gt; 该插件极大简化了流程</p>
<p>实现了通过电子表格来维护牌组数据，因为电子表格中的数据是原始数据，Anki 牌组中的数据只是副本 —&gt; 在表格中添加新数据再导入到 Anki 时，可以选择原来表格中的旧数据是否覆盖（更新旧数据），并顺利将新添加的数据导入 Anki</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>第一行：字段名<br>第二行：设置格式，包括 text, html, markdown 三种格式</p>
<p><img data-src="https://s2.loli.net/2023/10/21/PVKeRDNjUlALqF3.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>Anki</category>
      </categories>
      <tags>
        <tag>Anki</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>以 Markdown 撰写文稿，以 LaTeX 排版</title>
    <url>/posts/Writing-in-Markdown-and-typesetting-in-LaTeX.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>个人博客： <a href="https://liam.page/2020/03/30/writing-manuscript-in-Markdown-and-typesetting-with-LaTeX/">以 Markdown 撰写文稿，以 LaTeX 排版</a> </li>
</ul>
<h3 id="简介以及基本用法"><a href="#简介以及基本用法" class="headerlink" title="简介以及基本用法"></a>简介以及基本用法</h3><p>请参考 <a href="https://liam.page/2020/03/30/writing-manuscript-in-Markdown-and-typesetting-with-LaTeX/">以 Markdown 撰写文稿，以 LaTeX 排版</a></p>
<h3 id="最小实例"><a href="#最小实例" class="headerlink" title="最小实例"></a>最小实例</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{markdown}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\begin</span>{markdown}</span><br><span class="line"></span><br><span class="line">1.markdown内容顶格写</span><br><span class="line">2.空行检查是否有多余的Tab缩进</span><br><span class="line">3.请使用PowerShell进行编译，无法在TexStudio中的运行进行编译</span><br><span class="line"></span><br><span class="line"> <span class="keyword">\end</span>{markdown}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/11/29/kylrxgY8iqMuvAn.gif" alt="markdown2latex.gif"></p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol>
<li>在含有 tex 源文件的目录下使用 Powershell 对如下命令进行编译 </li>
</ol>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line">xelatex --shell-escape texname.tex</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>使用 markdown 宏包之后，需要在 markdown 环境中书写 markdown 内容</li>
<li> markdown 内容做到左侧无缩进（靠左侧顶格写）</li>
<li>同其他普通的 tex 文档一样，可以使用定制样式的文档类或宏包</li>
</ol>
<p>比如可以使用我们喜欢的文档类，只要将相应的 cls 文件复制到同一目录下，在导言区引用即可</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[cn,normal,11pt,blue]{elegantnote}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="可能会出现的问题"><a href="#可能会出现的问题" class="headerlink" title="可能会出现的问题"></a>可能会出现的问题</h3><ol>
<li>二级列表也顶格写的话就会变成一级列表</li>
</ol>
<p>解决办法：在二级列表的前面添加四个空格，而不是增加一个 tab 键</p>
<ol start="2">
<li>Markdown 中含有繁体中文时，输出的 PDF 中繁体中文显示会有问题</li>
<li>网页中带有中文字符等特殊符号时，会自动转义导致网页链接出错</li>
</ol>
<p>解决办法：使用短链接，比如 Github：<a href="https://github.com/icowan/shorter">shorter</a>，或者 Github：<a href="https://github.com/imfycc/short_url">short_url</a></p>
<ol start="4">
<li> 图片大小渲染问题，请参考：<a href="https://liam.page/2020/03/30/writing-manuscript-in-Markdown-and-typesetting-with-LaTeX/">以 Markdown 撰写文稿，以 LaTeX 排版</a> </li>
</ol>
]]></content>
      <tags>
        <tag>LaTeX</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>ublacklist 订阅源</title>
    <url>/posts/ublacklist-subscription-feed.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有关 ublacklist 的内容可参考本博客之前的文章：<a href="https://coffeelize.top/posts/aa1c9829.html">屏蔽内容农场简明指南</a></p>
<h3 id="ublacklist-订阅源"><a href="#ublacklist-订阅源" class="headerlink" title="ublacklist 订阅源"></a>ublacklist 订阅源</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/cobaltdisco/Google-Chinese-Results-Blocklist/master/uBlacklist_subscription.txt </span><br><span class="line">https://raw.githubusercontent.com/arosh/ublacklist-github-translation/master/uBlacklist.txt </span><br><span class="line">https://raw.githubusercontent.com/dallaslu/penzai-list/main/uBlacklist.txt </span><br><span class="line">https://raw.githubusercontent.com/liubiantao/uBlacklist-Websites/master/uBlacklist.txt </span><br><span class="line">https://raw.githubusercontent.com/arosh/ublacklist-stackoverflow-translation/master/uBlacklist.txt</span><br></pre></td></tr></tbody></table></figure>

<h3 id="插件设置"><a href="#插件设置" class="headerlink" title="插件设置"></a>插件设置</h3><ul>
<li>添加订阅源</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/07/24/kDFgzdmErVG8o9N.png" alt="01-添加订阅源.png"></p>
<ul>
<li>屏蔽列表多端同步</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/07/24/i7SD9CJxvY5a3WP.png" alt="02-屏蔽列表多端同步.png"></p>
<h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ul>
<li><a href="https://www.ruanyifeng.com/blog/2021/07/weekly-issue-167.html">广告拦截器太过分了</a> - 阮一峰的网络日志</li>
<li>个人博客：<a href="https://coffeelize.top/posts/aa1c9829.html">屏蔽内容农场简明指南</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>从 anki 到 spaced-Repetition 总结及建议</title>
    <url>/posts/From-anki-to-spaced-Repetition-Summary-and-Recommendations.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本教程不涉及 Anki 的安装、制卡、牌组设置和自定义牌组模板（样式）等具体操作。这里仅列举了作为一个 Anki 的 3 年老用户学习 / 使用过程中的一些优秀资源，以下的一些链接中或许包含本人之前发布的一些内容，虽部分过时但仍推荐看一看。</p>
<blockquote>
<p>如果个人记忆系统 (这里指 Anki) 这么好，为什么人们没有广泛地使用他们呢？<br>这个问题类似于两个经济学家的老笑话，当他们中的一个人看到地上一张 20 美元的钞票时，他说：“看，地上有 20 美元！” 另一个回答：“不可能，如果真的有，早就有人捡到了。” ——Anki 看起来就像是躺在地上的 20 美元</p>
</blockquote>
<h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><ul>
<li>Anki 2.1 <a href="http://www.ankichina.net/manual/anki/">中文用户手册</a><ul>
<li> Why Anki： <a href="https://docs.ankiweb.net/background.html#background">Background</a></li>
</ul>
</li>
<li>augmentingcognition.com： <a href="http://augmentingcognition.com/ltm.html">Augmenting Long-term Memory</a></li>
<li> 个人博客： <a href="https://www.masterhowtolearn.com/">Master How To Learn</a></li>
<li>Bilibili： <a href="https://www.bilibili.com/video/BV1cp4y1a7HZ?spm_id_from=333.999.0.0&amp;vd_source=3ae7ae95fa254383ab9ae83f75abd29d">（入门）Anki 图表说明</a><ul>
<li>转载自 Youtube： <a href="https://www.youtube.com/watch?v=eFqkI_RiSJM&amp;t=5s">Anki 圖表說明</a></li>
</ul>
</li>
<li> Bilibili： <a href="https://www.bilibili.com/video/BV1364y1Q71o?spm_id_from=333.999.0.0&amp;vd_source=3ae7ae95fa254383ab9ae83f75abd29d">用 Anki 增强专业学习能力</a><ul>
<li>转载自 Youtube： <a href="https://www.youtube.com/watch?v=jXHRU5kT0Vw&amp;t=1389s">用 Anki 加強專業能力，影片解說</a><ul>
<li>如若条件允许，可以查看该作者在 Youtube 上关于 Anki 的系列视频。</li>
</ul>
</li>
<li>视频作者为台湾作者，写过一本关于 Anki 的一本书和一个网站：分别为《 <a href="https://www.books.com.tw/products/0010740471">英、日語同步 Anki 自學法</a> 》和 <a href="https://tolu.tw/auth.html">脫魯祕笈</a> 。书的内容对 Anki 的具体操作其实涉及的较少，不推荐购买；网站中有作者使用 Anki 的一些心得</li>
</ul>
</li>
<li>书籍：How to take smart notes<ul>
<li> 中文译版：卡片笔记写作法</li>
</ul>
</li>
<li> Supermemo.com： <a href="https://www.supermemo.com/en/archives1990-2015/articles/20rules">Effective learning: Twenty rules of formulating knowledge</a><ul>
<li> 注：不建议一般用户上手 Supermemo，但是该软件相关的一套理论是通用的</li>
</ul>
</li>
</ul>
<h3 id="Anki-插件"><a href="#Anki-插件" class="headerlink" title="Anki 插件"></a>Anki 插件</h3><h4 id="推荐阅读-1"><a href="#推荐阅读-1" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul>
<li>微信公众号： <a href="https://mp.weixin.qq.com/s/JAbNP1tuPzwhurrOOaEfsQ">Anki 的几款插件介绍</a><ul>
<li>注：文章内容或许已经过时</li>
</ul>
</li>
<li> Anki 插件库官网： <a href="https://ankiweb.net/shared/addons/2.1">Add-ons for Anki 2.1</a></li>
<li>Youtube： <a href="https://www.youtube.com/c/TheAnKing">The AnKing</a> 的系列视频<ul>
<li>注：Anki 插件库中许多优秀插件都是这个组织开发的</li>
</ul>
</li>
</ul>
<h4 id="推荐插件"><a href="#推荐插件" class="headerlink" title="推荐插件"></a>推荐插件</h4><ul>
<li><a href="https://ankiweb.net/shared/info/1771074083">Review Heatmap</a></li>
<li><a href="https://ankiweb.net/shared/info/2055492159">AnkiConnect</a><ul>
<li> 配合浏览器插件 <a href="https://chrome.google.com/webstore/detail/online-dictionary-helper/lppjdajkacanlmpbbcdkccjkdbpllajb?hl=zh-CN">在线词典助手</a> 使用</li>
<li>插件扩展作者 @你家老黄的博客： <a href="https://www.laohuang.net/" title="老黄老巢">老黄老巢</a></li>
</ul>
</li>
<li><a href="https://ankiweb.net/shared/info/538879081">Anki Zoom</a></li>
<li><a href="https://ankiweb.net/shared/info/1020366288">Edit Field During Review</a></li>
</ul>
<h3 id="Anki-制卡"><a href="#Anki-制卡" class="headerlink" title="Anki 制卡"></a>Anki 制卡</h3><h4 id="视频制卡"><a href="#视频制卡" class="headerlink" title="视频制卡"></a>视频制卡</h4><ul>
<li>Bilibili： <a href="https://www.bilibili.com/video/BV1Wz4y11721?spm_id_from=333.337.search-card.all.click&amp;vd_source=3ae7ae95fa254383ab9ae83f75abd29d">MPV 播放器 + Anki 制卡流程</a></li>
<li> Bilibili： <a href="https://www.bilibili.com/video/BV1v64y1D7UZ/?vd_source=3ae7ae95fa254383ab9ae83f75abd29d">MPV - 最好的语言学习播放器 - ANKI</a><ul>
<li> 转载自 Youtube： <a href="https://www.youtube.com/watch?v=bbg6ztWecbU">mpv: The Best Video Player for Language Learning</a></li>
</ul>
</li>
</ul>
<h4 id="阅读制卡"><a href="#阅读制卡" class="headerlink" title="阅读制卡"></a>阅读制卡</h4><ul>
<li>(Win/Mac)：浏览器插件 <a href="https://chrome.google.com/webstore/detail/online-dictionary-helper/lppjdajkacanlmpbbcdkccjkdbpllajb?hl=zh-CN">在线词典助手</a> 使用<ul>
<li>浏览器插件 <a href="https://chrome.google.com/webstore/detail/anki-%E5%88%92%E8%AF%8D%E5%88%B6%E5%8D%A1%E5%8A%A9%E6%89%8B/ajencmdaamfnkgilhpgkepfhfgjfplnn?hl=zh-CN">Anki 划词制卡助手</a> 用起来没有上面这款流畅，推荐使用上面的在线词典助手，两个插件都是同一个开发者</li>
</ul>
</li>
<li> (Android)：Anki 划词助手，可以从酷安应用市场上下载<ul>
<li> Github： <a href="https://github.com/mmjang/ankihelper">Anki 划词助手 - 用户手册</a></li>
<li>通过该 APP 进入到内部交流群，可以打通安卓手机上 Anki 阅读制卡的新方式</li>
</ul>
</li>
</ul>
<h3 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h3><ul>
<li>Reddit 讨论组： <a href="https://www.reddit.com/r/Anki/">Anki: a forum about the Anki flashcard app</a></li>
</ul>
<h3 id="一些个人建议"><a href="#一些个人建议" class="headerlink" title="一些个人建议"></a>一些个人建议</h3><p>阅读了上面的一些链接，假设你已经对 Anki、Supermemo、Remnote 等间隔重复 (Spaced Repetition) 软件有了一些了解。但是在这里，作为 Remnote 使用半年的用户，这里不是很推荐使用 Remnote 这款工具，具体可查阅本博客之前的文章： <a href="https://coffeelize.top/posts/b0b73b25.html">为什么放弃使用 remnote</a> 。但是作为最近几年新开发的软件，这款软件可能仍处于快速更新迭代的状态，最近半年本人已经完全弃用了这款产品，因此这篇文章的可靠性可能还需要读者自行判断。</p>
<p>其次，下载 Anki 推荐从其官网 <a href="https://apps.ankiweb.net/">ankiweb</a> 上下载，而不是从 <a href="http://www.ankichina.net/">ankichina</a> 上进行下载。由于 Anki 是开源软件 (其他平台免费，但 IOS 系统上的 APP 是付费的)，免费提供同步服务，但由于服务器不在国内的缘故，同步过程可能稍有些慢，但是相信我，相比于前几年前 Anki 2.0 版本时的同步，速度已经是快很多很多了，如果不是一次性同步大量媒体资源（比如导入一个几十兆的卡包），同步过程也是挺快的。<br>而 ankichina 组织 针对这个同步问题，对其进行了二次开发，虽然在同步速度上占优势，但却对 Anki 的某些使用场景 / 功能上启用了收费。<br>我想说的是，原生的 Anki 已经完全够用了，同步速度稍慢也正好是对我们滥用媒体资源（比如笔记中插入图片、视频、音频等）的克制。这里也极度不推荐自己搭建 Anki 同步服务器、将 Anki 装机 U 盘等行为，毕竟数据无价，谨慎操作。</p>
<h3 id="附上-LaTeX-排版好的文档"><a href="#附上-LaTeX-排版好的文档" class="headerlink" title="附上 LaTeX 排版好的文档"></a>附上 LaTeX 排版好的文档</h3><div class="pdf-container" data-target="/download/从" data-height="Anki"></div>
]]></content>
      <categories>
        <category>Anki</category>
      </categories>
      <tags>
        <tag>Anki</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么放弃 Remnote</title>
    <url>/posts/Why-give-up-Remnote.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol>
<li>在线库依赖网络，网络不好的情况基本上用不了</li>
<li>笔记格式不通用，复制笔记到其他软件调格式麻烦</li>
<li>笔记一多，文档内容一多就明显感到不流畅了</li>
<li>搜索，中文搜索太拉胯了，通常是搜索框中输入了四个中文，结果匹配结果里面匹配到 1 个字，2 个字的也被搜出来了</li>
<li>对图片的支持不友好，且本身服务器加载图片很慢</li>
<li>在 Mac 端，中文输入法的情况下，敲了一串英文，enter 回车会出现问题</li>
<li>插件系统基本上等于没有，社区也还没有什么插件</li>
<li>同步机制做的还不行，remnote 客户端和 PWA 应用两者不同步，有点像两个账户了；遇到客户端更新同步就更慢了</li>
<li> remnote 不支持表格，或者通过 HTML 实现该功能过于难用</li>
<li> PDF 功能也不好用，一个是较大一点的 PDF 都不敢放 remnote 当中，加载慢；第二个是自带的 pin 和链接功能，选择 PDF 文字的时候，没有格式处理，导致选择的文字字与字之间存在多余的空格</li>
<li>复习机制比较拉胯，卡片操作还是远远不如 anki</li>
<li> 删除文档之后，笔记库中出现一大堆的 untitled，这些文档有些甚至都删不去</li>
<li>待续…</li>
</ol>
<p><img data-src="https://s2.loli.net/2022/04/03/nVrOaYMsvLcQgCP.jpg" alt="系统超级大BUG之无法彻底删除文件"></p>
]]></content>
      <categories>
        <category>Anki</category>
      </categories>
      <tags>
        <tag>APP</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 BIBTeX 处理参考文献</title>
    <url>/posts/Processing-References-with-BIBTeX.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="使用-BIBTeX-排版参考文献"><a href="#使用-BIBTeX-排版参考文献" class="headerlink" title="使用 BIBTeX 排版参考文献"></a>使用 BIBTeX 排版参考文献</h3><ol>
<li>准备一份 BIBTeX 数据库，假设数据库文件名为 books.bib，和 LaTeX 源代码一般位于同一个目录下。</li>
<li>在源代码中添加必要的命令。假设源代码名为 demo.tex<ol>
<li> 首先需要使用命令 <code>\bibliographystyle</code> 设定参考文献的格式。</li>
<li>其次，在正文中引用参考文献。BIBTeX 程序在生成参考文献列表的时候，通常只列出用了 <code>\cite</code> 命令引用的那些。如果需要列出未被引用的文献，则需要 <code>\nocite{ ⟨ citation ⟩ }</code> 命令；而 <code>\nocite{*}</code> 则让所有未被引用的文献都列出。</li>
<li>再次，在需要列出参考文献的位置，使用 <code>\bibliography</code> 命令代替 thebibliography 环境：<code>\bibliography{ ⟨ bib-name ⟩ }</code>，其中 ⟨ bib-name ⟩ 是 BIBTeX 数据库的文件名，不要带 <code>.bib</code> 扩展名。</li>
<li>注意：<code>\bibliographystyle</code> 和 <code>\bibliography</code> 这两个命令缺一不可，否则使用 BIBTeX 生成参考文献列表的时候会报错</li>
</ol>
</li>
<li>开始编译<ol>
<li>使用 xelatex 或 pdflatex 编译源代码 demo.tex</li>
<li> 使用 bibtex 命令（处理一些 aux、bbl 文件，不需要我们管）</li>
<li>在使用 xelatex 或 pdflatex 编译两遍（读入参考文献并正确，生成引用。）</li>
</ol>
</li>
</ol>
<p>整个过程使用的命令如下（可以略去扩展名）：</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line">xelatex demo</span><br><span class="line">bibtex demo</span><br><span class="line">xelatex demo</span><br><span class="line">xelatex demo</span><br></pre></td></tr></tbody></table></figure>

<h4 id="关于-bibliographystyle"><a href="#关于-bibliographystyle" class="headerlink" title="关于 bibliographystyle"></a>关于 bibliographystyle</h4><p>参考文献的写法在不同文献里千差万别，包括作者、标题、年份等各项的顺序和字体样式、文献在列表中的排序规则等。BIBTeX 用样式（style）来管理参考文献的写法。BIBTeX 提供了几个预定义的样式，如 plain, unsrt, alpha 等。如果使用期刊模板的话，可能会提供自用的样式。样式文件以 <code>.bst</code> 为扩展名。<br>使用样式文件的方法是在源代码内（一般在导言区）使用 <code>\bibliographystyle</code> 命令：</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\bibliographystyle</span>{⟨ bst-name ⟩}</span><br></pre></td></tr></tbody></table></figure>

<p>这里 ⟨ bst-name ⟩ 为 <code>.bst</code> 样式文件的名称，不要带 <code>.bst</code> 扩展名。</p>
<p>比如说如下的 plain 样式和 GB/T 7714—2015 样式</p>
<ul>
<li>plain</li>
</ul>
<blockquote>
<p>[1] Alice Axford, Bob Birkin, Charlie Copper, and Danny Dannford. Demostration of bibliography items. <em>Journal of TeXperts</em>, 36(7):114–120, Mar 2013.</p>
</blockquote>
<ul>
<li>gbt7714-numerical</li>
</ul>
<blockquote>
<p>[1] 陈登原。国史旧闻：第 1 卷 [M]. 北京：中华书局，2000:29.</p>
</blockquote>
<h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="comment">% 指定参考文献的样式</span></span><br><span class="line"><span class="keyword">\bibliographystyle</span>{plain}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> 登斯楼也，则有去国怀乡，忧谗畏讥<span class="keyword">\cite</span>{rentoumis2016implementation}，满目萧然，感极而悲者矣<span class="keyword">\cite</span>{孟炎2021交变温度场对光伏组件性能的影响研究}。</span><br><span class="line"> </span><br><span class="line"><span class="comment">%使用\bibliography命令替代原先的thebibliography环境</span></span><br><span class="line"> <span class="keyword">\bibliography</span>{mybib} <span class="comment">%引入自己的bib库，不要带bib扩展名</span></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p>比如使用 plain 样式的 bibliographystyle，然后随机插入两条文献，编译结果如下图所示：</p>
<p><img data-src="https://s2.loli.net/2022/07/11/Mey8dYDfKqgsjT1.png" alt="02-使用plain样式生成的参考文献.png"></p>
<p>从上图可看出，对于多个作者：“等”、“.et.al” 还需要进行相应的设置。其原因在于 bibliographystyle 使用的是 plain 样式。plain 的中文翻译点击此可查看：<a href="https://dict.cn/plain">海词词典</a>，大致意思是 “朴素的，纯的”，也就是说参考文献样式按照 “正文文本” 一样处理，而不会对齐进行一些额外的操作。</p>
<p>而如过我们使用的是 gbt7714-numerical 样式，注：<strong>使用 gbt7714-numerical 样式需要使用 gbt7714 宏包</strong></p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%...在导言区添加如下两行内容</span></span><br><span class="line"><span class="keyword">\usepackage</span>[sort<span class="built_in">&amp;</span>compress]{gbt7714}</span><br><span class="line"><span class="keyword">\bibliographystyle</span>{gbt7714-numerical}</span><br><span class="line"><span class="comment">%\begin{document}</span></span><br></pre></td></tr></tbody></table></figure>

<p>输出结果如下，已经对参考文献的样式进行了符合 gbt-7714 标准形式的输出</p>
<p><img data-src="https://s2.loli.net/2022/07/11/ndhbxOtMZYA91Tg.png" alt="04-使用gb7714输出参考文献.png"></p>
<p>完整案例如下</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="comment">% 指定参考文献的样式</span></span><br><span class="line"><span class="keyword">\usepackage</span>[sort<span class="built_in">&amp;</span>compress]{gbt7714}</span><br><span class="line"><span class="keyword">\bibliographystyle</span>{gbt7714-numerical}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> 登斯楼也，则有去国怀乡，忧谗畏讥<span class="keyword">\cite</span>{rentoumis2016implementation}，满目萧然，感极而悲者矣<span class="keyword">\cite</span>{孟炎2021交变温度场对光伏组件性能的影响研究}。</span><br><span class="line"> </span><br><span class="line"><span class="comment">%使用\bibliography命令替代原先的thebibliography环境</span></span><br><span class="line"> <span class="keyword">\bibliography</span>{mybib} <span class="comment">%引入自己的bib库，不要带bib扩展名</span></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="更多添加参考文献的方案"><a href="#更多添加参考文献的方案" class="headerlink" title="更多添加参考文献的方案"></a>更多添加参考文献的方案</h4><p>除了使用 BIBTeX 添加参考文献之外，实际上 Latex 还有其他几种添加参考文献的方案，以下为三种插入参考文献方式比较：</p>
<p><img data-src="https://s2.loli.net/2022/07/11/CbT5m6MkvIsB8Vx.png" alt="03-三种插入参考文献方式比较.png"></p>
<h4 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h4><ul>
<li>有现成的样式文件可以用就用</li>
<li> BIBTeX 和 biber 都可以用，选自己熟悉的或者编译速度快的，我还是喜欢使用 BIBTeX</li>
<li> 假设投稿中遇到以下情景</li>
</ul>
<table>
<thead>
<tr>
<th align="center">情景</th>
<th align="center">选择</th>
</tr>
</thead>
<tbody><tr>
<td align="center">无样式文件提供</td>
<td align="center">自己开发样式文件难度大，只能用 thebibliography 环境</td>
</tr>
<tr>
<td align="center">提供 BIBTeX 或 biber 样式之一</td>
<td align="center">有工具可以用就用</td>
</tr>
<tr>
<td align="center"> BIBTeX 或 biber 两者均提供了</td>
<td align="center">两者都行，我倾向于编译速度较快的 BIBTeX</td>
</tr>
</tbody></table>
<h4 id="通过下载-BibTeX-样式文件输出符号-GBT7714-2005-标准的-BibTeX-Style"><a href="#通过下载-BibTeX-样式文件输出符号-GBT7714-2005-标准的-BibTeX-Style" class="headerlink" title="通过下载 BibTeX 样式文件输出符号 GBT7714-2005 标准的 BibTeX Style"></a>通过下载 BibTeX 样式文件输出符号 GBT7714-2005 标准的 BibTeX Style</h4><p>可参考如下两链接中的任意一种</p>
<ul>
<li>个人博客：<a href="https://liam.page/2014/05/09/gbt7714-2005-bibtex-style/">【LaTeX Tips】符合 GBT7714-2005 标准的 BibTeX Style | 始终</a></li>
<li> Github：<a href="https://github.com/Haixing-Hu/GBT7714-2005-BibTeX-Style">GitHub - Haixing-Hu/GBT7714-2005-BibTeX-Style: A GB/T 7714-2005 national standard compliant BibTeX style.</a></li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>LaTeX 官方入门手册：一份（不太）简短的 LaTeX2ε 介绍</li>
<li> LaTeX 工作室：LaTeX 中参考文献的处理.pdf</li>
</ul>
]]></content>
      <tags>
        <tag>LaTeX</tag>
        <tag>Research</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 PyQt 制作简易软件简明笔记</title>
    <url>/posts/Short-Notes-on-Making-Simple-Software-with-PyQt.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h3><p>最近在统计多组数据的重复性，利用到了标准差相关的公式，自然而然想到是使用 Excel 来处理公式。总之，模板是实现了，将公式一步一步拆解，饶了一大圈，发现最后 Excel 本身就内置了求取标准差的函数，还不如不要让我知道这个结果呢，伤心: (</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240820204257.png" alt="image.png"></p>
<p>不过，这也带来了一些思考。自认为自己用 Excel 还算用得多的了，根本没有听过用过这样的内置函数，能不能写个简单的程序，只要将数据往里面一扔，就可以自动出来计算结果呢 —&gt; 于是开始了折腾</p>
<h3 id="Step-1-搭建环境"><a href="#Step-1-搭建环境" class="headerlink" title="Step 1 搭建环境"></a>Step 1 搭建环境</h3><ul>
<li>这里选择社区版的 Pycharm，免费，集成开发环境用起来也方便</li>
<li>程序开发使用的是 PyQt 框架</li>
</ul>
<p>刚安装完 Pycharm，会检测系统中是否已经安装好了 python，如果恰好没有安装过，那么根据软件的建议安装即可</p>
<p>写好的代码中若检测有问题，Pycharm 会在对应的位置进行提示，如一下这段程序，刚安装的 python 肯定是没有 PyQT6 的程序包的，可以通过提示（小红灯泡处，Alt+Enter）进行安装</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240820204316.png" alt="image.png"></p>
<p>新建项目，新建 python 文件，粘贴如下代码进行测试：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QVBoxLayout, QPushButton  </span><br><span class="line">  </span><br><span class="line">app = QApplication([])  <span class="comment"># 创建应用程序对象  </span></span><br><span class="line">  </span><br><span class="line">window = QWidget()  <span class="comment"># 创建窗口部件  </span></span><br><span class="line">layout = QVBoxLayout()  <span class="comment"># 创建布局管理器  </span></span><br><span class="line">  </span><br><span class="line">button = QPushButton(<span class="string">"点击我"</span>)  <span class="comment"># 创建按钮  </span></span><br><span class="line">layout.addWidget(button)  <span class="comment"># 将按钮添加到布局管理器中  </span></span><br><span class="line">  </span><br><span class="line">window.setLayout(layout)  <span class="comment"># 设置窗口部件的布局  </span></span><br><span class="line">window.show()  <span class="comment"># 显示窗口  </span></span><br><span class="line">  </span><br><span class="line">app.<span class="built_in">exec</span>()  <span class="comment"># 进入应用程序的主循环</span></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240820205141.png" alt="image.png"></p>
<p>很好，说明各种环境已经搭建好了！</p>
<h3 id="Step-2-实现基础功能"><a href="#Step-2-实现基础功能" class="headerlink" title="Step 2 实现基础功能"></a>Step 2 实现基础功能</h3><p>接下来尽管提需求，从开发者的角度出发，一步步给 GPT 进行引导，从易到难，功能从简单到复杂</p>
<p>例如我开始给 GPT 提需求：</p>
<blockquote>
<p>我提供一组数据，点击按钮之后，就可以在一个输出位置输出这组数据的标准差</p>
</blockquote>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QWidget, QVBoxLayout, QPushButton, QLabel, QLineEdit  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>(<span class="params">QMainWindow</span>):</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        <span class="built_in">super</span>().__init__()  </span><br><span class="line">  </span><br><span class="line">        self.setWindowTitle(<span class="string">"标准差计算器"</span>)  </span><br><span class="line">        self.setGeometry(<span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">200</span>)  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 主部件  </span></span><br><span class="line">        self.central_widget = QWidget()  </span><br><span class="line">        self.setCentralWidget(self.central_widget)  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 布局  </span></span><br><span class="line">        self.layout = QVBoxLayout()  </span><br><span class="line">        self.central_widget.setLayout(self.layout)  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 输入框  </span></span><br><span class="line">        self.data_input = QLineEdit()  </span><br><span class="line">        self.data_input.setPlaceholderText(<span class="string">"输入数据，用逗号分隔"</span>)  </span><br><span class="line">        self.layout.addWidget(self.data_input)  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 计算按钮  </span></span><br><span class="line">        self.calculate_button = QPushButton(<span class="string">"计算标准差"</span>)  </span><br><span class="line">        self.calculate_button.clicked.connect(self.calculate_standard_deviation)  </span><br><span class="line">        self.layout.addWidget(self.calculate_button)  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 输出标签  </span></span><br><span class="line">        self.result_label = QLabel(<span class="string">"标准差："</span>)  </span><br><span class="line">        self.layout.addWidget(self.result_label)  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate_standard_deviation</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        <span class="comment"># 获取输入数据  </span></span><br><span class="line">        data_text = self.data_input.text()  </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data_text:  </span><br><span class="line">            self.result_label.setText(<span class="string">"请先输入数据"</span>)  </span><br><span class="line">            <span class="keyword">return</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 解析数据  </span></span><br><span class="line">        <span class="keyword">try</span>:  </span><br><span class="line">            data = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, data_text.split(<span class="string">','</span>)))  </span><br><span class="line">        <span class="keyword">except</span> ValueError:  </span><br><span class="line">            self.result_label.setText(<span class="string">"数据格式错误，请输入有效的数字"</span>)  </span><br><span class="line">            <span class="keyword">return</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 计算标准差  </span></span><br><span class="line">        std_dev = np.std(data)  </span><br><span class="line">        self.result_label.setText(<span class="string">f"标准差：<span class="subst">{std_dev:<span class="number">.2</span>f}</span>"</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:  </span><br><span class="line">    app = QApplication(sys.argv)  </span><br><span class="line">    window = MainWindow()  </span><br><span class="line">    window.show()  </span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240820205448.png" alt="image.png"></p>
<p>好了，手动输入几组数据，确实能够计算出来标准差了，不过我们的数据来自 Excel，而且用逗号分隔数据的方式也不方便。于是就有了如下需求：</p>
<blockquote>
<p>但是，你知道的，我的输入数据一般从 excel 中复制过来的，这种用逗号分隔数字的方式让我在输入的时候非常麻烦</p>
</blockquote>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QVBoxLayout, QPushButton, QPlainTextEdit, QLabel</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataProcessingApp</span>(<span class="params">QWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置窗口标题和尺寸</span></span><br><span class="line">        self.setWindowTitle(<span class="string">"数据处理应用"</span>)</span><br><span class="line">        self.setGeometry(<span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建布局和组件</span></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        self.text_edit = QPlainTextEdit(self)</span><br><span class="line">        self.text_edit.setPlaceholderText(<span class="string">"在这里粘贴数据..."</span>)</span><br><span class="line">        layout.addWidget(self.text_edit)</span><br><span class="line"></span><br><span class="line">        self.calculate_button = QPushButton(<span class="string">"计算标准差"</span>, self)</span><br><span class="line">        self.calculate_button.clicked.connect(self.calculate_std_dev)</span><br><span class="line">        layout.addWidget(self.calculate_button)</span><br><span class="line"></span><br><span class="line">        self.result_label = QLabel(<span class="string">"标准差："</span>, self)</span><br><span class="line">        layout.addWidget(self.result_label)</span><br><span class="line"></span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate_std_dev</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 获取文本内容</span></span><br><span class="line">        text = self.text_edit.toPlainText()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理文本数据</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 将文本数据按行分隔，然后按空格或制表符分隔</span></span><br><span class="line">            data = [<span class="built_in">float</span>(num) <span class="keyword">for</span> line <span class="keyword">in</span> text.splitlines() <span class="keyword">for</span> num <span class="keyword">in</span> line.split()]</span><br><span class="line">            <span class="keyword">if</span> data:</span><br><span class="line">                <span class="comment"># 计算标准差</span></span><br><span class="line">                std_dev = np.std(data)</span><br><span class="line">                self.result_label.setText(<span class="string">f"标准差：<span class="subst">{std_dev:<span class="number">.2</span>f}</span>"</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.result_label.setText(<span class="string">"标准差：无效数据"</span>)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            self.result_label.setText(<span class="string">"标准差：数据格式错误"</span>)</span><br><span class="line"></span><br><span class="line">app = QApplication([])</span><br><span class="line">window = DataProcessingApp()</span><br><span class="line">window.show()</span><br><span class="line">app.<span class="built_in">exec</span>()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240820205734.png" alt="image.png"></p>
<p>以上这组数据就是直接从 Excel 粘贴进去的。看来功能 GPT 是帮我们实现了</p>
<h3 id="Step-3-完善程序"><a href="#Step-3-完善程序" class="headerlink" title="Step 3 完善程序"></a>Step 3 完善程序</h3><p>接下来按照上面的步骤，进一步提需求，进一步完善程序代码<br>例如，可以增加一些数据清洗、数据输入验证、错处处理、历史记录、导出数据等功能<br>也可以对程序进行拆分，不同功能的代码写到不同的 py 文件中</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240820210219.png" alt="image.png"></p>
<p>当前的程序结构为</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">data_processor/</span><br><span class="line">│</span><br><span class="line">├── main.py</span><br><span class="line">├── ui.py</span><br><span class="line">├── processor.py</span><br><span class="line">└── utils.py</span><br></pre></td></tr></tbody></table></figure>

<h4 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h4><figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QApplication</span><br><span class="line"><span class="keyword">from</span> ui <span class="keyword">import</span> DataProcessorApp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    processor = DataProcessorApp()</span><br><span class="line">    processor.show()</span><br><span class="line">    sys.exit(app.<span class="built_in">exec</span>())</span><br></pre></td></tr></tbody></table></figure>

<h4 id="UI-界面"><a href="#UI-界面" class="headerlink" title="UI 界面"></a>UI 界面</h4><figure class="highlight python"><figcaption><span>ui.py</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt6.QtWidgets <span class="keyword">import</span> QWidget, QVBoxLayout, QPushButton, QTextEdit, QLabel  </span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QFont, QColor  </span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> Qt  </span><br><span class="line"><span class="keyword">from</span> PyQt6.QtGui <span class="keyword">import</span> QPalette  </span><br><span class="line"><span class="keyword">from</span> processor <span class="keyword">import</span> DataProcessor  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataProcessorApp</span>(<span class="params">QWidget</span>):</span>  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        <span class="built_in">super</span>().__init__()  </span><br><span class="line">        self.processor = DataProcessor()  </span><br><span class="line">        self.init_ui()  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_ui</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        <span class="comment"># Set the overall layout and style  </span></span><br><span class="line">        layout = QVBoxLayout()  </span><br><span class="line">        self.setStyleSheet(<span class="string">"background-color: #f0f0f0;"</span>)  </span><br><span class="line">        self.setPalette(QPalette(QColor(<span class="string">'#f0f0f0'</span>)))  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># Create and style widgets  </span></span><br><span class="line">        self.input_text = QTextEdit(self)  </span><br><span class="line">        self.input_text.setPlaceholderText(<span class="string">"在这里粘贴数据，每行一个数字"</span>)  </span><br><span class="line">        self.input_text.setStyleSheet(<span class="string">"font-size: 14px; padding: 10px; border: 1px solid #ccc;"</span>)  </span><br><span class="line">        layout.addWidget(self.input_text)  </span><br><span class="line">  </span><br><span class="line">        self.mean_label = QLabel(<span class="string">"平均值："</span>, self)  </span><br><span class="line">        self.mean_label.setStyleSheet(<span class="string">"font-size: 16px; color: #333;"</span>)  </span><br><span class="line">        layout.addWidget(self.mean_label)  </span><br><span class="line">  </span><br><span class="line">        self.variance_label = QLabel(<span class="string">"方差："</span>, self)  </span><br><span class="line">        self.variance_label.setStyleSheet(<span class="string">"font-size: 16px; color: #333;"</span>)  </span><br><span class="line">        layout.addWidget(self.variance_label)  </span><br><span class="line">  </span><br><span class="line">        self.std_dev_label = QLabel(<span class="string">"标准差："</span>, self)  </span><br><span class="line">        self.std_dev_label.setStyleSheet(<span class="string">"font-size: 16px; color: #333;"</span>)  </span><br><span class="line">        layout.addWidget(self.std_dev_label)  </span><br><span class="line">  </span><br><span class="line">        self.reliability_label = QLabel(<span class="string">"重复性："</span>, self)  </span><br><span class="line">        self.reliability_label.setStyleSheet(<span class="string">"font-size: 16px; color: #333;"</span>)  </span><br><span class="line">        layout.addWidget(self.reliability_label)  </span><br><span class="line">  </span><br><span class="line">        process_button = QPushButton(<span class="string">"计算标准差"</span>, self)  </span><br><span class="line">        process_button.setStyleSheet(  </span><br><span class="line">            <span class="string">"background-color: #4CAF50; color: white; font-size: 14px; padding: 10px; border: none; border-radius: 5px;"</span>)  </span><br><span class="line">        process_button.clicked.connect(self.calculate_std_dev)  </span><br><span class="line">        layout.addWidget(process_button)  </span><br><span class="line">  </span><br><span class="line">        reliability_button = QPushButton(<span class="string">"计算重复性"</span>, self)  </span><br><span class="line">        reliability_button.setStyleSheet(  </span><br><span class="line">            <span class="string">"background-color: #2196F3; color: white; font-size: 14px; padding: 10px; border: none; border-radius: 5px;"</span>)  </span><br><span class="line">        reliability_button.clicked.connect(self.calculate_reliability)  </span><br><span class="line">        layout.addWidget(reliability_button)  </span><br><span class="line">  </span><br><span class="line">        self.history_text = QTextEdit(self)  </span><br><span class="line">        self.history_text.setPlaceholderText(<span class="string">"历史记录"</span>)  </span><br><span class="line">        self.history_text.setReadOnly(<span class="literal">True</span>)  </span><br><span class="line">        self.history_text.setStyleSheet(<span class="string">"font-size: 14px; padding: 10px; border: 1px solid #ccc;"</span>)  </span><br><span class="line">        layout.addWidget(self.history_text)  </span><br><span class="line">  </span><br><span class="line">        self.setLayout(layout)  </span><br><span class="line">        self.setWindowTitle(<span class="string">"数据处理程序"</span>)  </span><br><span class="line">        self.setGeometry(<span class="number">100</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">400</span>)  </span><br><span class="line">        self.setFont(QFont(<span class="string">'Arial'</span>, <span class="number">12</span>))  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate_std_dev</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        data = self.input_text.toPlainText().strip()  </span><br><span class="line">        <span class="keyword">try</span>:  </span><br><span class="line">            numbers = [<span class="built_in">float</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> data.split() <span class="keyword">if</span> x.replace(<span class="string">'.'</span>, <span class="string">''</span>, <span class="number">1</span>).isdigit()]  </span><br><span class="line">            <span class="keyword">if</span> numbers:  </span><br><span class="line">                std_dev = self.processor.calculate_std_dev(numbers)  </span><br><span class="line">                mean, variance, std_dev, _ = self.processor.calculate_reliability(numbers)  </span><br><span class="line">                self.mean_label.setText(<span class="string">f"平均值：<span class="subst">{mean:<span class="number">.6</span>f}</span>"</span>)  </span><br><span class="line">                self.variance_label.setText(<span class="string">f"方差：<span class="subst">{variance:<span class="number">.6</span>f}</span>"</span>)  </span><br><span class="line">                self.std_dev_label.setText(<span class="string">f"标准差：<span class="subst">{std_dev:<span class="number">.6</span>f}</span>"</span>)  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                self.std_dev_label.setText(<span class="string">"标准差：无效数据"</span>)  </span><br><span class="line">                self.mean_label.setText(<span class="string">"平均值：无效数据"</span>)  </span><br><span class="line">                self.variance_label.setText(<span class="string">"方差：无效数据"</span>)  </span><br><span class="line">            history = self.history_text.toPlainText()  </span><br><span class="line">            new_entry = <span class="string">f"数据：<span class="subst">{<span class="string">', '</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, numbers))}</span> | 标准差：<span class="subst">{std_dev:<span class="number">.6</span>f}</span> | 平均值：<span class="subst">{mean:<span class="number">.6</span>f}</span> | 方差：<span class="subst">{variance:<span class="number">.6</span>f}</span>\n"</span>  </span><br><span class="line">            self.history_text.setText(history + new_entry)  </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line">            self.std_dev_label.setText(<span class="string">f"错误：<span class="subst">{e}</span>"</span>)  </span><br><span class="line">            self.mean_label.setText(<span class="string">"平均值：无效数据"</span>)  </span><br><span class="line">            self.variance_label.setText(<span class="string">"方差：无效数据"</span>)  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate_reliability</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        data = self.input_text.toPlainText().strip()  </span><br><span class="line">        <span class="keyword">try</span>:  </span><br><span class="line">            numbers = [<span class="built_in">float</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> data.split() <span class="keyword">if</span> x.replace(<span class="string">'.'</span>, <span class="string">''</span>, <span class="number">1</span>).isdigit()]  </span><br><span class="line">            <span class="keyword">if</span> numbers:  </span><br><span class="line">                mean, variance, std_dev, reliability = self.processor.calculate_reliability(numbers)  </span><br><span class="line">                self.mean_label.setText(<span class="string">f"平均值：<span class="subst">{mean:<span class="number">.6</span>f}</span>"</span>)  </span><br><span class="line">                self.variance_label.setText(<span class="string">f"方差：<span class="subst">{variance:<span class="number">.6</span>f}</span>"</span>)  </span><br><span class="line">                self.std_dev_label.setText(<span class="string">f"标准差：<span class="subst">{std_dev:<span class="number">.6</span>f}</span>"</span>)  </span><br><span class="line">                self.reliability_label.setText(<span class="string">f"重复性：<span class="subst">{reliability:<span class="number">.6</span>f}</span>"</span>)  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                self.reliability_label.setText(<span class="string">"重复性：无效数据"</span>)  </span><br><span class="line">                self.mean_label.setText(<span class="string">"平均值：无效数据"</span>)  </span><br><span class="line">                self.variance_label.setText(<span class="string">"方差：无效数据"</span>)  </span><br><span class="line">                self.std_dev_label.setText(<span class="string">"标准差：无效数据"</span>)  </span><br><span class="line">            history = self.history_text.toPlainText()  </span><br><span class="line">            new_entry = <span class="string">f"数据：<span class="subst">{<span class="string">', '</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, numbers))}</span> | 标准差：<span class="subst">{std_dev:<span class="number">.6</span>f}</span> | 重复性：<span class="subst">{reliability:<span class="number">.6</span>f}</span> | 平均值：<span class="subst">{mean:<span class="number">.6</span>f}</span> | 方差：<span class="subst">{variance:<span class="number">.6</span>f}</span>\n"</span>  </span><br><span class="line">            self.history_text.setText(history + new_entry)  </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:  </span><br><span class="line">            self.reliability_label.setText(<span class="string">f"错误：<span class="subst">{e}</span>"</span>)  </span><br><span class="line">            self.mean_label.setText(<span class="string">"平均值：无效数据"</span>)  </span><br><span class="line">            self.variance_label.setText(<span class="string">"方差：无效数据"</span>)  </span><br><span class="line">            self.std_dev_label.setText(<span class="string">"标准差：无效数据"</span>)</span><br></pre></td></tr></tbody></table></figure>

<h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><figure class="highlight python"><figcaption><span>processor.py</span></figcaption><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataProcessor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate_std_dev</span>(<span class="params">self, numbers</span>):</span></span><br><span class="line">        <span class="keyword">return</span> np.std(numbers, ddof=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate_reliability</span>(<span class="params">self, numbers</span>):</span></span><br><span class="line">        mean = np.mean(numbers)</span><br><span class="line">        variance = np.var(numbers, ddof=<span class="number">1</span>)</span><br><span class="line">        std_dev = np.sqrt(variance)</span><br><span class="line">        reliability = std_dev / mean</span><br><span class="line">        <span class="keyword">return</span> mean, variance, std_dev, reliability</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="Step-4-打包程序"><a href="#Step-4-打包程序" class="headerlink" title="Step 4 打包程序"></a>Step 4 打包程序</h3><p>想要将整个程序打包成 exe 文件，这样方便在没有 python 环境时依然可以运行，步骤如下：</p>
<ul>
<li>安装 PyInstaller 包（可以直接在 powershell 中安装）</li>
<li>使用 PyInstaller 打包脚本</li>
</ul>
<p>1、在 PowerShell 中，运行如下命令</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></tbody></table></figure>

<p>注意：前面已经安装了 python 程序，应该是可以使用 pip 命令了的。可输入 <code>pip --version</code> 命令查看。若该命令无法使用，很可能是没有将 python 解释器添加到环境变量中，可进行如下操作：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">C:\Users\Administrator\AppData\Local\Programs\Python\Python312\</span><br><span class="line">C:\Users\Administrator\AppData\Local\Programs\Python\Python312\Scripts\</span><br></pre></td></tr></tbody></table></figure>

<p>这里的路径请替换为实际安装 Python 的路径</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240820211551.png" alt="image.png"></p>
<p>2、运行 pyinstaller 命令打包程序</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">pyinstaller --onefile --windowed your_script.py</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li><code>--onefile</code>：将所有内容打包成一个单独的 <code>.exe </code> 文件。</li>
<li><code>--windowed</code>：用于创建一个没有命令行窗口的图形界面应用。</li>
</ul>
<p>打包完成后，会生成几个文件夹：</p>
<ul>
<li><code>dist</code> 中包含生成的 exe 文件</li>
<li><code>build</code> 中包含构建过程中的临时文件，可以删除。</li>
<li><code>your_script.spec</code> 文件是 PyInstaller 的配置文件，可以根据需要进行修改。</li>
</ul>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240820211643.png" alt="image.png"></p>
<p><img data-src="https://s2.loli.net/2024/08/20/FvgUAH9DrSljCQ7.gif" alt=".gif"></p>
<p>恭喜你，得到了一款简易的小程序：）</p>
<h3 id="续"><a href="#续" class="headerlink" title="续"></a>续</h3><p>明明程序实现的功能很简单，为什么生成的程序还那么大呢，例如生成上面的这个 exe 文件就有 50M。因为软件将一些必要的程序包（如 numpy 模块）都打包进去了，若之后再增加一些计算相关的各种功能进去，程序体积可能也只会大一丢丢吧</p>
<p>另外，打包时如何优化资源，排除掉一些不必要的模块还值得学学。不过，尽管文件体积大点，功能总算是实现了，还是蛮有成就感的</p>
]]></content>
      <tags>
        <tag>PyQt</tag>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title>侄子背单词</title>
    <url>/posts/Nephews-memorizing-vocabulary.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>侄子这几天在背单词，但是打开了初中英语词汇的书，看了好几天了，还是只翻了前面几页。背，或者说 “读” 单词书有什么意思，期间没有足够的反馈，看着单词似乎认识又似乎不认识。我们又何尝不是这样过来的人呢，也都知道拿着词汇书记单词的枯燥，换做谁都不愿意以这种方式来记单词。<br>哥哥给侄子买了本词汇书和一本阅读理解的作业书，甩给他了，可是却不知道他，作为初二学生，连 face, said, more 这类的基础词汇都不认识，还指望他自己背词汇书和做题吗，明显方法上是有错误的。所以，打算让侄子试一下使用 Anki 来背单词，或者更准确的来说是 “记单词”，而不是 “背单词”，其实我的目标很简单，只是 “记”，对单词和释义留有一个印象即可，真正想要记牢单词，还需要在实战写作业查单词的过程中去记住这个单词。</p>
<h3 id="Anki-是什么"><a href="#Anki-是什么" class="headerlink" title="Anki 是什么"></a>Anki 是什么</h3><p>这里只要知道 Anki 是一款电子抽认卡类型的软件就可以了，抽认卡即正面是问题，反面是答案，就那么简单。要我说 Anki 和墨墨背单词、百词斩这些软件的区别，一是 Anki 除了可以用来记单词，什么都可以记，因为抽认卡是我们自己创建的，二是 Anki 自动分配学习任务背后的那一套算法比市场上的软件要好，三是 Anki 高度的可自定义（包括抽认卡的模板、CSS 样式等）… 更多的我就不再深入了，对于入门的新手来说，第一点和第二点足够了</p>
<h3 id="为什么-Anki"><a href="#为什么-Anki" class="headerlink" title="为什么 Anki"></a>为什么 Anki</h3><p>使用 Anki 有那么几个好处：</p>
<ol>
<li>词汇资源丰富。Ankiweb 上就有现成的初中英语词汇卡包，对于这种公共科目，直接下载使用，基本上无需花时间来自制抽认卡</li>
<li>充分及时的反馈。对于一个单词，先出来的是单词，而后再根据自己的判断来决定对这个单词的熟悉程度。不像纸质书一样，词汇和释义一眼扫过去，好像这个释义本身就对应着这个单词，好像这个单词本来就会，但其实这都是假象，并且缺少及时反馈，会与不会，最终结果都是只停留于看书，结果当然是越看越无趣，越看越想睡。Anki 这类抽认卡则开始只出现单词，自己心里做完判断会不会之后再显示答案，再对这张抽认卡做出反馈。单词到主动回忆释义的过程 总比 直接同时看着单词和释义的过程 记忆效果更好。了解更多：请搜索 <code>主动回忆</code></li>
<li>电子资源有标准发音。图片什么的先不说，我个人认为图片对记忆词汇的帮助并不大，但是词汇的发音就不一样了，听多了，就算不知道这个单词的意思，但起码看到这个单词就会读了</li>
<li>考核方便。电子的抽认卡通过某些条件进行筛选，可以轻松的从已学习的抽认卡中抽选出不同难易程度的卡片（筛选是可以根据当时答题的反馈结果对个人进行针对性的过滤的）。而相对于词汇书，想要考核，又需要有人通过默写的手段来进行检查，这种手段真的是低效的，对于进行检查的人来说，需要一个单词一个单词的读词汇，等着默写的人一个一个的写完，而对于默写的人来说，这无疑是童年噩梦。默写完了还需要进行批改，批改完了又如何，错了的词汇进行抄写？了解更多： <a href="https://mp.weixin.qq.com/s?__biz=MzU4NjQzOTk2MA==&amp;mid=2247483974&amp;idx=1&amp;sn=c3640a0e10694dc4b665b2527fef1122&amp;chksm=fdfa0e31ca8d872780106027f58ba880ae9469c3f1ae8a943b8d7a71f8e6285d4c27cc8921ee&amp;token=1977868752&amp;lang=zh_CN#rd">Anki 之筛选记忆库高级篇</a></li>
<li>自动分配任务。对于词汇书，昨天记的单词今天还要在过一遍吗？是全部过一遍吗还是挑几个过一遍？全部过一遍太耗时间了，难道前天，大前天记的单词也需要再重新过一遍？这些问题对于 Anki 来说就不是问题。Anki 只需要你设置每天需要背诵多少个新增词汇就够了，至于前几天背诵的词汇，单词再次出现（也就是你今天需要完成的任务）都是根据当时候你的反馈进行安排的。这样，你可以完全复习到前几天遇到不是很熟悉的单词，当然并不受说简单的词汇不会再出现，而是简单的词汇相对于这些不熟悉的词汇，出现的间隔时间较长一些，频率较低一些。而且，重要的一点是，Anki 会根据你每次的答题反馈对这个间隔时间和出现频率进行调整，你也不必要纠结这个词汇我到底是会还是不会的问题了，不会又怎么了，大不了我让这个单词多出现几次嘛。所以可以做到：只要信任 Anki 的任务分配，那么之后就不用考虑该如何复习之前学过的内容了，打开软件直接开始学就完了。其实，这里所说的自动分配任务，其后是有着一套完整的算法的，这里不具体展开说，有兴趣的可以自行搜索 <code>spaced-repetition-algorithm</code>、<code>Supermemo</code> 等内容</li>
</ol>
<h3 id="一些背单词的原则"><a href="#一些背单词的原则" class="headerlink" title="一些背单词的原则"></a>一些背单词的原则</h3><ol>
<li>准确率。接着上方的第 4 点说，单词就算默写正确，又能代表你真正记住了这个单词了吗，就算拼写错误，也不见得如何呀，最多是这个单词中有几个字母和发音什么的确实不太好区分或者其他。再说，其实默写单词这种方式，短期记忆的影响特别大，因为知道等会就要默写这几个单词了，注意力当然可以快速集中到容易出错的单词身上，可仔细想一想，考试或者说默写这个环节一旦过了之后，这些短期记忆就会被迅速清空，所以说默写环节记得的那几个单词也并不意味着你之后几天还能准确的默的出来。我想说的是，不要太关注 100% 的准确率（这里的准确率是抽人的准确率，而不是默写的准确率），达到 80-90% 就足够了，每天所记的单词数量可以适当调高，错就错了，不会就不会，又怎么了，大不了通过抽认卡点一下 “重来”、“困难” 这两个按钮嘛，十分钟之内又会再次出现。每天 100 个新单词、准确率达到 80-90% 可能要比每天 30 个准确率达到 100% 要容易的多</li>
<li>不要尝试在连续的时间段内重复的记那么几个单词，而是要将记每个单词的时间分配在多个不连续的时间段中。意思就相当于在连续时间段中背诵一串单词，和在不同时间段中背诵一串单词的效果是完全不一样的（当然这里假设两者所花的总时间相同），这点可能大家也深有体会，配合着 Anki 的自动分配任务，这一点完全由程序自动完成，而不需我们考虑</li>
</ol>
<h3 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h3><p><del>待更新…</del></p>
<p>2022-08-05 更新</p>
<p>侄子使用 Anki 来背单词，效果还是有的，到目前为止，他自己说课本上每页基本上单词认识一半左右了（他背了哪些单词，知道那些单词，我似乎比他更清楚，原因可见下）。当然，使用 Anki 的过程中，也发现了一些问题，这里记录一下</p>
<p>A. 牌组不是我自己所制作的，并没有按照单词的难易程度（或单词的出现频率）划分子牌组，导致一开始就会出现一些难度非常大的单词，这对于单词零基础的侄子来说是一件难事，我需要手动将这些频率出现较低的单词先暂停学习，怕到时候花了那么长时间背的单词，做题的过程中竟然一个也不出现，那不就极大降低背单词的兴趣了，背这种低频词汇实际上是吃力不讨好的事。</p>
<p>针对这一点，可以采取如下策略，但都需要我来手动调整：</p>
<ol>
<li>将下载到的大牌组按照词汇出现的频率划分成多个子牌组，从易到难的学。</li>
<li>不用划分子牌组，在学习新单词的时候做好标记，比如重点词汇使用红色旗帜，常规词汇使用绿色旗帜，暂停掉太难而又不常见的词汇。做好旗帜一是可以方便后期做筛选，二是侄子可判断这个单词的重要程度，但是需要在他背新单词时我在旁边看着，一个个的过滤的这些单词，这也正是我所采用的方式。</li>
<li>自己创建卡包，针对他们英语暑假作业上的单词进行有针对性的练习，或先让他手动将不会的词汇做标记，然后再根据这些标记的单词做卡片。</li>
</ol>
<p>B. 我需要腾出一台设备给侄子背单词，要么手机，要么电脑，反正是需要腾出一台设备让他学，自己有时还需要到旁边守着，以防他学着学着就刷其他东西去了。</p>
<p>C. 短期时间记忆大量词汇容易导致词汇意思和词汇对不上号，经常记混。但这是正常的，换做谁都会这样。</p>
<h3 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h3><ul>
<li>个人博客：<a href="https://coffeelize.top/posts/de56eb0a.html">从 anki 到 spaced-Repetition 总结及建议</a></li>
<li>个人博客：<a href="https://coffeelize.top/posts/b0b73b25.html">为什么放弃使用 remnote</a></li>
</ul>
]]></content>
      <tags>
        <tag>Anki</tag>
      </tags>
  </entry>
  <entry>
    <title>六级经验分享</title>
    <url>/posts/CET-6-Experience-Sharing.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，密码输入错误" data-whm="抱歉，当前文章不能被校验">
  <script id="hbeData" type="hbeData" data-hmacdigest="3746c43f18fd2193b21b3dd5b7338b41028fd4a3deadcef07f070912e713b701">49f5d397cca217f02652b83d3a829717bc8084ad49a11604c9d054863110b6901c6ce12a7e52e99859285f45e3576fde1137dfa06cacb224e727396655765e622ca15b44b58f496861057bba4d8f73381cbd9c65da88c4509d92e7074a2e67c4e97c88512d49913ff5e551244ba159e3bb360071252cd6c7acbea616a3f89a079fc06a8f5ac7562017fa8f91b22561498757de6df00f2f49b8e49e37806b2a1c3651f7da68c7dd509590a933c0dc57e90b52122626a4f52acef19f88dfc1de5e989d6f2bb6c8376525abd9f07c39728531cd793a353d6483bcbe65a9fd17d1b965e3081f743178de784325fbe6cddc529f6e5f6e3ad27823abca17141dbec885de7500754666be2ecd50b89985d7c6cf768c10bacd586a82cb6a1778d757efcf435dbbf73fee8de8a7b60c90afeb2777b8e255da60e344d47d35f4ebab2c8acb5723bbd0955f86f49b0b89aab2794ba6adb296897a2262addfa00ffe653e94fa061a0621763697e1ebd7d8b4ff5fed5c385bab6cc0eca2202e7c2940f066007bedd7a785ca870ba3a0634cfd6878b829068e67af2e265bd8a582f318651067edc4fc7359cc60023f7a16ea7206674e9e360bc3602a74e99b079036fccc5a29ce4c21b1c62ec4bbc20a61e1254c85671ded9d1aa0c8687082f880a6ae0053a2bed53e5c45939ced0180f5314c4e7688c3e33e4df1b34c5617ad4cba7966ee553e2517484e015a6f7a92213ea240ff27664bdb84647152e7b94ad8582669cd83c75c8122aab8b299386b7e1d44c4bd4207a7baf4ef5aca686fb9b7c471e888af80b69de56edacd06ee0c0aa35ca133154f2feb0fe9df00d3c8e5336f93f2b1f73c54fdedf73659f738a93055510c955edb77aa4d706f7c6e917aecf52d856b5f42846f48e4ff11d48a41fed69415249a73f4151d8d11c69e4a8071a81aab129dd3cd70a8d25e15943f612c94844bfc596a6902ed5a410fe0ef1cda7be7c44de54e177a79c13996bf623b93126a653a27401a9cee881df421e9c1409816d8842720f9b2549cb342095360e01df29da23048df3baca2f76d3e5e988ee74f6ad06c8655e576180e951581d206a807b399067d2e4188559d18d8741a409dc57ced3033952ccd596e9886c93be6ef1534c31ef11a48948025fc25510fe5221b24b0885825c353696f01e57be6ba8d77d1dd2356cb74a55e5f6be0e41fec668f377555cba7228d60afec5bff0a66a943f0fcf6df48ccd350069e00505af156624cb159bec9f7170ea8b73c888825052fcd5ef7943055c52dbf6ead2d2dd476f5235847f63fee690fdfa3be5c46b76437a959c6176d8176838a8cdbb4662f6aae22cf6e02b8b4b7278ea7f9abc80332bd4ffe999ba8194169a5676ae8a7b5b979b8e56ff5df8997632a7621b9a2fc1d2b54fc65ed465b651120791db2699a31211177b970432d052d9d9d7642ec1c210642c4cf92c03dd9a6dc5113a0fa7a390e3a9b80bd4067cfc10dbf1971d9fcf4221bc1d5fe185be8e9ea0335673c80b05a34585baafac7b565377f8986bfa8718f8f58c7fb9f4bd75568a11cb3ea137d68925ec6d2deacd08303ad92b081f1a92615e2e044ce34b5e431e8eebb45fed89f6c2255105c5d9a4b6081e87b0548466685d4557e9b79843644e74fe07d5b7af345ff2ba052c3d52bc357776fc0afa0240a35c9bb4a86e568ab11d78ce33370d5a6b461fa4e0b522bdc3270476b383ef142599e0d52ca9c4aeb6cbac107292316cc49016d43131b50dd4c3f552ef052aa10f8d9548ce11ef7fa108a2d1cf9292490a7ab0032e2e7a5a023f0b9f00c18193764186773cbd9f52a85190e2466b1cf8546dfdd14bc79cd89dc6fe209bed7d4992e31f3713ad38bf734c39f7fed5ad01e7f2ed2ed94fd42c57e6ba51a1f04ef96d5681cf76c276e2074bd687b39b96acaabcee2715d6014157aede703fbeb755010f7c2f744be8cf513138d3561f7c9ad3a2168c909c48cadf0cf37c4f140acb548ce66a0a0b1a58a72b97e01e2de316fb8974a6d18e20856e3c7ce68a34b52f5f8c94199ffb238bf67d439371d0dbea939ef7ad7b0d90dff0f4043387a318658b7dfb3d2c629b019fe4bc9658877991da89fd0e844892f67a70f1bd3138e70b212e72817d352d631e386d666d50b33f8fa23ba0c382bba0a0e4f2abcd76b5f42f5319ec141f8c02bb2724a63f4394b7efd67972d3f4dbfd9feeb9d08bc77e9abff03c60187b48b30b093498120cf38f7c6ef9a810370c3c22c1a7a30b2c6583c33d2cc21762a20f2d634f689bb3f054ff2dfc05109867c0177e5371e3b6963be222bedcf619fa8bc8b0e856cde86608ed12c154cda054397130629ef6da66fb0ad3cece64cf5242f20e23a2ab0c3b7e6afbbe238b17cf2b93edc95a7c01b2702c2a17f7549553bdbc3fbea221511a4788b97bb5fec8ba217ba71102b8b4a6c9e4be84f7951ad3d792fa2433b9df77d2f7b7c187db558a0fcc1d3a1421f0d17bdbb4b8120c70a077f321e830e160f40226b096fc1a607f84b8d414f1dd78efac744d37206045584cf4a6706c30ee305a0a60b2a0dd7d0c25e6e3ffeef0cdb5e9f3e25c0a62cd27cc4131225a1895319fba2ee5f658d947324f8fc7e1f3a358a3753565bb7cf9c963b82a45592b4b79ece6f4d589ff9a78b83ed1f94446f70a1affec69384b9e1a9fa7efcc3b8b83892c566b5e63f6c7d86543b111231c0409a99aff6f7ed245afe230b0a9d6526dd224d0f494321a620309ad4e5e1d64809ffb539bfa1c2b8396ce67a85f9eb00c6a50991955ae5a9ef26bea8d5e3ed48d1778cc77f2c23c42139bd40d98098a5164645bb5bfa69b8edfb7d7ca38cacaa7ec360c9a8209d9ef969dcb4acd961e0eab0514646b9de09b9cf12abaf65fa96b76dbc1585fb64e5212543ad90737999f5229bae434338b81398ccf79f82e8a6be5df217b27ee81f046233889ba3569c13bc4603c6ffc53a9f8c8a394a7aa534d34c3e06e5a095841d54af6197986caa6aaaf6481dea67dcfb324805a1eef57db381b6d18cae563329a90683c97e93a790bc5656008f321b7357c5dc6bcec8b74eaf7c3f4e99de51d71b895ce1837c71b5f9602644155fc33d2fd0baa0c8e0c25763d588b5cc6343f50a05505cc81643517b8c7f3b0e31ed456731a1009d8e89ac8c8b8b1eaa178d96627ba30968c622a77585ee3488dd042f9954ff55129bed69b3201b3f33daafa1ff70a78ae09712c1f4c8d708b8b53e4539435ee59feea7e65ff0122842ba1bf1cffba7c71c9e51a3a9ba68c2b8c0f1500f4e2b4aadc50bba352025c91d6d5ac114d3b982a41ce0b110443517d5a00bb2d0d6c8e26de7ce46f8c97c1147197bc588aedf13972bd3e5f7a2f8c830de901a6b23a36ed38c556430da09ea2b818395d1bbeae9507a1c30a18678fca1de80a4bc23459f3a81f9e6a3ba848e54848013185488196b342214fec44c9ea05b11d44e51915429810fb6c44c20bb41d80bbba8a9f5a60e7517511384ab78093e84edf3d1c3078565da9fc609f597a559f246f04b49eaa5727cebbf913f462de5dfa2135b4b6a4f5fc57152d4192152e307e05b2f53f09aad433e370e415287043422bcd8964f26dd2b9664ae98e1862f6b994a186f7d7872ac5fe995adbf8159a6ad3f6b5717e862437f8ea87616b339306f9242d994946e30329f29b08ae80e456082846c23e0bb774cd2cc576e15f3569c743af2dd6002888f224d3164b61f7d2ffc04466b8847eda1549df1631254ddb97cab9b27ddc885c14663a9310b9f2464976065aeefe00d26c1f1e3941c04fddd3f3ab741d21bb30f40b4ddb4690bd689ca7dcd4dfd10a5912b9816fe71c76b790eb0758a59ed550948b377bc5966ef70542e5c7047a65094023e5089344cce4fcdefe1f8549ace8b9868e4b655b660dcb825f0ad956f3a05c65c031455c73e80ed8ef91333e38121a57a47181f1b79b509dc9bfcbead3fcc915ee50b7627ad5c4610f47feae3424ba25a6189f2e6144afb0ab44069bfbbfa6aede4c734fcb8850d0fafbd07abacc1604c8ef0cdd0c90327a04f898a99dd035ad87c4b2b9e1046cec703de3af02969feb3e98537eaffbb5ca9b91ff52a63aacbd0e71348efa97b866de8730b66647ad4fcdc80a5a73c2a8a472acfd5283d68277c3f5c07dd862f51c9bc6876275acbbae79ef1925e38c3a32067219a754c4bd4f1cda3b724ff2f3a3346a371ff4572aff57c084c8a39c297c4d9c7c215bcaa6bb9f89bd709593d87dfff2ac56ad014c4363474fdf0639168852c867b330f0165598cb8ff04370d53da8af18346a6bcb1147a6c0995adf90c2b309a666be7552b354e9bd3</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，见谅！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>coffeelize</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 LaTeX 制作 Lyric</title>
    <url>/posts/Making-Lyric-with-LaTeX.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>输出一份 PDF 文件，左侧为英文歌词，右侧为中文歌词翻译，尽量保持排版美观。文末附中英文歌词</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>代码中较难理解的部分已添加注释</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\documentclass[12pt]{ctexart}</span><br><span class="line">\usepackage{geometry}</span><br><span class="line">\usepackage{multicol}</span><br><span class="line">\usepackage{fontspec}</span><br><span class="line">\usepackage{eso-pic}</span><br><span class="line">\usepackage{tikz}</span><br><span class="line">\usepackage{paracol}</span><br><span class="line">\usepackage{fancyhdr}</span><br><span class="line">\usepackage{hyperref}</span><br><span class="line"></span><br><span class="line">% 设置页面大小和边距</span><br><span class="line">\geometry{a4paper,left=1.5cm,right=1.5cm,top=2cm,bottom=2cm}</span><br><span class="line"></span><br><span class="line">% 设置背景为网格</span><br><span class="line">\AddToShipoutPictureBG{%</span><br><span class="line">	\begin{tikzpicture}[overlay,remember picture]</span><br><span class="line">		\draw[step=5mm, color=gray!10, line width=0.2mm] (current page.south west) grid (current page.north east);</span><br><span class="line">	\end{tikzpicture}%</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">% 设置页眉和页脚样式</span><br><span class="line">\pagestyle{fancy}</span><br><span class="line">\fancyhf{}</span><br><span class="line">\renewcommand{\headrulewidth}{0pt}</span><br><span class="line">\cfoot{\thepage}</span><br><span class="line">\rfoot{\href{https://coffeelize.top/}{Design By Coffeelize}}</span><br><span class="line"></span><br><span class="line">% 设置字体</span><br><span class="line">\setmainfont{Times New Roman}</span><br><span class="line">\newfontfamily\zhfont{Source Han Serif CN}</span><br><span class="line"></span><br><span class="line">% 取消段落首行缩进</span><br><span class="line">\setlength{\parindent}{0pt}</span><br><span class="line"></span><br><span class="line">% 设置列间距和列宽比例</span><br><span class="line">\setlength{\columnsep}{0.5cm}</span><br><span class="line">\columnratio{0.6}</span><br><span class="line"></span><br><span class="line">\begin{document}</span><br><span class="line">	</span><br><span class="line">	\section*{The Wandering Star}</span><br><span class="line">	</span><br><span class="line">	\hspace{1em}</span><br><span class="line">	</span><br><span class="line">	\begin{paracol}{2}</span><br><span class="line">		</span><br><span class="line">		\begin{leftcolumn*}</span><br><span class="line">			Soothsayer's lured to her star \\</span><br><span class="line">			Server of heaven's silent wanderers \\</span><br><span class="line">			Oh holy night, summon up the ghost \\</span><br><span class="line">			The hard of hearing always listen closest \\</span><br><span class="line">			The hard of hearing always listen closest</span><br><span class="line">			</span><br><span class="line">			\hspace{2em}</span><br><span class="line">			</span><br><span class="line">			Lo lo lo lo lo, lo lo and behold \\</span><br><span class="line">			It has been foretold lo lo lo lo long ago \\</span><br><span class="line">			Lo lo lo lo lo, lo lo and behold \\</span><br><span class="line">			I guess you never know what you never know</span><br><span class="line">			</span><br><span class="line">			\hspace{2em}</span><br><span class="line">			</span><br><span class="line">			Saturn, Jupiter confer, breaker of the wall in the morning \\</span><br><span class="line">			Aries, Pisces, either one \\</span><br><span class="line">			You will never know firsthand what day you're born on</span><br><span class="line">			</span><br><span class="line">			\hspace{2em}</span><br><span class="line">			</span><br><span class="line">			Lo lo lo lo lo, lo lo and behold \\</span><br><span class="line">			It has been foretold lo lo lo lo long ago \\</span><br><span class="line">			Lo lo lo lo lo, lo lo and behold \\</span><br><span class="line">			I guess you never know what you never know</span><br><span class="line">			</span><br><span class="line">			\hspace{2em}</span><br><span class="line">			</span><br><span class="line">			Wandering star\\</span><br><span class="line">			Wandering star\\</span><br><span class="line">			Wandering star\\</span><br><span class="line">			Wandering star</span><br><span class="line">			</span><br><span class="line">		\end{leftcolumn*}</span><br><span class="line">		</span><br><span class="line">		\switchcolumn</span><br><span class="line">		</span><br><span class="line">		% 右侧中文</span><br><span class="line">		\zhfont</span><br><span class="line">		</span><br><span class="line">		被诱至她的星辰的预言家\\</span><br><span class="line">		天堂的寂静漫游者的仆人\\</span><br><span class="line">		哦，神圣的夜晚，召唤幽灵\\</span><br><span class="line">		听力不佳的人总是最专注地倾听\\</span><br><span class="line">		听力不佳的人总是最专注地倾听</span><br><span class="line">		</span><br><span class="line">		\hspace{2em}</span><br><span class="line">		</span><br><span class="line">		啦啦啦啦啦，啦啦看哪\\</span><br><span class="line">		这早已被预言啦啦啦啦很久以前\\</span><br><span class="line">		啦啦啦啦啦，啦啦看哪\\</span><br><span class="line">		我猜你永远不会知道你从未知道的事情</span><br><span class="line">		</span><br><span class="line">		\hspace{2em}</span><br><span class="line">		</span><br><span class="line">		土星，木星交谈，清晨的墙壁破碎者\\</span><br><span class="line">		白羊座，双鱼座，任何一个\\</span><br><span class="line">		你永远不会亲自知道你是在哪一天出生的</span><br><span class="line">		</span><br><span class="line">		\hspace{2em}</span><br><span class="line">		</span><br><span class="line">		啦啦啦啦啦，啦啦看哪\\</span><br><span class="line">		这早已被预言啦啦啦啦很久以前\\</span><br><span class="line">		啦啦啦啦啦，啦啦看哪\\</span><br><span class="line">		我猜你永远不会知道你从未知道的事情</span><br><span class="line">		</span><br><span class="line">		\hspace{2em}</span><br><span class="line">		</span><br><span class="line">		漫游的星星\\</span><br><span class="line">		漫游的星星\\</span><br><span class="line">		漫游的星星\\</span><br><span class="line">		漫游的星星</span><br><span class="line">		</span><br><span class="line">	\end{paracol}</span><br><span class="line">	</span><br><span class="line">\end{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2023/08/06/aEWCuO97MnrdlAi.png" alt="image.png"></p>
<p>注：中文翻译来源于 GPT 翻译</p>
<h2 id="The-Wandering-Star-中英文歌词"><a href="#The-Wandering-Star-中英文歌词" class="headerlink" title="The Wandering Star 中英文歌词"></a>The Wandering Star 中英文歌词</h2><p>这里提供 The Wandering Star 中英文歌词，如果大家有更好的排版方案，可以使用如下的歌词进行排版</p>
<hr>
<p>Soothsayer’s lured to her star<br>Server of heaven’s silent wanderers<br>Oh holy night, summon up the ghost<br>The hard of hearing always listen closest<br>The hard of hearing always listen closest</p>
<p>Lo lo lo lo lo, lo lo and behold<br>It has been foretold lo lo lo lo long ago<br>Lo lo lo lo lo, lo lo and behold<br>I guess you never know what you never know</p>
<p>Saturn, Jupiter confer, breaker of the wall in the morning<br>Aries, Pisces, either one<br>You will never know firsthand what day you’re born on</p>
<p>Lo lo lo lo lo, lo lo and behold<br>It has been foretold lo lo lo lo long ago<br>Lo lo lo lo lo, lo lo and behold<br>I guess you never know what you never know</p>
<p>Wandering star<br>Wandering star<br>Wandering star<br>Wandering star</p>
<hr>
<p>被诱至她的星辰的预言家<br>天堂的寂静漫游者的仆人<br>哦，神圣的夜晚，召唤幽灵<br>听力不佳的人总是最专注地倾听<br>听力不佳的人总是最专注地倾听</p>
<p>啦啦啦啦啦，啦啦看哪<br>这早已被预言啦啦啦啦很久以前<br>啦啦啦啦啦，啦啦看哪<br>我猜你永远不会知道你从未知道的事情</p>
<p>土星，木星交谈，清晨的墙壁破碎者<br>白羊座，双鱼座，任何一个<br>你永远不会亲自知道你是在哪一天出生的</p>
<p>啦啦啦啦啦，啦啦看哪<br>这早已被预言啦啦啦啦很久以前<br>啦啦啦啦啦，啦啦看哪<br>我猜你永远不会知道你从未知道的事情</p>
<p>漫游的星星<br>漫游的星星<br>漫游的星星<br>漫游的星星</p>
<h2 id="有用的资料"><a href="#有用的资料" class="headerlink" title="有用的资料"></a>有用的资料</h2><p>在线 LaTeX 格式化工具：<a href="https://c.albert-thompson.com/latex-pretty/">Online Latex Formatter</a></p>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>写在博客创建的一周年</title>
    <url>/posts/Writing-on-the-first-anniversary-of-the-creation-of-the-blog.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="coffeelize"><a href="#coffeelize" class="headerlink" title="coffeelize"></a>coffeelize</h3><p>这两天收到阿里云域名续费消息，同时也收到了网站 SSL 证书到期的邮件，是的，域名买了一年，到今天刚好一年。</p>
<p>博客在中途更换过一次域名，也就是现在的域名：<code>coffeelize.top</code>。之所以叫 coffeelize，不仅仅是因为 #咖啡日常 #，更多的其实是想强调 <code>lize</code>。<code>lize</code> 在英语单词中通常为动词的后缀，很多情况下 <code>名词 + lize</code> 后就变成了动词，一是想表达：就像喝了一杯咖啡一样，满满的驱动力；二是期望：自己能够像 “coffeee” 那样，能够带给周围人更多的积极向上的 “动力”。</p>
<p><img data-src="https://s2.loli.net/2022/12/19/x8gyqlSMFsrhIRk.png" alt="01-博客运行时间.png"></p>
<p><img data-src="https://s2.loli.net/2022/12/19/JUlu2bNvLd6M8Oo.png" alt="02-域名续费消息.png"></p>
<p><img data-src="https://s2.loli.net/2022/12/19/Zs513UwFVmuAnaf.png" alt="03-证书到期.png"></p>
<p>去年的这个时候，还在复习着数值分析的期末考试呢😂，搭建这个博客花了我很长时间，记得那个 SSL 总是无法正常连接，导致无法往仓库中推送文件，也算是苦中作乐吧，哈哈</p>
<p>有了自己的个人博客之后，开始关注更多相关领域的个人博客，学着有模有样的发布笔记、装扮博客、交换友链，开始更加注重消息的来源和质量。自己也喜欢看别人的博客和笔记，有种窥探别人日记本闯入他人领地的感觉，遇到和自己 “技术栈” 差不多的站长，会主动联系，加个好友、交换一下友链或者相互鼓励一下，这种感觉很棒，可能也是我不断更新下去的主要原因吧。</p>
<p>博客在这一年里也有一点点的收获，下图为必应搜索引擎的数据报告（因为之前更换了一次域名的原因，这里只显示从 6 月份开始到现在的数据）</p>
<p><img data-src="https://s2.loli.net/2022/12/19/pXoBg9TFJK8xmaC.png" alt="05-必应控制台.png"></p>
<p>其实我也不在乎这个数据报告，更在乎的是我的🤝朋友们及笔记呀<br><img data-src="https://s2.loli.net/2022/12/19/HyleRzDBEp4ISbc.png" alt="06-朋友们以及笔记.png"></p>
]]></content>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>内部类 &amp; Lambda 表达式简明笔记</title>
    <url>/posts/Concise-Notes-on-Lambda-Expressions.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="内部类的基本使用"><a href="#内部类的基本使用" class="headerlink" title="内部类的基本使用"></a>内部类的基本使用</h3><p>内部类概念：在一个类中定义一个类</p>
<p>比如，在一个类 A 的内部定义一个类 B，类 B 就被称为内部类。内部类定义格式如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class 外部类名{</span></span><br><span class="line"><span class="comment"> 修饰符 class 内部类名{</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> }</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>{</span><br><span class="line"> <span class="comment">//此处的Inner就是所说的内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>内部类的访问特点</p>
<ul>
<li>内部类可以直接访问外部类的成员，包括私有</li>
<li>外部类要访问内部类的成员，必须创建对象</li>
</ul>
<p>1、示例代码</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Inner</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">     <span class="comment">//此处编译器报错</span></span><br><span class="line">        Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>{</span><br><span class="line">            System.out.println(<span class="string">"Inner..show"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>以上代码中，为什么这里编译器会报错呢：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Inner i = <span class="keyword">new</span> Inner();</span><br></pre></td></tr></tbody></table></figure>

<p>因为类名没有写全 –&gt; 为什么呢？举例如下</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Inner</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer2</span></span>{</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>{</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>此时创建 Inner 对象时，编译器都懵掉了，你到底是想要创建那个类中的 Inner 类 –&gt; 需要我们正确书写格式</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Inner</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//创建内部类的格式</span></span><br><span class="line">        <span class="comment">//外部类名.内部类类名 对象名 = new 外部类对象().new 内部类对象;</span></span><br><span class="line">        Outer.Inner i = <span class="keyword">new</span> Outer().<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>emm，创建内部类为什么格式那么复杂:-)。如下是演示内部类变量、内部类方法的访问方式：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Inner</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{  </span><br><span class="line">        <span class="comment">//创建内部类的格式  </span></span><br><span class="line">        <span class="comment">//外部类名.内部类类名 对象名 = new 外部类对象().new 内部类对象;  </span></span><br><span class="line">        Outer.Inner i = <span class="keyword">new</span> Outer().<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;  </span><br><span class="line">        <span class="comment">//访问内部类变量  </span></span><br><span class="line">        System.out.println(i.num);  </span><br><span class="line">        <span class="comment">//访问内部类方法  </span></span><br><span class="line">        i.show();  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>{  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">10</span>;  </span><br><span class="line">    <span class="comment">//内部类  </span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>{  </span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>{  </span><br><span class="line">            System.out.println(<span class="string">"Inner...show"</span>);  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>内部类是可以直接使用外部类中的成员变量的，代码如下：</p>
<p>可以看到，调用内部类方法时，可以访问到外部类中的 a 变量（包括私有的成员变量）</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1Inner</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{  </span><br><span class="line">        <span class="comment">//创建内部类的格式  </span></span><br><span class="line">        <span class="comment">//外部类名.内部类类名 对象名 = new 外部类对象().new 内部类对象;  </span></span><br><span class="line">        Outer.Inner i = <span class="keyword">new</span> Outer().<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;  </span><br><span class="line">        <span class="comment">//访问内部类变量  </span></span><br><span class="line">        System.out.println(i.num);  </span><br><span class="line">        <span class="comment">//访问内部类方法  </span></span><br><span class="line">        i.show();  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>{ </span><br><span class="line"> <span class="comment">//外部类中私有的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">10</span>;  </span><br><span class="line">    <span class="comment">//内部类  </span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>{  </span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>{  </span><br><span class="line">            System.out.println(<span class="string">"Inner...show"</span>);</span><br><span class="line">            <span class="comment">//内部类可以直接访问外部类的成员变量（包括私有的成员变量）  </span></span><br><span class="line">            System.out.println(<span class="string">"外部类中的成员变量"</span> + a);  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>程序输出</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line">Inner...show</span><br><span class="line">外部类中的成员变量<span class="number">10</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>按照内部类在类中定义的位置不同，可以分为如下两种形式</p>
<ul>
<li>在类的成员位置：成员内部类</li>
<li>在类的局部位置：局部内部类</li>
</ul>
<p>外界创建成员内部类格式</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//外部类名.内部类名 对象名 = 外部类对象.内部类对象;</span></span><br><span class="line">Outer.Inner oi = <span class="keyword">new</span> Outer().<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br></pre></td></tr></tbody></table></figure>

<p>成员内部类，也属于（成员），既然是成员就可以被一些修饰符所修饰，比如 private 和 static</p>
<h4 id="私有成员内部类"><a href="#私有成员内部类" class="headerlink" title="私有成员内部类"></a>私有成员内部类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2Innerclass</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">     <span class="comment">//此处编译错误  </span></span><br><span class="line">        Outer.Inner oi = <span class="keyword">new</span> Outer().<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>{  </span><br><span class="line">    <span class="comment">//私有成员内部类  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>{  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>{  </span><br><span class="line">            System.out.println(<span class="string">"inner..show"</span>);  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>此处，创建成员内部类对象时编译错误<br>因为 private 是同一类中可见 –&gt; 也就是说只在 Outer 类中是可见的。那么外界如何创建这个内部类对象呢：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2Innerclass</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{  </span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();  </span><br><span class="line">        <span class="comment">//调用外部类中的方法，利用类中的方法来间接访问内部类  </span></span><br><span class="line">        outer.method();  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>{  </span><br><span class="line">    <span class="comment">//私有成员内部类  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>{  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>{  </span><br><span class="line">            System.out.println(<span class="string">"inner..show"</span>);  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>{  </span><br><span class="line">        <span class="comment">//因为和Inner类都属于Outer类，所以可以直接这样创建  </span></span><br><span class="line">        Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">        <span class="comment">//访问类中的方法  </span></span><br><span class="line">        i.show();  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>私有成员内部类访问：在自己所在的外部类中创建对象访问</p>
<h3 id="静态成员内部类"><a href="#静态成员内部类" class="headerlink" title="静态成员内部类"></a>静态成员内部类</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3Innerclass</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{  </span><br><span class="line">        <span class="comment">// 外部类名.内部类名 对象名 = new 外部类名.内部类名();  </span></span><br><span class="line">        Outer.Inner oi = <span class="keyword">new</span> Outer.Inner();  </span><br><span class="line">        oi.show();  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>{  </span><br><span class="line">    <span class="comment">//静态成员内部类  </span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>{  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>{  </span><br><span class="line">            System.out.println(<span class="string">"inner..show"</span>);  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">Outer.Inner oi = <span class="keyword">new</span> Outer().<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>; <span class="comment">//错误，这是没有加static修饰符时的方式</span></span><br><span class="line">Outer.Inner oi = <span class="keyword">new</span> Outer.Inner();       <span class="comment">//正确</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>因为 Inner 不是 private 修饰的，所以外部可以访问</li>
<li>因为 Inner 是 static 修饰的，可以不用创建类的对象『new Outer ()』来访问，通过类『Outer』直接就可以访问了</li>
</ul>
<p>对于 Staic 修饰的其实很好调用，比如静态内部类中还有一个静态方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3Innerclass</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{  </span><br><span class="line">        <span class="comment">// 外部类名.内部类名 对象名 = new 外部类名.内部类名();  </span></span><br><span class="line">        Outer.Inner oi = <span class="keyword">new</span> Outer.Inner();  </span><br><span class="line">        <span class="comment">//类名一路调用即可</span></span><br><span class="line">        Outer.Inner.method();  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>{  </span><br><span class="line">    <span class="comment">//静态成员内部类  </span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>{  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>{  </span><br><span class="line">            System.out.println(<span class="string">"inner..method"</span>);  </span><br><span class="line">        }  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//类名一路调用即可，都是Static的，无需创建对象，直接类名调用</span></span><br><span class="line">Outer.Inner.method(); </span><br></pre></td></tr></tbody></table></figure>

<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>静态成员内部类访问：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">外部类名.内部类名 对象名 = <span class="keyword">new</span> 外部类名.内部类名(); </span><br></pre></td></tr></tbody></table></figure>

<p>静态成员内部类中的静态方法：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">外部类名.内部类名.方法名();</span><br></pre></td></tr></tbody></table></figure>

<h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>局部内部类定义位置：局部内部类是在方法中定义的类，所以外界是无法直接访问的，需要在方法内部创建对象并使用</p>
<p>该类可以直接访问外部类的成员，也可以访问方法内地局部变量</p>
<p>1、代码展示：调用局部内部类中的方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4Innerclass</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{  </span><br><span class="line">        Outer o = <span class="keyword">new</span> Outer();  </span><br><span class="line">        o.method();  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>{  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//写在method当中的局部内部类  </span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>{  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>{  </span><br><span class="line">                System.out.println(<span class="string">"show..."</span>);  </span><br><span class="line">            }  </span><br><span class="line">        }  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//方法内部可以访问Inner类  </span></span><br><span class="line">        Inner inner = <span class="keyword">new</span> Inner();  </span><br><span class="line">        inner.show();  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>因为局部内部类的访问范围仅仅是方法体中的范围，范围如下图所示</p>
<p><img data-src="https://s2.loli.net/2023/02/03/Cl7DhR51joyIWzY.png" alt="01-局部内部类的访问范围.png"></p>
<p>2、代码展示：局部内部类访问不同变量</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4Innerclass</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Outer o = <span class="keyword">new</span> Outer();</span><br><span class="line">        o.method();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>{</span><br><span class="line">    <span class="comment">// 类中的成员变量</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 方法中的局部变量</span></span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写在method当中的局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>{</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>{</span><br><span class="line">                System.out.println(<span class="string">"show..."</span>);</span><br><span class="line">                <span class="comment">// 可以访问（嵌在里边的可以访问外边的）</span></span><br><span class="line">                System.out.println(a);</span><br><span class="line">                <span class="comment">// 可以访问方法中的局部变量</span></span><br><span class="line">                System.out.println(b);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法内部可以访问Inner类</span></span><br><span class="line">        Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        inner.show();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><ul>
<li>局部内部类，外界是无法直接使用，需要在方法内部创建对象并使用</li>
<li>该类可以直接访问外部类的成员，也可以访问方法内的局部变量</li>
<li>局部内部类我们平时是很少编写的，因为局部内部类实在是太受限了；在看源码的过程中也很少会见到局部内部类，讲他的作用是为后面的匿名内部类打基础。因为匿名内部类属于一种特殊的局部内部类</li>
</ul>
<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类本质上说一个特殊的局部内部类（定义在方法内部）<br>前提：需要存在一个接口或类</p>
<p>格式如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">new 类名或接口名(){</span></span><br><span class="line"><span class="comment"> 重写方法;</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Inter(){</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>{}</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure>

<p>1、代码演示：正常使用接口中的方法需要几步</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5Innerclass</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        InterImpl ii = <span class="keyword">new</span> InterImpl();</span><br><span class="line">        ii.show();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inner</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterImpl</span> <span class="keyword">implements</span> <span class="title">Inner</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"InterImpl 重写的show方法"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>1）创建实现类，通过 implements 关键字去实现接口<br>2）重写方法<br>3）创建实现类对象<br>4）调用重写后的方法</p>
<p>可以看到，想要使用接口中的方法还是比较复杂的。而如果是通过匿名内部类，就可以化简为 1 步</p>
<figure class="highlight diff"><table><tbody><tr><td class="code"><pre><span class="line">public class Test5Innerclass {  </span><br><span class="line">    public static void main(String[] args) {  </span><br><span class="line"><span class="deletion">-       InterImpl ii = new InterImpl();  </span></span><br><span class="line"><span class="deletion">-       ii.show();  </span></span><br><span class="line">        //匿名内部类  </span><br><span class="line"><span class="addition">+       new Inner(){  </span></span><br><span class="line"><span class="addition">+           @Override  </span></span><br><span class="line"><span class="addition">+           public void show() {  </span></span><br><span class="line"><span class="addition">+               System.out.println("匿名内部类中的show方法");  </span></span><br><span class="line"><span class="addition">+           }  </span></span><br><span class="line"><span class="addition">+       }.show();  </span></span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line">interface Inner{  </span><br><span class="line">    void show();  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line"><span class="deletion">-class InterImpl implements Inner{  </span></span><br><span class="line"><span class="deletion">-    @Override  </span></span><br><span class="line"><span class="deletion">-    public void show() {  </span></span><br><span class="line"><span class="deletion">-        System.out.println("InterImpl 重写的show方法");  </span></span><br><span class="line"><span class="deletion">-    }  </span></span><br><span class="line"><span class="deletion">-}</span></span><br></pre></td></tr></tbody></table></figure>

<p>我们重点分析这几行代码</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Inner(){</span><br><span class="line"> <span class="comment">//『实现接口的类』中需要重写的方法</span></span><br><span class="line">}.show();</span><br></pre></td></tr></tbody></table></figure>

<p>可以认为</p>
<p><img data-src="https://s2.loli.net/2023/02/03/Ff1O3SryMBuKzRe.png" alt="02-正常方式访问接口中的方法VS匿名内部类方式.png"></p>
<p>匿名内部类的理解：将继承（或实现）、方法重写、创建对象这三步放在了一步都当完成</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Inner(){}; --&gt; 相当于创建了一个实现了接口的实现类对象</span><br><span class="line"><span class="keyword">new</span> Inner(){}.show(); --&gt; 实现类对象调用方法</span><br></pre></td></tr></tbody></table></figure>

<p>2、代码演示：如果接口中有多个方法，匿名内部类最多只能调用其中的一个方法</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5Innerclass</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        <span class="keyword">new</span> Inner(){</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span> </span>{</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类中的show1方法"</span>);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>{</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类中的show2方法"</span>);</span><br><span class="line">            }</span><br><span class="line">  <span class="comment">//此处只能调用一次方法，就相当于"对象.方法"，而不能"对象.方法1.方法2"</span></span><br><span class="line">        }.show1();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inner</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>此时，我就想调用其中的多个方法呢，怎么办</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5Innerclass</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//Inner i 接口的引用；new Inner(){} 实现类对象 --&gt; 父类的引用指向了一个子类的对象（多态）  </span></span><br><span class="line">        Inner i = <span class="keyword">new</span> Inner(){  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span> </span>{  </span><br><span class="line">                System.out.println(<span class="string">"匿名内部类中的show1方法"</span>);  </span><br><span class="line">            }  </span><br><span class="line">  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>{  </span><br><span class="line">                System.out.println(<span class="string">"匿名内部类中的show2方法"</span>);  </span><br><span class="line">            }  </span><br><span class="line">        };  </span><br><span class="line">  </span><br><span class="line">        i.show1();  </span><br><span class="line">        i.show2();  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inner</span></span>{  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show1</span><span class="params">()</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>案例小结：如果说一个接口当中有多个方法，如果使用匿名内部类的方式将其中的多个方法都进行调用，可以在匿名内部类前面通过一个父类或父接口的引用去接收一下，这样就能以多态的形式将匿名内部类接受过来。通过引用就可以调其中的方法了</p>
<h4 id="匿名内部类在开发中的使用"><a href="#匿名内部类在开发中的使用" class="headerlink" title="匿名内部类在开发中的使用"></a>匿名内部类在开发中的使用</h4><p>当方法的形式参数是接口或者抽象类时，可以将匿名内部类作为实际参数进行传递</p>
<p>1、代码演示</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSwimming</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//调用方法(参数要求为实现类对象，这里我们使用匿名内部类的方式)  </span></span><br><span class="line">        goSwimming(<span class="keyword">new</span> Swimming(){  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>{  </span><br><span class="line">                System.out.println(<span class="string">"GoGoGo!"</span>);  </span><br><span class="line">            }  </span><br><span class="line">        });  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//实际参数为接口的方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">goSwimming</span><span class="params">(Swimming swimming)</span></span>{  </span><br><span class="line">        swimming.swim();  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Swimming</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>此处蓝色标记的就是创建了一个匿名内部类，将其作为 goSwimming () 方法的参数</p>
<p><img data-src="https://s2.loli.net/2023/02/03/XUTPBdKCL6u2yYf.png" alt="03-匿名内部类作为方法参数.png"></p>
<p>既然匿名内部类作为方法参数，其格式比较固定，编译器也为我们提供了代码提示：只要输入 <code>new 父接口名</code>，根据提示回车即可自动生成代码段</p>
<p><img data-src="https://s2.loli.net/2023/02/03/VMR4wpHSrA3W6xK.gif" alt="04-匿名内部类作为方法参数代码快速生成.gif"></p>
<h2 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h2><p>Lambda 表达式可以认为是对匿名内部类的优化，在了解这一块知识前，请先熟悉匿名内部类</p>
<h3 id="匿名内部类和-Lambda-表达式"><a href="#匿名内部类和-Lambda-表达式" class="headerlink" title="匿名内部类和 Lambda 表达式"></a>匿名内部类和 Lambda 表达式</h3><p>1、代码演示：匿名内部类和 Lambda 表达式的使用方式</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSwimming</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、使用匿名内部类的方式</span></span><br><span class="line">        goSwimming(<span class="keyword">new</span> Swimming() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>{</span><br><span class="line">                System.out.println(<span class="string">"铁汁, 我们去游泳吧"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、使用Lambda表达式，此处可以理解为是对匿名内部类的优化</span></span><br><span class="line">        goSwimming(() -&gt; System.out.println(<span class="string">"铁汁, 我们去游泳吧"</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用接口的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">goSwimming</span><span class="params">(Swimming swimming)</span> </span>{</span><br><span class="line">        swimming.swim();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Swimming</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>小结：Lambda 表达式可以使关注点更加明确，为什么这么说呢，请看一下分析：</p>
<p>1、对于匿名内部类的方式（面向对象思想，以什么形式去做）<br>1）方法要一个接口，我得给个接口的实现类对象<br>2）创建匿名内部类对象，重新方法<br>3）方法要干嘛呢，其实就是打印一句话</p>
<p>而其实，我们想要做的仅仅是打印一句话，也就是想要完成第 3 步，而第 1 步和第 2 步都是附加的操作，是 “不得不” 才这样写的</p>
<p>2、对于 Lambda 表达式（函数式编程思想，更多关注做什么）</p>
<h3 id="Lambda-表达式的标准格式"><a href="#Lambda-表达式的标准格式" class="headerlink" title="Lambda 表达式的标准格式"></a>Lambda 表达式的标准格式</h3><p><img data-src="https://s2.loli.net/2023/02/03/aiG5A3tcFsVOTwl.png" alt="05-匿名内部类与Lambda表达式.png"></p>
<p>组成 Lambda 表达式的三要素：形式参数、箭头、代码块</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">(形式参数) -&gt; {代码块}</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>形式参数：如果有多个参数，参数之间用逗号隔开；如果没有参数，留空即可</li>
<li> -&gt;：表示将小括号中的形式参数传到大括号的代码块中进行处理</li>
<li>代码块：是我们具体要做到事情，也就是方法体中的内容</li>
</ul>
<p>Lambda 表达式的使用前提：</p>
<ul>
<li>有一个接口（也就表明 Lambda 只能操作接口，不能操作类）</li>
<li>接口中有且仅有一个抽象方法</li>
</ul>
<h3 id="Lambda-带参数无返回值"><a href="#Lambda-带参数无返回值" class="headerlink" title="Lambda 带参数无返回值"></a>Lambda 带参数无返回值</h3><p>1、代码示例：</p>
<ul>
<li>接口中有且只有一个方法，方法有一个参数，无返回值</li>
<li>采用匿名内部类和 Lambda 表达式分别进行实现 </li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringHandlerDemo</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{  </span><br><span class="line">        <span class="comment">// 匿名内部类的实现方式  </span></span><br><span class="line">        useStringHandler(<span class="keyword">new</span> StringHandler() {  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(String msg)</span> </span>{  </span><br><span class="line">                System.out.println(<span class="string">"我是匿名内部类"</span> + msg);  </span><br><span class="line">            }  </span><br><span class="line">        });  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// Lambda实现方式  </span></span><br><span class="line">        useStringHandler((String msg)-&gt;{System.out.println(<span class="string">"我是Lambda表达式"</span> + msg);});  </span><br><span class="line">        useStringHandler( (msg) -&gt; System.out.println(<span class="string">"我是Lambda表达式"</span> + msg));  </span><br><span class="line">        useStringHandler( msg -&gt; System.out.println(<span class="string">"我是Lambda表达式"</span> + msg));  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useStringHandler</span><span class="params">(StringHandler stringHandler)</span></span>{  </span><br><span class="line">        stringHandler.printMessage(<span class="string">"coffeelize"</span>);  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">StringHandler</span> </span>{  </span><br><span class="line">    <span class="comment">//带参数无返回值  </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(String msg)</span></span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Lambda-无参数有返回值"><a href="#Lambda-无参数有返回值" class="headerlink" title="Lambda 无参数有返回值"></a>Lambda 无参数有返回值</h3><p>如果 Lambda 所操作的接口中的方法，有返回值，一定要通过 return 语句，否则会出现编译错误  </p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomNumHandlerDemo</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{  </span><br><span class="line">        <span class="comment">//匿名内部类实现方式  </span></span><br><span class="line">        useRandomNumHandler(<span class="keyword">new</span> RandomNumHandler() {  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>{  </span><br><span class="line">                Random r = <span class="keyword">new</span> Random();  </span><br><span class="line">                <span class="comment">//产生一个1-10的随机数  </span></span><br><span class="line">                <span class="keyword">int</span> num = r.nextInt(<span class="number">10</span>) + <span class="number">1</span>;  </span><br><span class="line">                <span class="keyword">return</span> num;  </span><br><span class="line">            }  </span><br><span class="line">        });  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//Lambda表达式实现方式  </span></span><br><span class="line">        useRandomNumHandler( () -&gt; {  </span><br><span class="line">                Random r = <span class="keyword">new</span> Random();  </span><br><span class="line">                <span class="keyword">int</span> num = r.nextInt(<span class="number">10</span>) + <span class="number">1</span>;  </span><br><span class="line">                <span class="comment">// 注意: 如果lambda所操作的接口中的方法, 有返回值, 一定要通过return语句，否则会出现编译错误  </span></span><br><span class="line">                <span class="keyword">return</span> num;  </span><br><span class="line">        } );  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useRandomNumHandler</span><span class="params">(RandomNumHandler randomNumHandler)</span></span>{  </span><br><span class="line">        <span class="keyword">int</span> result = randomNumHandler.getNumber();  </span><br><span class="line">        System.out.println(result);  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RandomNumHandler</span> </span>{  </span><br><span class="line">    <span class="comment">//无参数有返回值  </span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Lambda-带参数带返回值"><a href="#Lambda-带参数带返回值" class="headerlink" title="Lambda 带参数带返回值"></a>Lambda 带参数带返回值</h3><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorDemo</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{  </span><br><span class="line">        <span class="comment">//匿名内部类的实现方式  </span></span><br><span class="line">        useCalculator(<span class="keyword">new</span> Calculator() {  </span><br><span class="line">            <span class="meta">@Override</span>  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{  </span><br><span class="line">                <span class="keyword">return</span> a + b;  </span><br><span class="line">            }  </span><br><span class="line">        });  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//Lambda表达式实现方式  </span></span><br><span class="line">        useCalculator((<span class="keyword">int</span> a, <span class="keyword">int</span> b)-&gt;{  </span><br><span class="line">            <span class="keyword">return</span> a + b;  </span><br><span class="line">        });  </span><br><span class="line">  </span><br><span class="line">        useCalculator( (a,b) -&gt;  </span><br><span class="line">             a + b  </span><br><span class="line">        );  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useCalculator</span><span class="params">(Calculator calculator)</span></span>{  </span><br><span class="line">        <span class="keyword">int</span> result = calculator.calc(<span class="number">10</span>,<span class="number">20</span>);  </span><br><span class="line">        System.out.println(result);  </span><br><span class="line">    }  </span><br><span class="line">}  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>{  </span><br><span class="line">    <span class="comment">//带参数，带返回值  </span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>我们可以看到，以上代码中，第二种 Lambda 的书写更加简练，关于省略规则请往下看</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//Lambda表达式实现方式  </span></span><br><span class="line">useCalculator((<span class="keyword">int</span> a, <span class="keyword">int</span> b)-&gt;{  </span><br><span class="line"> <span class="keyword">return</span> a + b;  </span><br><span class="line">});  </span><br><span class="line"></span><br><span class="line">useCalculator( (a,b) -&gt;  </span><br><span class="line">  a + b  </span><br><span class="line">); </span><br></pre></td></tr></tbody></table></figure>

<h3 id="省略规则"><a href="#省略规则" class="headerlink" title="省略规则"></a>省略规则</h3><ul>
<li>参数类型可以省略，但是有多个参数的情况下，不能只省略一个<ul>
<li>为什么可以省略呢？因为在接口中的方法中已经定义了参数类型，可以推导出来参数类型，所以可以省略</li>
</ul>
</li>
<li>如果参数有且仅有一个，那么小括号可以省略</li>
<li>如果代码块的语句只有一条，可以省略大括号和分号，甚至是 return<ul>
<li> 若有返回参数，要省略，大括号、分号和 return 一起省略</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>删除 Mac 系统自带的 ABC 输入法</title>
    <url>/posts/Remove-ABC-Input-Method-that-comes-with-Mac-system.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>操作的具体细节请参考：<a href="https://ssnhd.com/2022/01/01/mac-inputdel/">Mac 删除原生 ABC 英文输入法</a>。需要补充的是：可以使用 PlistEdit 替代 Xcode 的功能，因为 Xcode 实在是太大了</p>
<p>从此远离切换窗口之后自动切换到系统 ABC 输入法的苦恼了</p>
<p><img data-src="https://s2.loli.net/2022/11/29/Mn2D3SqUBVmuEHb.png" alt="删除Mac系统自带的ABC输入法.png"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>个人博客：<a href="https://ssnhd.com/2022/01/01/mac-inputdel/">Mac 删除原生 ABC 英文输入法</a></li>
</ul>
]]></content>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>制作 Anki 插件简明笔记</title>
    <url>/posts/Short-Notes-on-Making-Anki-Plugins.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="插件想法"><a href="#插件想法" class="headerlink" title="插件想法"></a>插件想法</h3><p>想法来自于 Anki 插件：<a href="https://ankiweb.net/shared/info/1915225457">ankiweb.net/shared/info/1915225457</a>，没想到 Anki 程序内部还能内嵌浏览器，不可思议</p>
<p>换在从前，想想自己那么菜的技术也就过了，可是目前有了 GPT 的加持，事情就变得不可思议了。当然，想要开发一款体验性能都好的插件，一个可称之为 <code>项目</code> 的插件，GPT 目前还是不太行的，下面为使用 GPT 辅助开发的两个简单 Anki 插件</p>
<h3 id="插件目录"><a href="#插件目录" class="headerlink" title="插件目录"></a>插件目录</h3><p>打开 Anki，快捷键 <code>Ctrl+Shift+A</code> 可弹出插件管理器，点击 <code>查看文件</code> 可以跳转到 Anki 插件的安装目录</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240817153950.png" alt="image.png"></p>
<p>例如我的 Anki 插件文件路径为：<code>C:\Users\Administrator\AppData\Roaming\Anki2\addons21</code></p>
<h3 id="创建插件"><a href="#创建插件" class="headerlink" title="创建插件"></a>创建插件</h3><p>新建文件夹，例如 <code>BrowserPlugin</code>，在文件夹中新建 <code>__init__.py</code> 文件，之后在该 python 文件中编辑代码即可。</p>
<p>PS：每次修改代码之后，需重启 Anki 以重新加载插件，插件为自动加载方式</p>
<p>ANKI 插件的完整生成过程可参考与 GPT 的对话：<a href="https://chatgpt.com/share/57cfc0cc-8f0b-4774-8c69-f83dda3f1e14">ChatGPT - 开发 Anki 插件</a>. </p>
<p>我只负责引导和给出调试报错信息，代码全程由 GPT 负责生成，代码如下：</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240817161238.png" alt="image.png"></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> aqt <span class="keyword">import</span> mw</span><br><span class="line"><span class="keyword">from</span> aqt.qt <span class="keyword">import</span> QAction, QMenu</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onGoogleSearch</span>():</span></span><br><span class="line">    <span class="comment"># 获取当前选中的文本</span></span><br><span class="line">    selected_text = mw.web.selectedText()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> selected_text:</span><br><span class="line">        <span class="comment"># 使用浏览器打开Google搜索页面</span></span><br><span class="line">        webbrowser.<span class="built_in">open</span>(<span class="string">f"https://www.google.com/search?q=<span class="subst">{selected_text}</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showContextMenu</span>(<span class="params">point</span>):</span></span><br><span class="line">    menu = QMenu()</span><br><span class="line">    </span><br><span class="line">    selected_text = mw.web.selectedText()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> selected_text:</span><br><span class="line">        action = QAction(<span class="string">"Google搜索"</span>, mw)</span><br><span class="line">        action.triggered.connect(onGoogleSearch)</span><br><span class="line">        menu.addAction(action)</span><br><span class="line">    </span><br><span class="line">    menu.<span class="built_in">exec</span>(mw.web.mapToGlobal(point))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_menu</span>():</span></span><br><span class="line">    mw.web.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)</span><br><span class="line">    mw.web.customContextMenuRequested.connect(showContextMenu)</span><br><span class="line"></span><br><span class="line">setup_menu()</span><br></pre></td></tr></tbody></table></figure>

<p>重启 Anki 之后（插件会自动加载），选中文字右键，即可弹出 Google 搜索菜单项，点击即可使用外部浏览器对选中的文字进行搜索，效果如下：</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240817154714.png" alt="image.png"></p>
<h3 id="进一步完善插件"><a href="#进一步完善插件" class="headerlink" title="进一步完善插件"></a>进一步完善插件</h3><p>如上所述，搜索时使用外部浏览器进行搜索，能否在 Anki 程序中内嵌浏览器呢 —&gt; 接下来还是通过 GPT 的辅助，完成初步的想法，完整示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> aqt <span class="keyword">import</span> mw</span><br><span class="line"><span class="keyword">from</span> aqt.qt <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtWebEngineWidgets <span class="keyword">import</span> QWebEngineView</span><br><span class="line"><span class="keyword">from</span> PyQt6.QtCore <span class="keyword">import</span> QUrl, Qt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BrowserDockWidget</span>(<span class="params">QDockWidget</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(<span class="string">"内置浏览器"</span>, parent)</span><br><span class="line">        self.browser = QWebEngineView()</span><br><span class="line">        self.setWidget(self.browser)</span><br><span class="line">        self.setup_browser_settings()</span><br><span class="line">        self.browser.setUrl(QUrl(<span class="string">"https://www.google.com"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_browser_settings</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 确保启用 JavaScript 和其他必要的功能</span></span><br><span class="line">        settings = self.browser.settings()</span><br><span class="line">        settings.setAttribute(QWebEngineSettings.WebAttribute.JavascriptEnabled, <span class="literal">True</span>)</span><br><span class="line">        settings.setAttribute(QWebEngineSettings.WebAttribute.PluginsEnabled, <span class="literal">True</span>)</span><br><span class="line">        settings.setAttribute(QWebEngineSettings.WebAttribute.LocalStorageEnabled, <span class="literal">True</span>)</span><br><span class="line">        settings.setAttribute(QWebEngineSettings.WebAttribute.DnsPrefetchEnabled, <span class="literal">True</span>)</span><br><span class="line">        settings.setAttribute(QWebEngineSettings.WebAttribute.AutoLoadImages, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, query</span>):</span></span><br><span class="line">        self.browser.setUrl(QUrl(<span class="string">f"https://www.google.com/search?q=<span class="subst">{query}</span>"</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_browser_dock_widget</span>():</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(mw, <span class="string">'browser_dock'</span>):</span><br><span class="line">        mw.browser_dock = BrowserDockWidget(mw)</span><br><span class="line">        mw.addDockWidget(Qt.DockWidgetArea.RightDockWidgetArea, mw.browser_dock)</span><br><span class="line">    mw.browser_dock.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_search_google</span>():</span></span><br><span class="line">    selected_text = mw.web.selectedText()</span><br><span class="line">    <span class="keyword">if</span> selected_text:</span><br><span class="line">        show_browser_dock_widget()</span><br><span class="line">        mw.browser_dock.search(selected_text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">context_menu_event</span>(<span class="params">point</span>):</span></span><br><span class="line">    menu = QMenu(mw)</span><br><span class="line">    menu.addAction(<span class="string">"Google搜索"</span>, on_search_google)</span><br><span class="line">    menu.<span class="built_in">exec</span>(mw.web.mapToGlobal(point))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_search_context_menu</span>():</span></span><br><span class="line">    mw.web.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)</span><br><span class="line">    mw.web.customContextMenuRequested.connect(context_menu_event)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加右键菜单项</span></span><br><span class="line">add_search_context_menu()</span><br></pre></td></tr></tbody></table></figure>

<p>浏览器右上角的几个按钮可以对内置浏览器进行关闭，拖动还可以自定义浏览器在 Anki 程序中的位置，展示效果如下：</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240817155910.png" alt="image.png"></p>
<p><img data-src="https://s2.loli.net/2024/08/17/Qg1zZeX9WCsP5kf.gif" alt="Anki.gif"></p>
]]></content>
      <tags>
        <tag>Anki</tag>
      </tags>
  </entry>
  <entry>
    <title>单元测试 &amp; 日志简明笔记</title>
    <url>/posts/Concise-Notes-on-Unit-Testing.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>JUnit 是一个 Java 编程语言的单元测试工具。JUnit 是一个非常重要的测试工具</p>
<p>JUnit 在一个条中显示进度。如果运行良好则是绿色；如果运行失败，则变成红色</p>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol>
<li>将 junit 的 jar 包导入到工程中 junit-4.9.jar</li>
<li> 编写测试方法该测试方法必须是公共的无参数无返回值的非静态方法</li>
<li>在测试方法上使用 @Test 注解标注该方法是一个测试方法</li>
<li>选中测试方法右键通过 junit 运行该方法</li>
</ol>
<p>代码示例</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JunitDemo1</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="number">2</span> / <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = a + b;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="相关注解"><a href="#相关注解" class="headerlink" title="相关注解"></a>相关注解</h3><ul>
<li>@Test：表示测试该方法</li>
<li> @Before：在测试的方法前运行</li>
<li> @After：在测试的方法后运行</li>
</ul>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>程序中的日志可以用来记录程序在运行的时候点点滴滴，并可以进行永久存储</p>
<p>日志与输出语句的区别</p>
<table>
<thead>
<tr>
<th></th>
<th>输出语句</th>
<th>日志技术</th>
</tr>
</thead>
<tbody><tr>
<td>取消日志</td>
<td>需要修改代码，灵活性比较差</td>
<td>不需要修改代码，灵活性比较好</td>
</tr>
<tr>
<td>输出位置</td>
<td>只能是控制台</td>
<td>可以将日志信息写入到文件或者数据库中</td>
</tr>
<tr>
<td>多线程</td>
<td>和业务代码处于一个线程中</td>
<td>多线程方式记录日志，不影响业务代码的性能</td>
</tr>
</tbody></table>
<h3 id="日志体系结构"><a href="#日志体系结构" class="headerlink" title="日志体系结构"></a>日志体系结构</h3><p><img data-src="https://s2.loli.net/2022/12/21/AHZCuKrhD3FgW87.png" alt="01-日志的体系结构.png"></p>
<h3 id="Log4J"><a href="#Log4J" class="headerlink" title="Log4J"></a>Log4J</h3><p>Log4j 是 Apache 的一个开源项目；通过使用 Log4j，我们可以控制日志信息输送的目的地是控制台、文件等位置，我们也可以控制每一条日志的输出格式，通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程</p>
<p>最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码</p>
<h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><ol>
<li>导入 log4j 的相关 jar 包</li>
<li>编写 log4j 配置文件</li>
<li>在代码中获取日志的对象</li>
<li>按照级别设置记录日志信息</li>
</ol>
<h4 id="1、properties-文件"><a href="#1、properties-文件" class="headerlink" title="1、properties 文件"></a>1、properties 文件</h4><p>注意：配置文件的文件名必须是 <code>log4j.properties</code>，放在 src 目录下</p>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">//</span> <span class="string">log4j的配置文件,名字为log4j.properties, 放在src根目录下</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">debug,my,fileAppender</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### direct log messages to my ###</span></span><br><span class="line"><span class="meta">log4j.appender.my</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.my.ImmediateFlush</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.my.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.my.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.my.layout.ConversionPattern</span>=<span class="string">%d %t %5p %c{1}:%L - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># fileAppender演示</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.ImmediateFlush</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.File</span>=<span class="string">D:/log4j-log.log</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.layout.ConversionPattern</span>=<span class="string">%d %5p %c{1}:%L - %m%n</span></span><br></pre></td></tr></tbody></table></figure>

<h4 id="2、测试类"><a href="#2、测试类" class="headerlink" title="2、测试类"></a>2、测试类</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4JTest01</span> </span>{</span><br><span class="line">    <span class="comment">//方式1：使用log4j的api来获取日志的对象</span></span><br><span class="line">    <span class="comment">//弊端：如果以后我们更换日志的实现类，那么下面的代码就需要跟着改</span></span><br><span class="line">    <span class="comment">//不推荐使用</span></span><br><span class="line">    <span class="comment">//private static final Logger LOGGER = Logger.getLogger(Log4JTest01.class);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式2：使用slf4j里面的api来获取日志的对象</span></span><br><span class="line">    <span class="comment">//好处：如果以后我们更换日志的实现类，那么下面的代码不需要跟着修改</span></span><br><span class="line">    <span class="comment">//推荐使用（在代码中获取日志的对象）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Log4JTest01.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//1.导入jar包</span></span><br><span class="line">        <span class="comment">//2.编写配置文件</span></span><br><span class="line">        <span class="comment">//3.在代码中获取日志的对象</span></span><br><span class="line">        <span class="comment">//4.按照日志级别设置日志信息</span></span><br><span class="line">        LOGGER.debug(<span class="string">"debug级别的日志"</span>);</span><br><span class="line">        LOGGER.info(<span class="string">"info级别的日志"</span>);</span><br><span class="line">        LOGGER.warn(<span class="string">"warn级别的日志"</span>);</span><br><span class="line">        LOGGER.error(<span class="string">"error级别的日志"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h4><p>三个核心</p>
<ul>
<li>Loggers (记录器) ：日志的级别<ul>
<li> Loggers 组件在此系统中常见的五个级别：DEBUG、INFO、WARN、ERROR 和 FATAL</li>
<li>DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</li>
<li>Log4j 有一个规则：只输出级别不低于设定级别的日志信息</li>
</ul>
</li>
<li> Appenders (输出源)：日志要输出的地方<ul>
<li>把日志输出到不同的地方，如控制台（Console）、文件（Files）等</li>
<li> org.apache.log4j.ConsoleAppender（控制台）</li>
<li>org.apache.log4j.FileAppender（文件）</li>
</ul>
</li>
<li>Layouts (布局)：日志输出的格式<ul>
<li> org.apache.log4j.PatternLayout（可以灵活地指定布局模式，这个比较常用）</li>
<li>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</li>
<li>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等信息）</li>
</ul>
</li>
</ul>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">//</span> <span class="string">log4j的配置文件,名字为log4j.properties, 放在src根目录下</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">debug,my,fileAppender</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### direct log messages to my ###</span></span><br><span class="line"><span class="meta">log4j.appender.my</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.my.ImmediateFlush</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.my.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.my.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.my.layout.ConversionPattern</span>=<span class="string">%d %t %5p %c{1}:%L - %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># fileAppender演示</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.ImmediateFlush</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.File</span>=<span class="string">D:/log4j-log.log</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.layout.ConversionPattern</span>=<span class="string">%d %5p %c{1}:%L - %m%n</span></span><br></pre></td></tr></tbody></table></figure>

<p>1、配置根 Logger</p>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">日志级别，appenderName1，appenderName2，…</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 日志级别：OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别</span></span><br><span class="line"><span class="comment"># appenderName1：就是指定日志信息要输出到哪里。可以同时指定多个输出目的地，用逗号隔开</span></span><br></pre></td></tr></tbody></table></figure>

<p>2、ConsoleAppender 常用的选项</p>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">log4j.appender.my</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.my.ImmediateFlush</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.my.Target</span>=<span class="string">System.out</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>第一句表示往控制台输出</li>
<li>第二句表示所有消息都会被立即输出，设为 false 则不输出，默认值是 true</li>
<li> 第三句默认值是 <code>System.out</code><ul>
<li>比如 <code>System.err</code> 打印出来是红色的</li>
</ul>
</li>
</ul>
<p>3、FileAppender 常用的选项</p>
<figure class="highlight properties"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">log4j.appender.fileAppender</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.ImmediateFlush</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.Append</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.fileAppender.File</span>=<span class="string">D:/log4j-log.log</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>第一句：往文件中输出</li>
<li>第二句：表示所有消息都会被立即输出。设为 false 则不输出，默认值是 true</li>
<li> 第三句：true 表示将消息添加到指定文件中，原来的消息不覆盖，默认值是 true</li>
<li> 第四句：指定消息输出到某个文件中</li>
</ul>
<p>4、PatternLayout 常用的选项</p>
<ul>
<li>org.apache.log4j.PatternLayout（可以灵活地指定布局模式，最常用）</li>
<li>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</li>
<li>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等信息）</li>
</ul>
<p>这里我们只讲第一种：PatternLayout 的常用选项</p>
<p><img data-src="https://s2.loli.net/2022/12/21/c8e5sgo1wVO6LWk.png" alt="02-日志中PatternLayout的常用选项.png"></p>
<h3 id="在项目中的应用"><a href="#在项目中的应用" class="headerlink" title="在项目中的应用"></a>在项目中的应用</h3><ol>
<li>导入相关的依赖</li>
<li>将资料中的 properties 配置文件复制到 src 目录下</li>
<li>在代码中获取日志的对象</li>
<li>按照级别设置记录日志信息</li>
</ol>
<p>代码实现</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = "/servlet/loginservlet")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">implements</span> <span class="title">HttpServlet</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取日志的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(LoginServlet.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpRequest httpRequest, HttpResponse httpResponse)</span> </span>{</span><br><span class="line">       <span class="comment">//处理</span></span><br><span class="line">        System.out.println(<span class="string">"LoginServlet处理了登录请求"</span>);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">"现在已经处理了登录请求，准备给浏览器响应"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//响应</span></span><br><span class="line">        httpResponse.setContentTpye(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        httpResponse.write(<span class="string">"登录成功"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>注意：Logger 对象是 slf4j (org.slf4jh) 中的，不要导错包了</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>反射简明笔记</title>
    <url>/posts/Reflections-Concise-Notes.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="反射的概述"><a href="#反射的概述" class="headerlink" title="反射的概述"></a>反射的概述</h3><p>反射机制</p>
<ul>
<li>是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；</li>
<li>对于任意一个对象，都能够调用它的任意属性和方法；</li>
<li>这种动态获取信息以及动态调用对象方法的功能称为 Java 语言的反射机制。</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/12/21/qgzEGN9v8lxnTfB.png" alt="01-用子类创建对象与常规创建对象的比较.png"></p>
<p>总结下来</p>
<ul>
<li>利用反射可以无视修饰符获取类里面所有的属性和方法</li>
<li>先获取配置文件中的信息，动态获取（如从配置文件中的读取）信息并创建对象和调用方法</li>
</ul>
<h3 id="获取-Class-对象"><a href="#获取-Class-对象" class="headerlink" title="获取 Class 对象"></a>获取 Class 对象</h3><p>调用一个类中的方法（如上图所示）</p>
<ol>
<li>创建这个类的对象</li>
<li>用对象调用方法</li>
</ol>
<p>反射去调用一个类中的方法（如上图所示）</p>
<ol>
<li>反射方式：创建对象</li>
<li>反射方式：调用方法<br><img data-src="https://s2.loli.net/2022/12/21/jBebitcPmFdsE1z.png" alt="02-利用反射调用类中的方法.png"></li>
</ol>
<p>那么现在的问题就是如何获取这个 Class 对象<br><img data-src="https://s2.loli.net/2022/12/21/kfwiNhrTy3elumV.png" alt="03-获取Class对象的三种方式.png"></p>
<h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"学生在学习"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student{"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'}'</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="三种获取-Class-对象方式"><a href="#三种获取-Class-对象方式" class="headerlink" title="三种获取 Class 对象方式"></a>三种获取 Class 对象方式</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">//1.Class类中的静态方法forName("全类名")</span></span><br><span class="line">        <span class="comment">//全类名:包名 + 类名</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect2.Student"</span>);</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过class属性来获取</span></span><br><span class="line">        Class clazz2 = Student.class;</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用对象的getClass方法来获取class对象</span></span><br><span class="line">        <span class="comment">//getClass方法是定义在Object类中.</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        Class clazz3 = s.getClass();</span><br><span class="line">        System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//class对象是唯一的</span></span><br><span class="line">        System.out.println(clazz == clazz2);</span><br><span class="line">        System.out.println(clazz2 == clazz3);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="反射获取-Class-类的对象"><a href="#反射获取-Class-类的对象" class="headerlink" title="反射获取 Class 类的对象"></a>反射获取 Class 类的对象</h3><p>Class 类的对象包括：成员变量对象、构造器对象及成员方法对象</p>
<p><img data-src="https://s2.loli.net/2022/12/21/ychfZ7kBYgdG9wb.png" alt="04-Class对象中的3类对象.png"></p>
<h4 id="数据准备-1"><a href="#数据准备-1" class="headerlink" title="数据准备"></a>数据准备</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的有参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Student</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"name的值为:"</span> + name);</span><br><span class="line">        System.out.println(<span class="string">"private...Student...有参构造方法"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的无参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"public...Student...无参构造方法"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的有参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"name的值为:"</span> + name + <span class="string">"age的值为:"</span> + age);</span><br><span class="line">        System.out.println(<span class="string">"public...Student...有参构造方法"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="获取-Constructor-对象"><a href="#获取-Constructor-对象" class="headerlink" title="获取 Constructor 对象"></a>获取 Constructor 对象</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>{</span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>{</span><br><span class="line">        <span class="comment">//返回单个构造方法对象</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line">        <span class="comment">//获取单个构造方法对象</span></span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor(String.class);</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>{</span><br><span class="line">        <span class="comment">//返回单个公共构造方法对象</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line">        <span class="comment">//小括号中,一定要跟构造方法的形参保持一致</span></span><br><span class="line">        <span class="comment">//获取单个公共构造方法对象</span></span><br><span class="line">        Constructor constructor1 = clazz.getConstructor();</span><br><span class="line">        System.out.println(constructor1);</span><br><span class="line">        <span class="comment">//这里获取有参构造方法</span></span><br><span class="line">        Constructor constructor2 = clazz.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(constructor2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为Student类中,没有只有一个int的构造,所以这里会报错.</span></span><br><span class="line">        Constructor constructor3 = clazz.getConstructor(<span class="keyword">int</span>.class);</span><br><span class="line">        System.out.println(constructor3);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">//返回所有构造方法对象的数组</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line">  <span class="comment">//2.获取所有构造方法对象的数组</span></span><br><span class="line">        Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) {</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">//返回所有公共构造方法对象的数组</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line">        <span class="comment">//2.获取所有公共构造方法对象的数组</span></span><br><span class="line">        Constructor[] constructors = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) {</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Constructor-创建对象"><a href="#Constructor-创建对象" class="headerlink" title="Constructor 创建对象"></a>Constructor 创建对象</h4><p>那么我们获取到的 Class 对象中的构造方法，不就是为了使用它来创建对象嘛，方法如下：</p>
<ul>
<li><code>T newInstance(Object…initargs)</code>：根据指定的构造方法创建对象（T 表示返回值类型，此处为创建对来的对象）</li>
<li><code>setAccessible(boolean flag)</code>：设置为 true，表示取消访问检查（通过获取私有的构造方法来创建对象，如果用反射强行获取并使用，需要临时取消访问检查）</li>
</ul>
<p>也就是说，如果构造方法是 public 的，直接使用 newInstance 即可创建对象；如果构造方法是 private 的，那么需要在创建对象之前临时取消访问检查，也就是 <strong>暴力反射</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// Student类同上一个示例,这里就不在重复提供了</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>{</span><br><span class="line">        <span class="comment">//T newInstance(Object... initargs)：根据指定的构造方法创建对象</span></span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>{</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取构造方法对象</span></span><br><span class="line">        Constructor constructor = clazz.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用newInstance创建Student的对象</span></span><br><span class="line">        Student student = (Student) constructor.newInstance(<span class="string">"zhangsan"</span>, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>{</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取构造方法对象</span></span><br><span class="line">        Constructor constructor = clazz.getConstructor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用空参来创建Student的对象</span></span><br><span class="line">        Student student = (Student) constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException </span>{</span><br><span class="line">        <span class="comment">//method2的简写格式</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.在Class类中,有一个newInstance方法,可以利用空参直接创建一个对象</span></span><br><span class="line">        Student student = (Student) clazz.newInstance();<span class="comment">//这个方法现在已经过时了,了解一下</span></span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException </span>{</span><br><span class="line">        <span class="comment">//获取一个私有的构造方法并创建对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect3.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取一个私有化的构造方法.</span></span><br><span class="line">        Constructor constructor = clazz.getDeclaredConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被private修饰的成员,不能直接使用的</span></span><br><span class="line">        <span class="comment">//如果用反射强行获取并使用,需要临时取消访问检查</span></span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.直接创建对象</span></span><br><span class="line">        Student student = (Student) constructor.newInstance(<span class="string">"zhangsan"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="反射获取成员变量"><a href="#反射获取成员变量" class="headerlink" title="反射获取成员变量"></a>反射获取成员变量</h3><ol>
<li>获取 Class 对象</li>
<li>获取 Field 对象</li>
<li>赋值或者取值</li>
</ol>
<h4 id="数据准备-2"><a href="#数据准备-2" class="headerlink" title="数据准备"></a>数据准备</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String name;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;  </span><br><span class="line">    <span class="keyword">public</span> String gender;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money = <span class="number">300</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student{"</span> +  </span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +  </span><br><span class="line">                <span class="string">", age="</span> + age +  </span><br><span class="line">                <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> +  </span><br><span class="line">                <span class="string">", money="</span> + money +  </span><br><span class="line">                <span class="string">'}'</span>;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>{</span><br><span class="line">       <span class="comment">// method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">//返回所有公共成员变量对象的数组</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect4.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Field对象.</span></span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) {</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">//返回所有成员变量对象的数组</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect4.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取所有的Field对象</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) {</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>{</span><br><span class="line">        <span class="comment">//返回单个公共成员变量对象</span></span><br><span class="line">        <span class="comment">//想要获取的成员变量必须是真实存在的</span></span><br><span class="line">        <span class="comment">//且必须是public修饰的.</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect4.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取name这个成员变量</span></span><br><span class="line">        <span class="comment">//Field field = clazz.getField("name");</span></span><br><span class="line">        <span class="comment">//Field field = clazz.getField("name1");</span></span><br><span class="line">        Field field = clazz.getField(<span class="string">"money"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(field);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>{</span><br><span class="line">        <span class="comment">//返回单个成员变量对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect4.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取money成员变量</span></span><br><span class="line">        Field field = clazz.getDeclaredField(<span class="string">"money"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(field);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="Field-对象取值或赋值"><a href="#Field-对象取值或赋值" class="headerlink" title="Field 对象取值或赋值"></a>Field 对象取值或赋值</h4><p>既然获取到 Field 对象了，那么就赋值或取值吧</p>
<p>赋值：<code>void set(Object obj, Object value)</code>，给指定对象的成员变量赋值<br>取值：<code>Object get(Object obj)</code>，返回指定对象的 Field 值</p>
<p>为什么中间需要有一个 Object 类呢？比如遇到如下情形，set 方法怎么知道需要将值赋给谁呢？<br><img data-src="https://s2.loli.net/2022/12/21/M3VYLkhu1PITO5j.png" alt="05-为成员变量赋值.png"></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo2</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException </span>{  </span><br><span class="line">        <span class="comment">//返回由该 Field表示的字段在指定对象上的值。  </span></span><br><span class="line">        <span class="comment">//method1();  </span></span><br><span class="line">        <span class="comment">//method2();    }  </span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, InstantiationException, IllegalAccessException </span>{  </span><br><span class="line">        <span class="comment">//给obj对象的成员变量赋值为value  </span></span><br><span class="line">        <span class="comment">//1.获取class对象  </span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect4.Student"</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取name这个Field对象  </span></span><br><span class="line">        Field field = clazz.getField(<span class="string">"name"</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.利用set方法进行赋值.  </span></span><br><span class="line">        <span class="comment">//3.1先创建一个Student对象  </span></span><br><span class="line">        Student student = (Student) clazz.newInstance();  </span><br><span class="line">        <span class="comment">//3.2有了对象才可以给指定对象进行赋值  </span></span><br><span class="line">        field.set(student,<span class="string">"zhangsan"</span>);  </span><br><span class="line">  </span><br><span class="line">        System.out.println(student);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, InstantiationException, IllegalAccessException </span>{  </span><br><span class="line">        <span class="comment">//1.获取class对象  </span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect4.Student"</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取成员变量Field的对象  </span></span><br><span class="line">        Field field = clazz.getDeclaredField(<span class="string">"money"</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.取消一下访问检查  </span></span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//4.调用get方法来获取值  </span></span><br><span class="line">        <span class="comment">//4.1创建一个对象  </span></span><br><span class="line">        Student student = (Student) clazz.newInstance();  </span><br><span class="line">        <span class="comment">//4.2获取指定对象的money的值  </span></span><br><span class="line">        Object o = field.get(student);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//5.打印一下  </span></span><br><span class="line">        System.out.println(o);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="反射获取成员方法"><a href="#反射获取成员方法" class="headerlink" title="反射获取成员方法"></a>反射获取成员方法</h3><ol>
<li>获取 Class 对象</li>
<li>获取 Method 对象</li>
<li>运行方法</li>
</ol>
<ul>
<li><code>Method[] getMethods()</code>：返回所有公共成员方法对象的数组，包括继承的</li>
<li><code>Method[] getDeclaredMethods()</code>：返回所有成员方法对象的数组，不包括继承的</li>
<li>返回单个公共成员方法对象</li>
<li>返回单个成员方法对象</li>
</ul>
<h4 id="数据准备-3"><a href="#数据准备-3" class="headerlink" title="数据准备"></a>数据准备</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//私有的，无参无返回值  </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"私有的show方法，无参无返回值"</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//公共的，无参无返回值  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"function1方法，无参无返回值"</span>);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//公共的，有参无返回值  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function2</span><span class="params">(String name)</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"function2方法，有参无返回值,参数为"</span> + name);  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//公共的，无参有返回值  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">function3</span><span class="params">()</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"function3方法，无参有返回值"</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"aaa"</span>;  </span><br><span class="line">    }  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//公共的，有参有返回值  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">function4</span><span class="params">(String name)</span> </span>{  </span><br><span class="line">        System.out.println(<span class="string">"function4方法，有参有返回值,参数为"</span> + name);  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"aaa"</span>;  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="获取成员方法"><a href="#获取成员方法" class="headerlink" title="获取成员方法"></a>获取成员方法</h4><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>{</span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line">        <span class="comment">//method5();</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line">        <span class="comment">//返回所有公共成员方法对象的数组，包括继承的</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect5.Student"</span>);</span><br><span class="line">        <span class="comment">//2.获取成员方法对象</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) {</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回所有成员方法对象的数组，不包括继承的</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect5.Student"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Method对象</span></span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="comment">//3.遍历一下数组</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) {</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>{</span><br><span class="line">        <span class="comment">//返回单个公共成员方法对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect5.Student"</span>);</span><br><span class="line">        <span class="comment">//2.获取成员方法function1</span></span><br><span class="line">        Method method1 = clazz.getMethod(<span class="string">"function1"</span>);</span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(method1);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>{</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect5.Student"</span>);</span><br><span class="line">        <span class="comment">//2.获取一个有形参的方法function2</span></span><br><span class="line">        Method method = clazz.getMethod(<span class="string">"function2"</span>, String.class);</span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(method);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>{</span><br><span class="line">        <span class="comment">//返回单个成员方法对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect5.Student"</span>);</span><br><span class="line">        <span class="comment">//2.获取一个成员方法show</span></span><br><span class="line">        Method method = clazz.getDeclaredMethod(<span class="string">"show"</span>);</span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(method);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="运行成员方法"><a href="#运行成员方法" class="headerlink" title="运行成员方法"></a>运行成员方法</h4><ul>
<li><code>Object invoke(Object obj, Object… args)</code>：运行方法<ul>
<li>参数 1：用 obj 对象调用该方法</li>
<li>参数 2：调用方法的传递的参数（如果没有就不写）</li>
<li>返回值：方法的返回值（如果没有就不写）</li>
</ul>
</li>
</ul>
<p>比如说，我们现在想通过反射来获取 Class 中的 function4 方法，并运行它</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>{</span><br><span class="line">    <span class="comment">//Object invoke(Object obj, Object... args)：运行方法</span></span><br><span class="line">    <span class="comment">//参数一：用obj对象调用该方法</span></span><br><span class="line">    <span class="comment">//参数二：调用方法的传递的参数（如果没有就不写）</span></span><br><span class="line">    <span class="comment">//返回值：方法的返回值（如果没有就不写）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"com.itheima.myreflect5.Student"</span>);</span><br><span class="line">        <span class="comment">//2.获取里面的Method对象  function4</span></span><br><span class="line">        Method method = clazz.getMethod(<span class="string">"function4"</span>, String.class);</span><br><span class="line">        <span class="comment">//3.运行function4方法就可以了</span></span><br><span class="line">        <span class="comment">//3.1创建一个Student对象,当做方法的调用者</span></span><br><span class="line">        Student student = (Student) clazz.newInstance();</span><br><span class="line">        <span class="comment">//3.2运行方法</span></span><br><span class="line">        Object result = method.invoke(student, <span class="string">"zhangsan"</span>);</span><br><span class="line">        <span class="comment">//4.打印一下返回值</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Latex 图片并排及子图标题设置</title>
    <url>/posts/Image-Side-by-Side-and-Sub-image-Title-Setting.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Latex-图片并排及子图标题设置"><a href="#Latex-图片并排及子图标题设置" class="headerlink" title="Latex 图片并排及子图标题设置"></a>Latex 图片并排及子图标题设置</h2><p>以下案例中可能使用到的宏包</p>
<ul>
<li>需要图片：graphics</li>
<li> 需要子图表：subfigure</li>
<li> 需要给每个图片定义小标题：subcaption</li>
<li> 修改图片的标题样式：caption</li>
<li> 案例中使用到的图片： <a href="https://sm.ms/image/W9pfLrXMi6uCFtT">下载地址</a></li>
</ul>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br><span class="line"><span class="keyword">\usepackage</span>{subfigure}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">    <span class="keyword">\begin</span>{figure} </span><br><span class="line">        <span class="keyword">\centering</span> </span><br><span class="line">        <span class="keyword">\subfigure</span>[Small Box with a Long Caption]{ </span><br><span class="line">            <span class="keyword">\label</span>{fig:subfig:a} <span class="comment">%% 为第一张图片添加标签</span></span><br><span class="line">            <span class="keyword">\includegraphics</span>[width=1.0in]{figs/cat2}} </span><br><span class="line">        <span class="keyword">\hspace</span>{1in} </span><br><span class="line">        <span class="keyword">\subfigure</span>[Big Box]{ </span><br><span class="line">            <span class="keyword">\label</span>{fig:subfig:b} <span class="comment">%% 为第二张图片添加标签</span></span><br><span class="line">            <span class="keyword">\includegraphics</span>[width=1.5in]{figs/cat2}} </span><br><span class="line">        <span class="keyword">\caption</span>{Two Subfigures} </span><br><span class="line">        <span class="keyword">\label</span>{fig:subfig} <span class="comment">%% 为整个大图添加标签</span></span><br><span class="line">    <span class="keyword">\end</span>{figure}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/01/JZDjiIUWz3pTGQy.png" alt="01-不使用minipage并排插图.png"></p>
<p>像其它的并列图形一样，子图也可以在小页环境中使用。而且在一些情况下， 这样做还能更方便的得到理想的图形间距。例如：</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br><span class="line"><span class="keyword">\usepackage</span>{subfigure}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">    <span class="keyword">\begin</span>{figure} </span><br><span class="line">        <span class="keyword">\subfigure</span>[Small Box with a Long Caption]{ </span><br><span class="line">            <span class="keyword">\label</span>{fig:mini:subfig:a} <span class="comment">%% 为第一张图片添加标签</span></span><br><span class="line">            <span class="keyword">\begin</span>{minipage}[b]{0.5<span class="keyword">\textwidth</span>} </span><br><span class="line">                <span class="keyword">\centering</span> </span><br><span class="line">                <span class="keyword">\includegraphics</span>[width=1in]{figs/cat2} </span><br><span class="line">        <span class="keyword">\end</span>{minipage}}<span class="comment">% </span></span><br><span class="line">        <span class="keyword">\subfigure</span>[Big Box]{ </span><br><span class="line">            <span class="keyword">\label</span>{fig:mini:subfig:b} <span class="comment">%% 为第二张图片添加标签</span></span><br><span class="line">            <span class="keyword">\begin</span>{minipage}[b]{0.5<span class="keyword">\textwidth</span>} </span><br><span class="line">                <span class="keyword">\centering</span> </span><br><span class="line">                <span class="keyword">\includegraphics</span>[width=1.5in]{figs/cat2} </span><br><span class="line">        <span class="keyword">\end</span>{minipage}} </span><br><span class="line">        <span class="keyword">\caption</span>{Minipages Inside Subfigures} </span><br><span class="line">        <span class="keyword">\label</span>{fig:mini:subfig} <span class="comment">%% 为整个大图添加标签</span></span><br><span class="line">    <span class="keyword">\end</span>{figure}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/01/qRz1kKudlye69YO.png" alt="02-使用minipage并排插图.png"></p>
<p>比较可发现<br>使用 minipage 环境：子标题的长度可以长于图片的长度</p>
<p><img data-src="https://s2.loli.net/2022/06/01/9o5PjNn7IeFCRBi.png" alt="03-minipage with non-minipage.png"></p>
<h3 id="需求-2：那么如何引用大图当中的子图呢"><a href="#需求-2：那么如何引用大图当中的子图呢" class="headerlink" title="需求 2：那么如何引用大图当中的子图呢"></a>需求 2：那么如何引用大图当中的子图呢</h3><p>这就发挥到 label 的作用了，label 标签相当于给子图片打上了一个标记，在引用的地方通过 ref 引用标签名即可</p>
<p>在图片环境的代码后面添加如下文字</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%...</span></span><br><span class="line"><span class="keyword">\end</span>{figure}</span><br><span class="line"><span class="comment">%...</span></span><br><span class="line"></span><br><span class="line">这里有一段文字需要引用图1中子图b。<span class="keyword">\ref</span>{fig:mini:subfig:b} is a big cat!</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/01/qPUCz3rnFODdaMp.png" alt="04-交叉引用子图.png"></p>
<h3 id="需求-3：修改标签分隔符"><a href="#需求-3：修改标签分隔符" class="headerlink" title="需求 3：修改标签分隔符"></a>需求 3：修改标签分隔符</h3><p>包含子图的大图标题，图编号与图表题文字之间的分隔符为冒号，如何设置为英文句点，参考 caption 宏包使用文档（但是目前该文档似乎还没有中文翻译）</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>{caption}</span><br><span class="line">使用如下captionsetup命令需要使用到caption宏包</span><br><span class="line"><span class="keyword">\captionsetup</span>[figure]{labelformat=simple, labelsep=period}<span class="comment">% 参数见以下分析</span></span><br></pre></td></tr></tbody></table></figure>

<p>如何查看宏包的帮助文档</p>
<ol>
<li>按住 shift，鼠标右键</li>
<li>使用 Powershell 打开</li>
<li> texdoc 宏包名（比如 <code>texdoc tabular</code>）</li>
</ol>
<p><img data-src="https://s2.loli.net/2022/06/01/vsQkJwraMo1V2Hf.gif" alt="07-（Latex）查看宏包帮助文档.gif"></p>
<p>标签格式设置</p>
<table>
<thead>
<tr>
<th align="center">格式</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"> default</td>
<td align="center"> 同 simple</td>
</tr>
<tr>
<td align="center">empty</td>
<td align="center"> 空格式，去除标签编号部分</td>
</tr>
<tr>
<td align="center"> simple</td>
<td align="center"> 简单数字格式</td>
</tr>
<tr>
<td align="center"> brace</td>
<td align="center"> 数字右括号格式</td>
</tr>
<tr>
<td align="center"> parens</td>
<td align="center"> 带括号数字格式</td>
</tr>
</tbody></table>
<p>标签分隔符</p>
<table>
<thead>
<tr>
<th align="center">格式</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"> default</td>
<td align="center"> 同 colon</td>
</tr>
<tr>
<td align="center">none</td>
<td align="center"> 无间隔</td>
</tr>
<tr>
<td align="center"> colon</td>
<td align="center"> 英文分号</td>
</tr>
<tr>
<td align="center"> period</td>
<td align="center"> 英文句点</td>
</tr>
<tr>
<td align="center"> space</td>
<td align="center"> 空格</td>
</tr>
<tr>
<td align="center"> quad</td>
<td align="center"> 一个 em 的间隔</td>
</tr>
<tr>
<td align="center"> newline</td>
<td align="center"> 标题另起一行</td>
</tr>
<tr>
<td align="center"> endash</td>
<td align="center"> 英文 dash 连接符</td>
</tr>
</tbody></table>
<p>同理，对于子图当中标签分隔符的设置，只要将中括号中的 figure 改为 subfigure 即可</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\captionsetup</span>[subfigure]{...}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="需求-4：如何修改交叉引用的图例"><a href="#需求-4：如何修改交叉引用的图例" class="headerlink" title="需求 4：如何修改交叉引用的图例"></a>需求 4：如何修改交叉引用的图例</h3><p>比如上图中，引用图 1 的子图 b，但是如何让 <code>1(b)</code> 显示为 <code>图 1(b)</code> 呢<br>搜了一圈，似乎只能通过文字打上去 (lll￢ω￢)</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%...</span></span><br><span class="line"><span class="keyword">\end</span>{figure}</span><br><span class="line"><span class="comment">%...</span></span><br><span class="line"></span><br><span class="line">这里有一段文字需要引用图1中子图b。图<span class="keyword">\ref</span>{fig:mini:subfig:b} is a big cat!</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/01/9KyJXnBD7PshS1u.png" alt="05-交叉引用图片格式.png"></p>
<h3 id="需求-5：多个子图，但是共享一个大标题，无需为子图添加标题"><a href="#需求-5：多个子图，但是共享一个大标题，无需为子图添加标题" class="headerlink" title="需求 5：多个子图，但是共享一个大标题，无需为子图添加标题"></a>需求 5：多个子图，但是共享一个大标题，无需为子图添加标题</h3><p>实际上就是在 figure 环境当中插入多张图片，但是只添加一个 caption</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{graphicx}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">    <span class="keyword">\begin</span>{figure} </span><br><span class="line">        <span class="keyword">\centering</span></span><br><span class="line">        <span class="keyword">\includegraphics</span>[width=90pt]{figs/cat2} <span class="keyword">\qquad</span></span><br><span class="line">        <span class="keyword">\includegraphics</span>[width=90pt]{figs/cat2} </span><br><span class="line">        <span class="keyword">\caption</span>{There are two figure share one caption}</span><br><span class="line">        <span class="keyword">\label</span>{share-one-caption}</span><br><span class="line">    <span class="keyword">\end</span>{figure}</span><br><span class="line">    </span><br><span class="line">    这里有一段文字需要引用图1。图<span class="keyword">\ref</span>{share-one-caption}有两张子图组成</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/01/GfCSc28aprV5Dyi.png" alt="06-子图共享大标题.png"></p>
<h3 id="更高阶的应用"><a href="#更高阶的应用" class="headerlink" title="更高阶的应用"></a>更高阶的应用</h3><p>修改子图编号格式</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\thesubfigure</span>}{<span class="keyword">\arabic</span>{subfigure}}<span class="comment">%使子图编号为a的格式</span></span><br><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\thesubfigure</span>}{(<span class="keyword">\alph</span>{subfigure})}<span class="comment">%使子图编号为(a)的格式</span></span><br><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\thesubtable</span>}{(<span class="keyword">\alph</span>{subtable})} <span class="comment">%使子表编号为(a)的格式</span></span><br></pre></td></tr></tbody></table></figure>

<p>修改子图为 <code>图 7.1</code> 的形式</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\thefigure</span>}{<span class="keyword">\arabic</span>{chapter}.<span class="keyword">\arabic</span>{figure}} <span class="comment">%使图编号为7.1的格式 %\protect{~}</span></span><br><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\thetable</span>}{<span class="keyword">\arabic</span>{chapter}.<span class="keyword">\arabic</span>{table}}<span class="comment">%使表编号为7.1的格式</span></span><br></pre></td></tr></tbody></table></figure>

<p>修改子图标题字体格式（详见 Caption 宏包选项和设置）</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">%子标题设置，编号为粗体，左对齐，文本正体</span></span><br><span class="line"><span class="keyword">\captionsetup</span>[subfigure]{labelfont=bf,textfont=normalfont,singlelinecheck=off,justification=raggedright}</span><br><span class="line"><span class="comment">%主标题设置</span></span><br><span class="line"><span class="keyword">\captionsetup</span>[figure]{labelformat=simple, labelsep=none}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>ctex 论坛： <a href="http://www.ctex.org/documents/latex/graphics/node111.html">并排的子图形</a></li>
<li> ctex 论坛： <a href="http://www.ctex.org/documents/latex/graphics/graphics.html">LATEX2e&nbsp;插图指南</a></li>
<li>简书： <a href="https://www.jianshu.com/p/0a1c45a02120">LaTeX 标题控制</a></li>
<li> LaTeX 工作室： <a href="https://www.latexstudio.net/archives/8652.html">LaTeX 技巧 884：如何用 caption 宏包格式化图表标题和子标题</a> </li>
<li> CSDN： <a href="https://blog.csdn.net/a6822342/article/details/80533135">Latex 中插入多张图片，实现并排排列或者多行多列排列</a></li>
</ul>
]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>image</tag>
      </tags>
  </entry>
  <entry>
    <title>处理 PDF 中的表格</title>
    <url>/posts/Handling-tables-in-PDF.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="处理程序"><a href="#处理程序" class="headerlink" title="处理程序"></a>处理程序</h3><p>Windows - <a href="https://pdf.abbyy.com/">PDF Software: Open, Read &amp; Edit PDFs | FineReader PDF</a></p>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><p>1、使用 Abbyy 打开 PDF 文件</p>
<p><img data-src="https://s2.loli.net/2023/10/21/ourcOlze6QDWgN2.png" alt="20231021211516.png"></p>
<p>2、按压左键拉动一个方框包含要复制的表格</p>
<p>3、点击第三个按钮，复制表格</p>
<p>4、识别成功后的变化</p>
<p><img data-src="https://s2.loli.net/2023/10/21/MPmdl7aGTioUB48.png" alt="image.png"></p>
<p>5、可以直接复制到 Excel 当中</p>
<p><img data-src="https://s2.loli.net/2023/10/21/QOchKrek1aiGb3o.png" alt="image.png"></p>
<p>对于中文字体和字号什么可能会有问题，可以全选，然后统一字体和字号</p>
]]></content>
      <tags>
        <tag>PDF</tag>
      </tags>
  </entry>
  <entry>
    <title>将 PDF 中的文字转换为曲线</title>
    <url>/posts/Convert-text-in-PDF-to-curves.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>针对 PDF 中带有特殊字体导致文字乱码 / 文字错位的问题（其他计算机中缺少相应的字体）</p>
<p>首先需要明确一点是 Adobe PDF 中没有专门的一个命令用来将文字转曲，具体操作如下</p>
<h3 id="转曲前的检查"><a href="#转曲前的检查" class="headerlink" title="转曲前的检查"></a>转曲前的检查</h3><ol>
<li>文档属性 ⇒ 字体 ⇒ 查看文档中内嵌的字体</li>
</ol>
<p><img data-src="https://s2.loli.net/2022/07/18/lEhtAVUDN9MpjdQ.png" alt="01-查看文档中内嵌的字体.png"></p>
<h3 id="进行转曲"><a href="#进行转曲" class="headerlink" title="进行转曲"></a>进行转曲</h3><p>编辑 PDF ⇒ 添加水印 ⇒ 水印设置如下</p>
<p><img data-src="https://s2.loli.net/2022/07/18/dTcPkUGWlaLbRtq.png" alt="02-添加水印来实现文字转曲效果.png"></p>
<p>添加水印之后，退出 PDF 编辑界面，进入 “印刷制作”</p>
<p><img data-src="https://s2.loli.net/2022/07/18/lMXd21LYRt8casD.png" alt="04-印刷制作-拼合器预览中进行相应的设置.png"></p>
<h3 id="转曲后的检查"><a href="#转曲后的检查" class="headerlink" title="转曲后的检查"></a>转曲后的检查</h3><p>拼合之后，检查文档中的字体信息，结果是没有包含任何字体</p>
<p><img data-src="https://s2.loli.net/2022/07/18/HpV7KN6wJitmzBe.png" alt="05-通过拼合之后的文档中不包含任何字体.png"></p>
<p>注意：拼合之后，鼠标无法在选中 PDF 中原有的文字，是对内容的一个极大的破坏，且操作不可逆，在拼合前注意是否需要<strong>备份一份文档</strong>，只能通过 OCR 等进行识别了</p>
<p>转曲前后文件大小比较（仅供参考）：7 页 368kb⇒ 1250kb</p>
]]></content>
      <tags>
        <tag>PDF</tag>
      </tags>
  </entry>
  <entry>
    <title>图片压缩指南</title>
    <url>/posts/Image-Compression-Guide.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h3><ul>
<li><a href="https://saerasoft.com/caesium">Caesium</a>：可批量、图形化界面、不可压缩 gif</li>
<li>Compress-images：可批量、可压缩 gif，其他格式的图片当然也可以压缩</li>
<li>以下的内容可以不用看了：）</li>
</ul>
<h3 id="Imagine-本地图片压缩"><a href="#Imagine-本地图片压缩" class="headerlink" title="Imagine 本地图片压缩"></a>Imagine 本地图片压缩</h3><p>Github 项目名称：Imagine； <a href="https://github.com/meowtec/Imagine">GitHub 仓库</a></p>
<blockquote>
<p>Imagine is a desktop app for compression of PNG and JPEG, with a modern and friendly UI.</p>
</blockquote>
<p>优点：UI 界面，参数可视化可调；开源免费；支持中文；支持转为 webp 格式图片；本地<br>缺点：无法处理 gif 图片</p>
<p><img data-src="https://s2.loli.net/2022/03/31/funvePYGOx9qXBy.png" alt="ImagineUI界面"></p>
<h3 id="Compressio-app"><a href="#Compressio-app" class="headerlink" title="Compressio.app"></a>Compressio.app</h3><p>在线 GIF 压缩 [Compressio.app]： <a href="https://compressio.app/">开源网址</a><br>github 仓库： <a href="https://github.com/twoabd/CompressioWeb">网址</a></p>
<p>优点：开源免费；跨设备运行；免安装；可自行搭建服务器<br>缺点：可能会涉及到隐私问题<br><img data-src="https://s2.loli.net/2022/03/31/71XCLTIxyQPoZnN.png" alt="Compressio.app界面"></p>
<h3 id="本地图片压缩-Compress-images"><a href="#本地图片压缩-Compress-images" class="headerlink" title="本地图片压缩 Compress-images"></a>本地图片压缩 Compress-images</h3><p>GitHub 仓库： <a href="https://github.com/Yuriy-Svetlov/compress-images">Compress-images</a></p>
<p>命令行安装以下依赖：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install compress-images --save</span><br><span class="line"></span><br><span class="line">npm install pngquant-bin@6.0.1 --save</span><br><span class="line">npm install gifsicle@5.2.1 --save</span><br><span class="line"></span><br><span class="line">注意不要升级随便升级版本，比如下面这段代码，升级之后报错（不知道为什么，可能识别不了）</span><br><span class="line">npm install gifsicle --save</span><br></pre></td></tr></tbody></table></figure>

<h4 id="1、使用方法"><a href="#1、使用方法" class="headerlink" title="1、使用方法"></a>1、使用方法</h4><p>请查阅下载的文档中的 example 示例的 Manual.txt</p>
<ol>
<li>从 GitHub 仓库下载项目：</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:semiromid/compress-images.git   </span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>删除所有文件夹，除了 example 文件夹</li>
<li>在 example 文件夹打开命令行工具（vscode 打开），如下命令安装依赖 </li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install compress-images --save</span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li>如遇到一下情况的报错，可能是不适合运行在某些系统上，可能需要对 example 文件中的 compress_images.js 做修改。<br>PS: win7 测试，在压缩 png 图片时，需要将 pngquant 参数改为 pngcrush</li>
</ol>
<p><img data-src="https://s2.loli.net/2022/03/31/FUIVzy28SxogD7j.png" alt="pngquant2pngcrush"></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[1] <span class="string">"npm install pngquant-bin@6.0.1 --save"</span> (It does not work properly on some OS). If you get error, you need edit <span class="string">'./compress_images.js'</span> and replace <span class="string">'pngquant'</span> on other PNG engine, as example on <span class="string">"pngcrush"</span>.</span><br><span class="line">{png: {engine: <span class="string">'pngcrush'</span>, <span class="built_in">command</span>: <span class="literal">false</span>}},</span><br><span class="line"></span><br><span class="line">[2] <span class="string">"npm install gifsicle@5.2.1 --save"</span> (It does not work properly on some OS). If you get error, you need edit <span class="string">'./compress_images.js'</span> and replace <span class="string">'gifsicle'</span> on other GIF engine, as example <span class="string">"gif2webp"</span></span><br><span class="line">{gif: {engine: <span class="string">'gif2webp'</span>, <span class="built_in">command</span>: <span class="literal">false</span>}}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ol>
<li>运行 minify_Img.bat，如果报错缺少什么依赖，继续在命令行中安装</li>
</ol>
<h4 id="2、可能会遇到的问题"><a href="#2、可能会遇到的问题" class="headerlink" title="2、可能会遇到的问题"></a>2、可能会遇到的问题</h4><ol>
<li>如果图片名太长，可能不能压缩处理，可先重命名在压缩</li>
<li>安装依赖可能会出现网络问题</li>
<li>最常见的错误就是上方第四点 pngquant|pngcrush；gifsicle|gif2webp 可能需要切换</li>
</ol>
<h4 id="3、自定义配置"><a href="#3、自定义配置" class="headerlink" title="3、自定义配置"></a>3、自定义配置</h4><ol>
<li>下载的示例库已经创建好了输入文件夹和输出文件夹，层级关系已经设置好了。其实我们也可以自定义设置 input 和 output 文件夹</li>
</ol>
<p><img data-src="/_posts/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E6%8C%87%E5%8D%97/Image-Compress_Compressio.app%E7%95%8C%E9%9D%A2.png" alt="compress_images.js自定义设置界面"></p>
<ol start="2">
<li>自定义配置参考文档：GitHub 仓库给了 7 中实例， <a href="https://github.com/Yuriy-Svetlov/compress-images">点击查看</a><br>举例其中的集中方式：<br>[1] 系数默认配置 </li>
</ol>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compress_images = <span class="built_in">require</span>(<span class="string">"compress-images"</span>),</span><br><span class="line">  INPUT_path_to_your_images,</span><br><span class="line">  OUTPUT_path;</span><br><span class="line"></span><br><span class="line">INPUT_path_to_your_images = <span class="string">"src/img/**/*.{jpg,JPG,jpeg,JPEG,png,svg,gif}"</span>;</span><br><span class="line">OUTPUT_path = <span class="string">"build/img/"</span>;</span><br><span class="line"></span><br><span class="line">compress_images(INPUT_path_to_your_images, OUTPUT_path, { <span class="attr">compress_force</span>: <span class="literal">false</span>, <span class="attr">statistic</span>: <span class="literal">true</span>, <span class="attr">autoupdate</span>: <span class="literal">true</span> }, <span class="literal">false</span>,</span><br><span class="line">                { <span class="attr">jpg</span>: { <span class="attr">engine</span>: <span class="string">"mozjpeg"</span>, <span class="attr">command</span>: [<span class="string">"-quality"</span>, <span class="string">"60"</span>] } },</span><br><span class="line">                { <span class="attr">png</span>: { <span class="attr">engine</span>: <span class="string">"pngquant"</span>, <span class="attr">command</span>: [<span class="string">"--quality=20-50"</span>, <span class="string">"-o"</span>] } },</span><br><span class="line">                { <span class="attr">svg</span>: { <span class="attr">engine</span>: <span class="string">"svgo"</span>, <span class="attr">command</span>: <span class="string">"--multipass"</span> } },</span><br><span class="line">                { <span class="attr">gif</span>: { <span class="attr">engine</span>: <span class="string">"gifsicle"</span>, <span class="attr">command</span>: [<span class="string">"--colors"</span>, <span class="string">"64"</span>, <span class="string">"--use-col=web"</span>] } },</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error, completed, statistic</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"-------------"</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="built_in">console</span>.log(completed);</span><br><span class="line">    <span class="built_in">console</span>.log(statistic);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"-------------"</span>);</span><br><span class="line">  }</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>

<p>[2]jpg⇒webp</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compress_images = <span class="built_in">require</span>(<span class="string">'compress-images'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// We will be compressing images [jpg] with two algorithms, [webp] and [jpg];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//[jpg] ---to---&gt; [webp]</span></span><br><span class="line">compress_images(</span><br><span class="line">  <span class="string">"src/img/**/*.{jpg,JPG,jpeg,JPEG}"</span>,</span><br><span class="line">  <span class="string">"build/img/"</span>,</span><br><span class="line">  { <span class="attr">compress_force</span>: <span class="literal">false</span>, <span class="attr">statistic</span>: <span class="literal">true</span>, <span class="attr">autoupdate</span>: <span class="literal">true</span> },</span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  { <span class="attr">jpg</span>: { <span class="attr">engine</span>: <span class="string">"webp"</span>, <span class="attr">command</span>: <span class="literal">false</span> } },</span><br><span class="line">  { <span class="attr">png</span>: { <span class="attr">engine</span>: <span class="literal">false</span>, <span class="attr">command</span>: <span class="literal">false</span> } },</span><br><span class="line">  { <span class="attr">svg</span>: { <span class="attr">engine</span>: <span class="literal">false</span>, <span class="attr">command</span>: <span class="literal">false</span> } },</span><br><span class="line">  { <span class="attr">gif</span>: { <span class="attr">engine</span>: <span class="literal">false</span>, <span class="attr">command</span>: <span class="literal">false</span> } },</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (err === <span class="literal">null</span>) {</span><br><span class="line">      <span class="comment">//[jpg] ---to---&gt; [jpg(jpegtran)] WARNING!!! autoupdate  - recommended to turn this off, it's not needed here - autoupdate: false</span></span><br><span class="line">      compress_images(</span><br><span class="line">        <span class="string">"src/img/**/*.{jpg,JPG,jpeg,JPEG}"</span>,</span><br><span class="line">        <span class="string">"build/img/"</span>,</span><br><span class="line">        { <span class="attr">compress_force</span>: <span class="literal">false</span>, <span class="attr">statistic</span>: <span class="literal">true</span>, <span class="attr">autoupdate</span>: <span class="literal">false</span> },</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        { <span class="attr">jpg</span>: { <span class="attr">engine</span>: <span class="string">"jpegtran"</span>, <span class="attr">command</span>: <span class="literal">false</span> } },</span><br><span class="line">        { <span class="attr">png</span>: { <span class="attr">engine</span>: <span class="literal">false</span>, <span class="attr">command</span>: <span class="literal">false</span> } },</span><br><span class="line">        { <span class="attr">svg</span>: { <span class="attr">engine</span>: <span class="literal">false</span>, <span class="attr">command</span>: <span class="literal">false</span> } },</span><br><span class="line">        { <span class="attr">gif</span>: { <span class="attr">engine</span>: <span class="literal">false</span>, <span class="attr">command</span>: <span class="literal">false</span> } },</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{}</span><br><span class="line">      );</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="built_in">console</span>.error(err);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure>

<p>[3] jpg (webp)+gif (gifsicle)+png (webp)+svg (svgo)，括号中的为压缩算法 / 格式转换</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> compress_images = <span class="built_in">require</span>(<span class="string">'compress-images'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//[jpg+gif+png+svg] ---to---&gt; [jpg(webp)+gif(gifsicle)+png(webp)+svg(svgo)]</span></span><br><span class="line">compress_images(<span class="string">'src/img/source/**/*.{jpg,JPG,jpeg,JPEG,gif,png,svg}'</span>, <span class="string">'build/img/'</span>, {<span class="attr">compress_force</span>: <span class="literal">false</span>, <span class="attr">statistic</span>: <span class="literal">true</span>, <span class="attr">autoupdate</span>: <span class="literal">true</span>}, <span class="literal">false</span>,</span><br><span class="line">                                            {<span class="attr">jpg</span>: {<span class="attr">engine</span>: <span class="string">'webp'</span>, <span class="attr">command</span>: <span class="literal">false</span>}},</span><br><span class="line">                                            {<span class="attr">png</span>: {<span class="attr">engine</span>: <span class="string">'webp'</span>, <span class="attr">command</span>: <span class="literal">false</span>}},</span><br><span class="line">                                            {<span class="attr">svg</span>: {<span class="attr">engine</span>: <span class="string">'svgo'</span>, <span class="attr">command</span>: <span class="literal">false</span>}},</span><br><span class="line">                                            {<span class="attr">gif</span>: {<span class="attr">engine</span>: <span class="string">'gifsicle'</span>, <span class="attr">command</span>: [<span class="string">'--colors'</span>, <span class="string">'64'</span>, <span class="string">'--use-col=web'</span>]}}, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">      <span class="comment">//-------------------------------------------------                                    </span></span><br><span class="line">      <span class="comment">//[jpg] ---to---&gt; [jpg(jpegtran)] WARNING!!! autoupdate  - recommended to turn this off, it's not needed here - autoupdate: false</span></span><br><span class="line">      compress_images(<span class="string">'src/img/source/**/*.{jpg,JPG,jpeg,JPEG}'</span>, <span class="string">'src/img/combine/'</span>, {<span class="attr">compress_force</span>: <span class="literal">false</span>, <span class="attr">statistic</span>: <span class="literal">true</span>, <span class="attr">autoupdate</span>: <span class="literal">false</span>}, <span class="literal">false</span>,</span><br><span class="line">                                                      {<span class="attr">jpg</span>: {<span class="attr">engine</span>: <span class="string">'jpegtran'</span>, <span class="attr">command</span>: [<span class="string">'-trim'</span>, <span class="string">'-progressive'</span>, <span class="string">'-copy'</span>, <span class="string">'none'</span>, <span class="string">'-optimize'</span>]}},</span><br><span class="line">                                                      {<span class="attr">png</span>: {<span class="attr">engine</span>: <span class="literal">false</span>, <span class="attr">command</span>: <span class="literal">false</span>}},</span><br><span class="line">                                                      {<span class="attr">svg</span>: {<span class="attr">engine</span>: <span class="literal">false</span>, <span class="attr">command</span>: <span class="literal">false</span>}},</span><br><span class="line">                                                      {<span class="attr">gif</span>: {<span class="attr">engine</span>: <span class="literal">false</span>, <span class="attr">command</span>: <span class="literal">false</span>}}, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">            <span class="comment">//[jpg(jpegtran)] ---to---&gt; [jpg(mozjpeg)] WARNING!!! autoupdate  - recommended to turn this off, it's not needed here - autoupdate: false</span></span><br><span class="line">            compress_images(<span class="string">'src/img/combine/**/*.{jpg,JPG,jpeg,JPEG}'</span>, <span class="string">'build/img/'</span>, {<span class="attr">compress_force</span>: <span class="literal">false</span>, <span class="attr">statistic</span>: <span class="literal">true</span>, <span class="attr">autoupdate</span>: <span class="literal">false</span>}, <span class="literal">false</span>,</span><br><span class="line">                                                            {<span class="attr">jpg</span>: {<span class="attr">engine</span>: <span class="string">'mozjpeg'</span>, <span class="attr">command</span>: [<span class="string">'-quality'</span>, <span class="string">'75'</span>]}},</span><br><span class="line">                                                            {<span class="attr">png</span>: {<span class="attr">engine</span>: <span class="literal">false</span>, <span class="attr">command</span>: <span class="literal">false</span>}},</span><br><span class="line">                                                            {<span class="attr">svg</span>: {<span class="attr">engine</span>: <span class="literal">false</span>, <span class="attr">command</span>: <span class="literal">false</span>}},</span><br><span class="line">                                                            {<span class="attr">gif</span>: {<span class="attr">engine</span>: <span class="literal">false</span>, <span class="attr">command</span>: <span class="literal">false</span>}}, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">                  <span class="comment">//[png] ---to---&gt; [png(pngquant)] WARNING!!! autoupdate  - recommended to turn this off, it's not needed here - autoupdate: false</span></span><br><span class="line">                  compress_images(<span class="string">'src/img/source/**/*.png'</span>, <span class="string">'build/img/'</span>, {<span class="attr">compress_force</span>: <span class="literal">false</span>, <span class="attr">statistic</span>: <span class="literal">true</span>, <span class="attr">autoupdate</span>: <span class="literal">false</span>}, <span class="literal">false</span>,</span><br><span class="line">                                                                  {<span class="attr">jpg</span>: {<span class="attr">engine</span>: <span class="literal">false</span>, <span class="attr">command</span>: <span class="literal">false</span>}},</span><br><span class="line">                                                                  {<span class="attr">png</span>: {<span class="attr">engine</span>: <span class="string">'pngquant'</span>, <span class="attr">command</span>: [<span class="string">'--quality=30-60'</span>, <span class="string">'-o'</span>]}},</span><br><span class="line">                                                                  {<span class="attr">svg</span>: {<span class="attr">engine</span>: <span class="literal">false</span>, <span class="attr">command</span>: <span class="literal">false</span>}},</span><br><span class="line">                                                                  {<span class="attr">gif</span>: {<span class="attr">engine</span>: <span class="literal">false</span>, <span class="attr">command</span>: <span class="literal">false</span>}}, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{                                                      </span><br><span class="line">                  }); </span><br><span class="line">            });                                      </span><br><span class="line">      });</span><br><span class="line">      <span class="comment">//-------------------------------------------------</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<h4 id="4、压缩效果"><a href="#4、压缩效果" class="headerlink" title="4、压缩效果"></a>4、压缩效果</h4><p><img data-src="https://s2.loli.net/2022/05/12/b8skpTMEZxOQRA7.gif" alt="图片压缩效果：文件从11M->2.2M"></p>
]]></content>
      <tags>
        <tag>Image</tag>
      </tags>
  </entry>
  <entry>
    <title>屏蔽内容农场简明指南</title>
    <url>/posts/A-Concise-Guide-to-Blocking-Content-Farms.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>注：以下各个仓库 / 插件的安装，官方教程都写得非常清楚，本文不再赘述，对此话题感兴趣的朋友可以阅读文末的阅读列表</p>
<h3 id="什么是内容农场"><a href="#什么是内容农场" class="headerlink" title="什么是内容农场"></a>什么是内容农场</h3><p>内容农场（英文：content farm）是指为了牟取广告费等商业利益或出于控制舆论、带风向等特殊目的，快速生产大量网路文章来吸引流量的网站。此类网站通常找不到作者、管理者、网站负责人，也不会主动管理产出的内容，对侵权或错误内容投诉的处理也很消极。其产出内容多半都是缺乏原创性且真实性无法保证的内容，且有极高比例是盗用、盗译自他人的原创图文，或由非专业写手胡乱拼凑网路文章而来，因而多半缺乏可靠来源、品质低劣、不具参考价值、传播误导讯息，也经常掺杂大量广告或恶意程式</p>
<h3 id="如何终结内容农场"><a href="#如何终结内容农场" class="headerlink" title="如何终结内容农场"></a>如何终结内容农场</h3><p>提供以下两种方案，两者均能有效起到一定的屏蔽效果和自定义配置</p>
<ol>
<li>终极内容农场</li>
<li> Google-Chinese-Results-Blocklist</li>
</ol>
<h4 id="终结内容农场"><a href="#终结内容农场" class="headerlink" title="终结内容农场"></a>终结内容农场</h4><p>Github 仓库：<a href="https://github.com/danny0838/content-farm-terminator">終結內容農場 (Content Farm Terminator)</a></p>
<p><img data-src="https://s2.loli.net/2022/06/13/dDrgiRPTu3coSHL.png" alt="05-终结内容农场.png"></p>
<p>终结内容农场是一款开源的浏览器扩展，支持 Chrome、Firefox，它会在你打开内容农场网页之前弹出警告，让你离开这些网站。且无需配置，开箱即用</p>
<p>插件安装前<br><img data-src="https://s2.loli.net/2022/06/13/Bmls4GWUN518gnt.png" alt="01-搜索结果充斥着大量的内容农场.png"></p>
<p>插件安装后（网页前会有内容农场的提示）<br><img data-src="https://s2.loli.net/2022/06/13/N6rpUXZm87bS9uY.png" alt="02-安装完插件之后提示网页为垃圾内容.png"></p>
<p>如何获取</p>
<ul>
<li><a href="https://github.com/danny0838/content-farm-terminator">GitHub</a></li>
<li><a href="https://chrome.google.com/webstore/detail/content-farm-terminator/lcghoajegeldpfkfaejegfobkapnemjl/">Chrome 商店</a></li>
<li><a href="https://microsoftedge.microsoft.com/addons/detail/%E7%BB%88%E7%BB%93%E5%86%85%E5%AE%B9%E5%86%9C%E5%9C%BA/fgckcfkpckemdnnejbbfkkchanedbeje">Edge 商店</a></li>
<li><a href="https://addons.mozilla.org/zh-CN/firefox/addon/block-content-farm/">Firefox 商店</a></li>
</ul>
<h4 id="中文搜索结果黑名单"><a href="#中文搜索结果黑名单" class="headerlink" title="中文搜索结果黑名单"></a>中文搜索结果黑名单</h4><p>Github 仓库：<a href="https://github.com/cobaltdisco/Google-Chinese-Results-Blocklist">Google-Chinese-Results-Blocklist</a></p>
<p>详细使用请查阅该仓库地址。同时，该仓库为我们提供了一些网站黑名单：<a href="https://raw.githubusercontent.com/cobaltdisco/Google-Chinese-Results-Blocklist/master/GHHbD_perma_ban_list.txt">点击查看</a>，将该列表添加至网页插件的黑名单列表中，在搜索结果中可直接为我们过滤掉黑名单网站，与终极内容农场插件的提示相比，该插件直接从搜索结果中过滤掉了这些网站</p>
<p><img data-src="https://s2.loli.net/2022/06/13/BRX3lIr4dTW7jun.png" alt="04-将网页添加至黑名单列表.png"></p>
<p>除了各大网友提供的黑名单列表，该插件还支持随时从搜索结果中将网站加入黑名单，如下图所示：</p>
<p><img data-src="https://s2.loli.net/2022/06/13/nzmcpa842i9UTor.gif" alt="03-通过插件直接屏蔽掉google的搜索结果.gif"></p>
<h3 id="参考资料-amp-了解更多"><a href="#参考资料-amp-了解更多" class="headerlink" title="参考资料&amp;了解更多"></a>参考资料 &amp; 了解更多</h3><ul>
<li>维基百科：<a href="https://zh.m.wikipedia.org/zh/%E5%85%A7%E5%AE%B9%E8%BE%B2%E5%A0%B4">内容农场</a></li>
<li><a href="https://content-farm-terminator.blogspot.com/2018/12/about-content-farm-terminator.html">什么是内容农场？为何要终结内容农场？</a></li>
<li>V2EX：<a href="https://v2ex.com/t/806775">今天又是和每页 49 个内容农场斗争的一天</a></li>
<li> Github：<a href="https://github.com/cobaltdisco/Google-Chinese-Results-Blocklist">中文搜索结果黑名单</a></li>
<li>小众软件： <a href="https://www.appinn.com/content-farm-terminator/">终结内容农场 – 屏蔽内容农场网页</a></li>
<li>少数派：<a href="https://sspai.com/post/69407">清理「内容农场」，还你清爽的 Google 中文搜索体验</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>文件树目录</title>
    <url>/posts/Creating-a-file-tree-directory.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>新建文本文件，将以下两种方式中的任意一种粘贴到文本中，并保存为 <code>bat</code> 格式双击运行即可</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">echo off &amp; color 0A</span><br><span class="line">echo 当前目录："%cd%" &gt;fileTree.txt</span><br><span class="line">tree /f &gt;&gt;fileTree.txt</span><br><span class="line">echo 目录树已生成，按任意键查看。</span><br><span class="line">pause&gt;nul</span><br><span class="line">start fileTree.txt</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">tree /f &gt; tree_output.txt</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>如果只想输出文件夹信息，加 <code>/a</code> 参数</li>
<li>如果想输出文件夹下的文件名，加 <code>/f</code> 参数</li>
</ul>
<hr>
<p>或者不新建文件，在文件夹中，按住 Shift 右键，在此处打开 powershell，然后粘贴代码 <code>tree /f &gt; tree_output.txt</code> 即可</p>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/imgs/blog20240616142140.png" alt="image.png"></p>
<p>在当前文件夹搜索栏左侧的路径下，直接敲入 CMD，回车即可</p>
]]></content>
  </entry>
  <entry>
    <title>新建文档指南</title>
    <url>/posts/New-Document-Guide.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><ol>
<li>首先创建一个专门的文件夹</li>
<li>创建 imgs，PDFs 等子文件夹用于存储资源文件</li>
<li>注意所截取的图片一定要保存下来，在到 word 中插入图片【过程虽然比直接复制截图繁琐，但是这个图片以后如果用得到呢？难道还要在打开 PDF 进行截图吗】</li>
<li>截图的图片命名好名字，不要按照默认的时间命名</li>
<li>给图片添加题注，顺手的事情，因为图片的名字可以作为图片的图注</li>
<li>将图片和图注复制到其他文档中后，选择图注的域代码，按下 F9 即可更新图注，所以说前面给图片添加题注是一个好习惯，后期省的给图片添加图注</li>
<li>保存一份带有标题样式的 Word 模板</li>
<li>保存好使用到的 pdf 文件和图片，方便后期直接压缩包打包<br>最后，一定要注意，文章中插入的信息要标注来源！！！</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>zhlipsum 假文宏包使用说明</title>
    <url>/posts/zhlipsum-Chinese-dummy-macro-package.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="速览"><a href="#速览" class="headerlink" title="速览"></a>速览</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>{zhlipsum}</span><br><span class="line"><span class="comment">%...</span></span><br><span class="line"><span class="keyword">\zhlipsum</span>[需要从假文中抽取的段落][name=假文库] <span class="comment">%两个参数都是可选参数 </span></span><br><span class="line"><span class="keyword">\newzhlipsum</span>{自定义假文库名}{{假文段落1},{假文段落2},{假文段落n}} <span class="comment">%自定义假文库，注意假文的每个段落以大括号包裹，中间使用英文逗号隔开</span></span><br></pre></td></tr></tbody></table></figure>

<p>以下几个案例将分别从这三句命令对本宏包进行说明</p>
<h3 id="中文假文"><a href="#中文假文" class="headerlink" title="中文假文"></a>中文假文</h3><h4 id="从无意义的假文中选定段落"><a href="#从无意义的假文中选定段落" class="headerlink" title="从无意义的假文中选定段落"></a>从无意义的假文中选定段落</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{zhlipsum}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line">    <span class="comment">%zhlipsum第一个可选参数为选取段落参数</span></span><br><span class="line">    <span class="keyword">\zhlipsum</span>[1] <span class="comment">%从假文中（共50段）选择第一段</span></span><br><span class="line">    <span class="keyword">\zhlipsum</span> <span class="comment">%也可以不加参数，默认输出1-3段</span></span><br><span class="line">    <span class="keyword">\zhlipsum</span>[1-2] <span class="comment">%从假文中选择第1-2段 ，可以以“数字-数字”的形式指定</span></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/09/XLpl76uegcFkQfV.png" alt="01-从假文中抽取段落.png"></p>
<h4 id="从指定假文库中抽取段落"><a href="#从指定假文库中抽取段落" class="headerlink" title="从指定假文库中抽取段落"></a>从指定假文库中抽取段落</h4><p>宏包作者预定义了 6 个假文库</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">段落数</th>
<th align="center">简体 / 繁体</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"> simp</td>
<td align="center">50</td>
<td align="center"> 简</td>
<td align="center">无意义随机假文</td>
</tr>
<tr>
<td align="center"> trad</td>
<td align="center">50</td>
<td align="center"> 繁</td>
<td align="center">无意义随机假文</td>
</tr>
<tr>
<td align="center"> nanshanjing</td>
<td align="center">43</td>
<td align="center"> 繁</td>
<td align="center">《山海经・南山经》</td>
</tr>
<tr>
<td align="center">xiangyu</td>
<td align="center">45</td>
<td align="center"> 繁</td>
<td align="center">司马迁《史记项羽本纪》</td>
</tr>
<tr>
<td align="center">zhufu</td>
<td align="center">110</td>
<td align="center"> 简</td>
<td align="center">鲁迅《祝福》</td>
</tr>
<tr>
<td align="center">aspirin</td>
<td align="center">66</td>
<td align="center"> 简</td>
<td align="center">维基百科条目：阿司匹林 </td>
</tr>
</tbody></table>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{zhlipsum}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="comment">%zhlipsum第二个可选参数为选取的假文库，默认有6中</span></span><br><span class="line"> <span class="keyword">\zhlipsum</span>[1-3][name=zhufu] <span class="comment">%从鲁迅《祝福》库中选取前1-3段</span></span><br><span class="line"> <span class="keyword">\zhlipsum</span>[1-3][name=xiangyu] <span class="comment">%从司马迁《史记·项羽本纪》库中选取前1-3段</span></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/09/ZDcPmafGRMed15n.png" alt="02-从指定假文库中抽取段落.png"></p>
<h4 id="自定义假文库"><a href="#自定义假文库" class="headerlink" title="自定义假文库"></a>自定义假文库</h4><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\usepackage</span>{zhlipsum}</span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\newzhlipsum</span>{chibifu}{ <span class="comment">%自定义假文库，假文库名为chibifu，假文库共5段，每段之间使用英文逗号进行分隔</span></span><br><span class="line"> {壬戌之秋，七月既望，苏子与客泛舟游于赤壁之下。清风徐来，水波不兴。举酒属客，诵明月之诗，歌窈窕之章。少焉，月出于东山之上，徘徊于斗牛之间。白露横江，水光接天。纵一苇之所如，凌万顷之茫然。浩浩乎如冯虚御风，而不知其所止；飘飘乎如遗世独立，羽化而登仙。},</span><br><span class="line"> {于是饮酒乐甚，扣舷而歌之。歌曰：“桂棹兮兰桨，击空明兮溯流光。渺渺兮予怀，望美人兮天一方。”客有吹洞箫者，倚歌而和之。其声呜呜然，如怨如慕，如泣如诉；余音袅袅，不绝如缕。舞幽壑之潜蛟，泣孤舟之嫠妇。},</span><br><span class="line"> {苏子愀然，正襟危坐，而问客曰：“何为其然也？”客曰：“‘月明星稀，乌鹊南飞。’此非曹孟德之诗乎？西望夏口，东望武昌，山川相缪，郁乎苍苍，此非孟德之困于周郎者乎？方其破荆州，下江陵，顺流而东也，舳舻千里，旌旗蔽空，酾酒临江，横槊赋诗，固一世之雄也，而今安在哉？况吾与子渔樵于江渚之上，侣鱼虾而友麋鹿，驾一叶之扁舟，举匏樽以相属。寄蜉蝣于天地，渺沧海之一粟。哀吾生之须臾，羡长江之无穷。挟飞仙以遨游，抱明月而长终。知不可乎骤得，托遗响于悲风。”},</span><br><span class="line"> {苏子曰：“客亦知夫水与月乎？逝者如斯，而未尝往也；盈虚者如彼，而卒莫消长也。盖将自其变者而观之，则天地曾不能以一瞬；自其不变者而观之，则物与我皆无尽也，而又何羡乎！且夫天地之间，物各有主，苟非吾之所有，虽一毫而莫取。惟江上之清风，与山间之明月，耳得之而为声，目遇之而成色，取之无禁，用之不竭。是造物者之无尽藏也，而吾与子之所共适。”},</span><br><span class="line"> {客喜而笑，洗盏更酌。肴核既尽，杯盘狼籍。相与枕藉乎舟中，不知东方之既白。}</span><br><span class="line">}</span><br><span class="line"> <span class="keyword">\zhlipsum</span>[1-3][name=chibifu] <span class="comment">%假文选择自定义的赤壁赋的前3段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/06/09/LxfEUIdY4TgNvZV.png" alt="03-从自定义的假文库中抽取前3段.png"></p>
<h3 id="英文假文"><a href="#英文假文" class="headerlink" title="英文假文"></a>英文假文</h3><p>英文假文 blindtext 宏包使用案可参考之前所写文章：<a href="https://coffeelize.top/posts/ad84a2aa.html#%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90">Latex 浮动体位置设定</a> @<a href="https://coffeelize.top/">智朋的个人博客</a></p>
<h3 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>zhlipsum 宏包官方文档：<a href="zhlipsum: 中文乱数假文（Lorem ipsum）">zhlipsum: 中文乱数假文（Lorem ipsum）</a>@曾祥东</li>
<li>古诗文网：<a href="https://so.gushiwen.cn/shiwenv_4cac23b07849.aspx">赤壁赋</a></li>
</ul>
]]></content>
      <tags>
        <tag>Latex</tag>
      </tags>
  </entry>
  <entry>
    <title>智朋的 LaTeX 模板</title>
    <url>/posts/LaTeX-templates-for-coffeelize.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>Github：<a href="https://github.com/ElegantLaTeX/ElegantBook">Elegantbook</a></li>
<li>LaTeX 工作室：<a href="https://www.latexstudio.net/archives/51713.html">浮动体环境内部内容居中的设置方法</a></li>
<li> LaTeX 工作室：<a href="https://www.latexstudio.net/index/details/index/mid/2314">Elegentbook 魔改版</a></li>
</ol>
<h3 id="Tex"><a href="#Tex" class="headerlink" title="Tex"></a>Tex</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="comment">%  ====目录章节设置 ====</span></span><br><span class="line"><span class="keyword">\usepackage</span>[center,pagestyles]{titlesec}</span><br><span class="line"><span class="keyword">\usepackage</span>{apptools}</span><br><span class="line"><span class="keyword">\usepackage</span>[toc,page,title,titletoc]{appendix}</span><br><span class="line"><span class="keyword">\setcounter</span>{secnumdepth}{5}</span><br><span class="line"><span class="comment">%  ++++ 章节标题格式设置 ++++</span></span><br><span class="line"><span class="keyword">\titleformat</span>{<span class="keyword">\section</span>}[hang]{<span class="keyword">\bfseries</span>}{</span><br><span class="line"> <span class="keyword">\Large</span><span class="keyword">\bfseries</span>{<span class="keyword">\color</span>{structurecolor}<span class="keyword">\thesection</span>}<span class="keyword">\enspace</span>}{1pt}{<span class="comment">%</span></span><br><span class="line"> <span class="keyword">\color</span>{structurecolor}<span class="keyword">\Large</span><span class="keyword">\bfseries</span><span class="keyword">\filright</span>}</span><br><span class="line"><span class="keyword">\titleformat</span>{<span class="keyword">\subsection</span>}[hang]{<span class="keyword">\bfseries</span>}{</span><br><span class="line"> <span class="keyword">\large</span><span class="keyword">\bfseries</span><span class="keyword">\color</span>{structurecolor}<span class="keyword">\thesubsection</span><span class="keyword">\enspace</span>}{1pt}{<span class="comment">%</span></span><br><span class="line"> <span class="keyword">\color</span>{structurecolor}<span class="keyword">\large</span><span class="keyword">\bfseries</span><span class="keyword">\filright</span>}</span><br><span class="line"><span class="keyword">\titleformat</span>{<span class="keyword">\subsubsection</span>}[hang]{<span class="keyword">\bfseries</span>}{</span><br><span class="line"> <span class="keyword">\large</span><span class="keyword">\bfseries</span><span class="keyword">\color</span>{structurecolor}<span class="keyword">\thesubsubsection</span><span class="keyword">\enspace</span>}{1pt}{<span class="comment">%</span></span><br><span class="line"> <span class="keyword">\color</span>{structurecolor}<span class="keyword">\large</span><span class="keyword">\bfseries</span><span class="keyword">\filright</span>}</span><br><span class="line"><span class="comment">% ====常用宏包====</span></span><br><span class="line"><span class="keyword">\RequirePackage</span>{makecell,lipsum,hologo,setspace}</span><br><span class="line"><span class="keyword">\RequirePackage</span>{booktabs}</span><br><span class="line"><span class="keyword">\RequirePackage</span>{multicol,multirow}</span><br><span class="line"><span class="comment">% ++++插入图片设置++++</span></span><br><span class="line"><span class="keyword">\usepackage</span>{graphics}</span><br><span class="line"><span class="keyword">\graphicspath</span>{{./figure/}{./figures/}{./image/}{./images/}{./graphics/}{./graphic/}{./pictures/}{./picture/}}</span><br><span class="line"><span class="comment">% ++++数学字体宏包++++</span></span><br><span class="line"><span class="keyword">\usepackage</span>{amsmath,mathrsfs,amsfonts,amssymb}</span><br><span class="line"><span class="comment">% ====行间距设置====</span></span><br><span class="line"><span class="keyword">\linespread</span>{1.3}</span><br><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\baselinestretch</span>}{1.35} </span><br><span class="line"><span class="comment">% ====脚注环境设置====</span></span><br><span class="line"><span class="keyword">\AtBeginDocument</span>{</span><br><span class="line"> <span class="keyword">\setlength</span>{<span class="keyword">\abovedisplayskip</span>}{3pt}</span><br><span class="line"> <span class="keyword">\setlength</span>{<span class="keyword">\belowdisplayskip</span>}{3pt}</span><br><span class="line"> <span class="keyword">\RequirePackage</span>[flushmargin,stable]{footmisc}</span><br><span class="line"> <span class="keyword">\setlength</span>{<span class="keyword">\footnotesep</span>}{12pt}</span><br><span class="line">}</span><br><span class="line"><span class="comment">% ====设置列表环境====</span></span><br><span class="line"><span class="keyword">\usepackage</span>{enumerate}</span><br><span class="line"><span class="keyword">\usepackage</span>[shortlabels,inline]{enumitem}</span><br><span class="line"><span class="keyword">\setlist</span>{nolistsep}</span><br><span class="line"><span class="comment">% ====颜色设置====</span></span><br><span class="line"><span class="keyword">\usepackage</span>{xcolor}</span><br><span class="line"><span class="keyword">\definecolor</span>{structurecolor}{RGB}{0,120,2}</span><br><span class="line"><span class="keyword">\definecolor</span>{main}{RGB}{0,120,2}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\definecolor</span>{second}{RGB}{230,90,7}<span class="comment">%</span></span><br><span class="line"><span class="keyword">\definecolor</span>{third}{RGB}{0,160,152}<span class="comment">%</span></span><br><span class="line"><span class="comment">% ++++设置超链接的颜色++++</span></span><br><span class="line"><span class="keyword">\definecolor</span>{winered}{rgb}{0.5,0,0}</span><br><span class="line"><span class="comment">% ++++设置浮动体的某些主题色++++</span></span><br><span class="line"><span class="keyword">\usepackage</span>[font=small,labelfont={bf,color=structurecolor}]{caption} </span><br><span class="line"><span class="keyword">\captionsetup</span>[table]{skip=3pt}</span><br><span class="line"><span class="keyword">\captionsetup</span>[figure]{skip=3pt}</span><br><span class="line"><span class="comment">% ====假文宏包====</span></span><br><span class="line"><span class="keyword">\usepackage</span>{zhlipsum}</span><br><span class="line"><span class="keyword">\usepackage</span>{lipsum}</span><br><span class="line"><span class="comment">% ====字体设置====</span></span><br><span class="line"><span class="keyword">\usepackage</span>{xeCJK}</span><br><span class="line"><span class="keyword">\setmainfont</span>{Times New Roman}</span><br><span class="line"><span class="comment">%  ====设置页边距 ====</span></span><br><span class="line"><span class="keyword">\usepackage</span>{geometry}</span><br><span class="line"><span class="keyword">\geometry</span>{</span><br><span class="line"> a4paper,</span><br><span class="line"> top=25.4mm, bottom=25.4mm,</span><br><span class="line"> headheight=2.17cm,</span><br><span class="line"> headsep=4mm,</span><br><span class="line"> footskip=12mm</span><br><span class="line">}</span><br><span class="line"><span class="comment">%  ====设置参考文献格式 ====</span></span><br><span class="line"><span class="keyword">\usepackage</span>[sort<span class="built_in">&amp;</span>compress]{natbib}</span><br><span class="line"><span class="keyword">\setlength</span>{<span class="keyword">\bibsep</span>}{0.0pt}</span><br><span class="line"><span class="keyword">\def</span><span class="keyword">\bibfont</span>{<span class="keyword">\footnotesize</span>}</span><br><span class="line"><span class="comment">%  ====设置页眉页脚 ====</span></span><br><span class="line"><span class="keyword">\usepackage</span>{fancyhdr}</span><br><span class="line"><span class="keyword">\fancyhf</span>{}</span><br><span class="line"><span class="keyword">\fancyfoot</span>[c]{<span class="keyword">\color</span>{structurecolor}<span class="keyword">\scriptsize</span><span class="keyword">\thepage</span>}</span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\citshape</span>}{<span class="keyword">\kaishu</span>}</span><br><span class="line"><span class="keyword">\fancyhead</span>[R]{<span class="keyword">\color</span>{structurecolor}--<span class="keyword">\;</span><span class="keyword">\thepage</span><span class="keyword">\;</span>--}</span><br><span class="line"><span class="keyword">\fancyhead</span>[L]{<span class="keyword">\color</span>{structurecolor}<span class="keyword">\citshape</span><span class="keyword">\rightmark</span>}</span><br><span class="line"><span class="comment">%  ++++ 设置页眉页脚 ++++</span></span><br><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\headrule</span>}{<span class="keyword">\color</span>{structurecolor}<span class="keyword">\hrule</span> width<span class="keyword">\textwidth</span>}</span><br><span class="line"><span class="keyword">\pagestyle</span>{fancy}</span><br><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\headrulewidth</span>}{1pt}</span><br><span class="line"><span class="comment">% \renewcommand{\headrule}{}</span></span><br><span class="line"><span class="keyword">\fancypagestyle</span>{plain}{<span class="keyword">\renewcommand</span>{<span class="keyword">\headrulewidth</span>}{0pt}<span class="keyword">\fancyhf</span>{}<span class="keyword">\renewcommand</span>{<span class="keyword">\headrule</span>}{}}</span><br><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\sectionmark</span>}[1]{<span class="keyword">\markright</span>{<span class="keyword">\thesection</span><span class="keyword">\,</span> <span class="params">#1</span>}{} }</span><br><span class="line"><span class="comment">%\renewcommand{\chaptermark}[1]{\markboth{\chaptername \, #1\,}{}}</span></span><br><span class="line"><span class="comment">%  ====设置公式环境 ====</span></span><br><span class="line"><span class="keyword">\numberwithin</span>{equation}{section}</span><br><span class="line"><span class="comment">%  ====自定义环境 ====</span></span><br><span class="line"><span class="comment">%  +++++ note环境 +++++</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\notename</span>}{笔记}</span><br><span class="line"><span class="keyword">\usepackage</span>{bbding,manfnt} <span class="comment">% 一些图标，如 \dbend</span></span><br><span class="line"><span class="keyword">\newenvironment</span>{note}{</span><br><span class="line"> <span class="keyword">\par</span><span class="keyword">\noindent</span><span class="keyword">\makebox</span>[-3pt][r]{</span><br><span class="line">  <span class="keyword">\scriptsize</span><span class="keyword">\color</span>{red!90}<span class="keyword">\textdbend</span><span class="keyword">\quad</span>}</span><br><span class="line"> <span class="keyword">\textbf</span>{<span class="keyword">\color</span>{second}<span class="keyword">\notename</span>} <span class="keyword">\citshape</span>}{<span class="keyword">\par</span>}</span><br><span class="line"><span class="comment">%  +++++ introduction环境 +++++</span></span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\introductionname</span>}{内容提要}</span><br><span class="line"><span class="keyword">\usepackage</span>{multicol}</span><br><span class="line"><span class="keyword">\usepackage</span>[most]{tcolorbox}</span><br><span class="line"><span class="keyword">\tcbset</span>{</span><br><span class="line"> introductionsty/.style={</span><br><span class="line">  enhanced,</span><br><span class="line">  breakable,</span><br><span class="line">  colback=structurecolor!10,</span><br><span class="line">  colframe=structurecolor,</span><br><span class="line">  fonttitle=<span class="keyword">\bfseries</span>,</span><br><span class="line">  colbacktitle=structurecolor,</span><br><span class="line">  fontupper=<span class="keyword">\citshape</span>,</span><br><span class="line">  attach boxed title to top center={yshift=-3mm,yshifttext=-1mm},</span><br><span class="line">  boxrule=0pt,</span><br><span class="line">  toprule=0.5pt,</span><br><span class="line">  bottomrule=0.5pt,</span><br><span class="line">  top=8pt,</span><br><span class="line">  before skip=8pt,</span><br><span class="line">  sharp corners</span><br><span class="line"> },</span><br><span class="line">}</span><br><span class="line"><span class="keyword">\newenvironment</span>{introduction}[1][<span class="keyword">\introductionname</span>]{</span><br><span class="line"><span class="keyword">\begin</span>{tcolorbox}[introductionsty,title={<span class="params">#1</span>}]</span><br><span class="line"> <span class="keyword">\begin</span>{multicols}{2}</span><br><span class="line">  <span class="keyword">\begin</span>{itemize}[label=<span class="keyword">\textcolor</span>{structurecolor}{<span class="keyword">\upshape</span><span class="keyword">\scriptsize</span><span class="keyword">\SquareShadowBottomRight</span>}]}{</span><br><span class="line">  <span class="keyword">\end</span>{itemize}</span><br><span class="line"> <span class="keyword">\end</span>{multicols}</span><br><span class="line"><span class="keyword">\end</span>{tcolorbox}}</span><br><span class="line"><span class="comment">%  ====浮动体环境设置：自动居中小一号字 ====</span></span><br><span class="line"><span class="keyword">\usepackage</span>{xpatch}</span><br><span class="line"><span class="keyword">\makeatletter</span></span><br><span class="line"><span class="keyword">\xpatchcmd</span><span class="keyword">\@floatboxreset</span>{<span class="keyword">\normalsize</span>}{<span class="keyword">\centering</span><span class="keyword">\small</span>}{}{}</span><br><span class="line"><span class="keyword">\makeatother</span></span><br><span class="line"><span class="comment">%  ====文档超链接设置 ====</span></span><br><span class="line"><span class="keyword">\usepackage</span>{hyperref}</span><br><span class="line"><span class="keyword">\hypersetup</span>{</span><br><span class="line"> breaklinks,</span><br><span class="line"> unicode,</span><br><span class="line"> linktoc=all,</span><br><span class="line"> bookmarksnumbered=true,</span><br><span class="line"> bookmarksopen=true,</span><br><span class="line"> pdfkeywords={Coffeelize},</span><br><span class="line"> colorlinks,</span><br><span class="line"> linkcolor=winered,</span><br><span class="line"> citecolor=winered,</span><br><span class="line"> urlcolor=winered,</span><br><span class="line"> plainpages=false,</span><br><span class="line"> pdfstartview=FitH,</span><br><span class="line"> pdfborder={0 0 0},</span><br><span class="line"> linktocpage</span><br><span class="line">}</span><br><span class="line"><span class="comment">%  ==== 代码块样式设置 ====</span></span><br><span class="line"><span class="keyword">\usepackage</span>{listings}</span><br><span class="line"><span class="keyword">\renewcommand</span>{<span class="keyword">\ttdefault</span>}{cmtt}</span><br><span class="line"><span class="keyword">\lstdefinestyle</span>{mystyle}{</span><br><span class="line"> basicstyle=<span class="comment">%</span></span><br><span class="line"> <span class="keyword">\ttfamily</span></span><br><span class="line"> <span class="keyword">\lst@ifdisplaystyle</span><span class="keyword">\small</span><span class="keyword">\fi</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\lstset</span>{basicstyle=<span class="keyword">\ttfamily</span>,style=mystyle,breaklines=true}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\definecolor</span>{lightgrey}{rgb}{0.9,0.9,0.9}</span><br><span class="line"><span class="keyword">\definecolor</span>{frenchplum}{RGB}{190,20,83}</span><br><span class="line"><span class="keyword">\lstset</span>{language=[LaTeX]TeX,</span><br><span class="line"> texcsstyle=*<span class="keyword">\color</span>{winered},</span><br><span class="line"> numbers=none,</span><br><span class="line"> mathescape,</span><br><span class="line"> breaklines=true,</span><br><span class="line"> keywordstyle=<span class="keyword">\color</span>{winered},</span><br><span class="line"> commentstyle=<span class="keyword">\color</span>{gray},</span><br><span class="line"> emph={elegantpaper,fontenc,fontspec,xeCJK,FiraMono,xunicode,newtxmath,figure,fig,image,img,table,itemize,enumerate,newtxtext,newtxtt,ctex,microtype,description,times,booktabs,tabular,PDFLaTeX,XeLaTeX,type1cm,BibTeX,device,color,mode,lang,amsthm,tcolorbox,titlestyle,cite,ctex,listings,base,math,scheme,toc,esint,chinesefont,amsmath,bibstyle,gbt7714,natbib},</span><br><span class="line"> emphstyle={<span class="keyword">\color</span>{frenchplum}},</span><br><span class="line"> morekeywords={DeclareSymbolFont,SetSymbolFont,toprule,midrule,bottomrule,institute,version,includegraphics,setmainfont,setsansfont,setmonofont ,setCJKmainfont,setCJKsansfont,setCJKmonofont,RequirePackage,figref,tabref,email,maketitle,keywords,definecolor,extrainfo,logo,cover,subtitle,appendix,chapter,hypersetup,mainmatter,frontmatter,tableofcontents,elegantpar,heiti,kaishu,lstset,pagecolor,zhnumber,marginpar,part,equote,marginnote,bioinfo,datechange,listofchange,lvert,lastpage,songti,heiti,fangsong,setCJKfamilyfont,textbf},</span><br><span class="line"> frame=single,</span><br><span class="line"> tabsize=2,</span><br><span class="line"> rulecolor=<span class="keyword">\color</span>{structurecolor},</span><br><span class="line"> framerule=0.2pt,</span><br><span class="line"> columns=flexible,</span><br><span class="line"> <span class="comment">% backgroundcolor=\color{lightgrey}</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"><span class="comment">%  ==== frontmatter ====</span></span><br><span class="line"><span class="keyword">\title</span>{这是智朋的自定义模板}</span><br><span class="line"><span class="keyword">\author</span>{Coffeelize}</span><br><span class="line"><span class="keyword">\tableofcontents</span></span><br><span class="line"><span class="keyword">\clearpage</span></span><br><span class="line"><span class="comment">%  ====正文开始 ====</span></span><br><span class="line"><span class="comment">%  ++++ mainmatter ++++</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">\textcolor</span>{main}{<span class="keyword">\lipsum</span>[1]}</span><br><span class="line"> <span class="keyword">\textcolor</span>{second}{<span class="keyword">\zhlipsum</span>[1]}</span><br><span class="line"> <span class="keyword">\textcolor</span>{third}{<span class="keyword">\zhlipsum</span>[1]}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">\section</span>{列表环境示例}</span><br><span class="line"> <span class="keyword">\begin</span>{enumerate}</span><br><span class="line">  <span class="keyword">\item</span> first</span><br><span class="line">  <span class="keyword">\item</span> second<span class="keyword">\footnote</span>{这是一个脚注测试}</span><br><span class="line">  <span class="keyword">\item</span> third</span><br><span class="line"> <span class="keyword">\end</span>{enumerate}</span><br><span class="line"> 有序列表，参数说明如下：</span><br><span class="line"> <span class="keyword">\begin</span>{enumerate}</span><br><span class="line">  <span class="keyword">\item</span> 最大序号：用于测定文献列表中文献序号的最大宽度，如果你是10以内的参考文献，那就用9，超过10小于100那就填99.</span><br><span class="line">  <span class="keyword">\item</span> 文献序号：可选参数，用于设定该条文献在参考文献列表中的序号。</span><br><span class="line">  <span class="keyword">\item</span> 检索名：为该文献信息起的简短名称，</span><br><span class="line">  <span class="keyword">\item</span> 文献信息：就是参考文献内容了。</span><br><span class="line"> <span class="keyword">\end</span>{enumerate}</span><br><span class="line"><span class="keyword">\section</span>{图片环境示例}</span><br><span class="line"> <span class="keyword">\begin</span>{figure}</span><br><span class="line">  <span class="keyword">\includegraphics</span>{example-image-A}</span><br><span class="line">  <span class="keyword">\caption</span>{这是一张实例图片}</span><br><span class="line"> <span class="keyword">\end</span>{figure}</span><br><span class="line"><span class="keyword">\subsection</span>{这是一个二级标题}</span><br><span class="line"> <span class="keyword">\zhlipsum</span>[1-2]</span><br><span class="line"> <span class="keyword">\begin</span>{note}</span><br><span class="line">  这里其实容易出问题的是图片大学不一样怎么版，通常我的解决办法是，从一开始就把两图片的大小设置成一样的，或者通过改参数实现。关于参数如何改，多改改就用经验了！O(∩<span class="keyword">\_</span>∩)O</span><br><span class="line"> <span class="keyword">\end</span>{note}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\subsubsection</span>{这是一个三级标题}</span><br><span class="line"></span><br><span class="line">一下是一个章节的内容摘要</span><br><span class="line"><span class="keyword">\begin</span>{introduction}</span><br><span class="line"> <span class="keyword">\item</span> 参考文献</span><br><span class="line"> <span class="keyword">\item</span> 交叉引用</span><br><span class="line"> <span class="keyword">\item</span> 代码框设计</span><br><span class="line"> <span class="keyword">\item</span> 网址链接</span><br><span class="line"><span class="keyword">\end</span>{introduction}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{lstlisting}</span><br><span class="line"> <span class="keyword">\begin</span>{figure}[H]</span><br><span class="line">  <span class="keyword">\centering</span></span><br><span class="line">  <span class="keyword">\includegraphics</span>[width=0.45<span class="keyword">\linewidth</span>]{welt1.jpg}</span><br><span class="line">  <span class="comment">%插入的第一个图片</span></span><br><span class="line">  <span class="keyword">\includegraphics</span>[width=0.45<span class="keyword">\linewidth</span>]{welt.jpg}</span><br><span class="line">  <span class="comment">%插入的第二张图片</span></span><br><span class="line">  <span class="keyword">\caption</span>{紫罗兰永恒花园}</span><br><span class="line"> <span class="keyword">\end</span>{figure}</span><br><span class="line"><span class="keyword">\end</span>{lstlisting}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>{document}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="输出-PDF"><a href="#输出-PDF" class="headerlink" title="输出 PDF"></a>输出 PDF</h3><p><img data-src="https://s2.loli.net/2022/11/29/Qe8fl5rUktZPgsA.jpg" alt="智朋的Latex模板_页面_1.jpg"><br><img data-src="https://s2.loli.net/2022/11/29/TO1CaSDsVUujPWw.jpg" alt="智朋的Latex模板_页面_2.jpg"><br><img data-src="https://s2.loli.net/2022/11/29/hN89YOEx2byU57R.jpg" alt="智朋的Latex模板_页面_3.jpg"><br><img data-src="https://s2.loli.net/2022/11/29/iLmZTFwzoeRjvhA.jpg" alt="智朋的Latex模板_页面_4.jpg"></p>
<h3 id="coffeelize-sty"><a href="#coffeelize-sty" class="headerlink" title="coffeelize.sty"></a>coffeelize.sty</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">%  ====目录章节设置 ====</span><br><span class="line">\usepackage[center,pagestyles]{titlesec}</span><br><span class="line">\usepackage{apptools}</span><br><span class="line">\usepackage[toc,page,title,titletoc]{appendix}</span><br><span class="line">\setcounter{secnumdepth}{5}</span><br><span class="line">%  ++++章节标题格式设置++++</span><br><span class="line">\titleformat{\section}[hang]{\bfseries}{</span><br><span class="line"> \Large\bfseries{\color{structurecolor}\thesection}\enspace}{1pt}{%</span><br><span class="line"> \color{structurecolor}\Large\bfseries\filright}</span><br><span class="line">\titleformat{\subsection}[hang]{\bfseries}{</span><br><span class="line"> \large\bfseries\color{structurecolor}\thesubsection\enspace}{1pt}{%</span><br><span class="line"> \color{structurecolor}\large\bfseries\filright}</span><br><span class="line">\titleformat{\subsubsection}[hang]{\bfseries}{</span><br><span class="line"> \large\bfseries\color{structurecolor}\thesubsubsection\enspace}{1pt}{%</span><br><span class="line"> \color{structurecolor}\large\bfseries\filright}</span><br><span class="line">% ====常用宏包====</span><br><span class="line">\RequirePackage{makecell,lipsum,hologo,setspace}</span><br><span class="line">\RequirePackage{booktabs}</span><br><span class="line">\RequirePackage{multicol,multirow}</span><br><span class="line">% ++++插入图片设置++++</span><br><span class="line">\usepackage{graphics}</span><br><span class="line">\graphicspath{{./figure/}{./figures/}{./image/}{./images/}{./graphics/}{./graphic/}{./pictures/}{./picture/}}</span><br><span class="line">% ++++数学字体宏包++++</span><br><span class="line">\usepackage{amsmath,mathrsfs,amsfonts,amssymb}</span><br><span class="line">% ====行间距设置====</span><br><span class="line">\linespread{1.3}</span><br><span class="line">\renewcommand{\baselinestretch}{1.35} </span><br><span class="line">% ====脚注环境设置====</span><br><span class="line">\AtBeginDocument{</span><br><span class="line"> \setlength{\abovedisplayskip}{3pt}</span><br><span class="line"> \setlength{\belowdisplayskip}{3pt}</span><br><span class="line"> \RequirePackage[flushmargin,stable]{footmisc}</span><br><span class="line"> \setlength{\footnotesep}{12pt}</span><br><span class="line">}</span><br><span class="line">% ====设置列表环境====</span><br><span class="line">\usepackage{enumerate}</span><br><span class="line">\usepackage[shortlabels,inline]{enumitem}</span><br><span class="line">% ====颜色设置====</span><br><span class="line">\usepackage{xcolor}</span><br><span class="line">\definecolor{structurecolor}{RGB}{0,120,2}</span><br><span class="line">\definecolor{main}{RGB}{0,120,2}%</span><br><span class="line">\definecolor{second}{RGB}{230,90,7}%</span><br><span class="line">\definecolor{third}{RGB}{0,160,152}%</span><br><span class="line">% ++++设置超链接的颜色++++</span><br><span class="line">\definecolor{winered}{rgb}{0.5,0,0}</span><br><span class="line">% ++++设置浮动体的某些主题色++++</span><br><span class="line">\usepackage[font=small,labelfont={bf,color=structurecolor}]{caption} </span><br><span class="line">\captionsetup[table]{skip=3pt}</span><br><span class="line">\captionsetup[figure]{skip=3pt}</span><br><span class="line">% ====假文宏包====</span><br><span class="line">\usepackage{zhlipsum}</span><br><span class="line">\usepackage{lipsum}</span><br><span class="line">% ====字体设置====</span><br><span class="line">\usepackage{xeCJK}</span><br><span class="line">\setmainfont{Times New Roman}</span><br><span class="line"></span><br><span class="line">%  ====设置页边距 ====</span><br><span class="line">\usepackage{geometry}</span><br><span class="line">\geometry{</span><br><span class="line"> a4paper,</span><br><span class="line"> top=25.4mm, bottom=25.4mm,</span><br><span class="line"> headheight=2.17cm,</span><br><span class="line"> headsep=4mm,</span><br><span class="line"> footskip=12mm</span><br><span class="line">}</span><br><span class="line">%  ====设置参考文献格式 ====</span><br><span class="line">\usepackage[sort&amp;compress]{natbib}</span><br><span class="line">\setlength{\bibsep}{0.0pt}</span><br><span class="line">\def\bibfont{\footnotesize}</span><br><span class="line">%  ====设置页眉页脚 ====</span><br><span class="line">\usepackage{fancyhdr}</span><br><span class="line">\fancyhf{}</span><br><span class="line">\fancyfoot[c]{\color{structurecolor}\scriptsize\thepage}</span><br><span class="line">\newcommand{\citshape}{\kaishu}</span><br><span class="line">\fancyhead[R]{\color{structurecolor}--\;\thepage\;--}</span><br><span class="line">%\fancyhead[L]{\color{structurecolor}\citshape\rightmark}</span><br><span class="line">%  ++++ 设置页眉页脚 ++++</span><br><span class="line">\renewcommand{\headrule}{\color{structurecolor}\hrule width\textwidth}</span><br><span class="line">\pagestyle{fancy}</span><br><span class="line">\renewcommand{\headrulewidth}{1pt}</span><br><span class="line">% \renewcommand{\headrule}{}</span><br><span class="line">\fancypagestyle{plain}{\renewcommand{\headrulewidth}{0pt}\fancyhf{}\renewcommand{\headrule}{}}</span><br><span class="line">\renewcommand{\sectionmark}[1]{\markright{\thesection\, #1}{} }</span><br><span class="line">%\renewcommand{\chaptermark}[1]{\markboth{\chaptername \, #1\,}{}}</span><br><span class="line">%  ====设置公式环境 ====</span><br><span class="line">\numberwithin{equation}{section}</span><br><span class="line">%  ====自定义环境====</span><br><span class="line">%  +++++note环境+++++</span><br><span class="line">\newcommand{\notename}{笔记}</span><br><span class="line">\usepackage{bbding,manfnt} % 一些图标，如 \dbend</span><br><span class="line">\newenvironment{note}{</span><br><span class="line"> \par\noindent\makebox[-3pt][r]{</span><br><span class="line">  \scriptsize\color{red!90}\textdbend\quad}</span><br><span class="line"> \textbf{\color{second}\notename} \citshape}{\par}</span><br><span class="line">%  +++++introduction环境+++++</span><br><span class="line">\newcommand{\introductionname}{内容提要}</span><br><span class="line">\usepackage{multicol}</span><br><span class="line">\usepackage[most]{tcolorbox}</span><br><span class="line">\tcbset{</span><br><span class="line"> introductionsty/.style={</span><br><span class="line">  enhanced,</span><br><span class="line">  breakable,</span><br><span class="line">  colback=structurecolor!10,</span><br><span class="line">  colframe=structurecolor,</span><br><span class="line">  fonttitle=\bfseries,</span><br><span class="line">  colbacktitle=structurecolor,</span><br><span class="line">  fontupper=\citshape,</span><br><span class="line">  attach boxed title to top center={yshift=-3mm,yshifttext=-1mm},</span><br><span class="line">  boxrule=0pt,</span><br><span class="line">  toprule=0.5pt,</span><br><span class="line">  bottomrule=0.5pt,</span><br><span class="line">  top=8pt,</span><br><span class="line">  before skip=8pt,</span><br><span class="line">  sharp corners</span><br><span class="line"> },</span><br><span class="line">}</span><br><span class="line">\newenvironment{introduction}[1][\introductionname]{</span><br><span class="line"> \begin{tcolorbox}[introductionsty,title={#1}]</span><br><span class="line">  \begin{multicols}{2}</span><br><span class="line">   \begin{itemize}[label=\textcolor{structurecolor}{\upshape\scriptsize\SquareShadowBottomRight}]}{</span><br><span class="line">   \end{itemize}</span><br><span class="line">  \end{multicols}</span><br><span class="line">\end{tcolorbox}}</span><br><span class="line">%  ====浮动体环境设置：自动居中小一号字====</span><br><span class="line">\usepackage{xpatch}</span><br><span class="line">\makeatletter</span><br><span class="line">\xpatchcmd\@floatboxreset{\normalsize}{\centering\small}{}{}</span><br><span class="line">\makeatother</span><br><span class="line">%  ====文档超链接设置 ====</span><br><span class="line">\usepackage{hyperref}</span><br><span class="line">\hypersetup{</span><br><span class="line"> breaklinks,</span><br><span class="line"> unicode,</span><br><span class="line"> linktoc=all,</span><br><span class="line"> bookmarksnumbered=true,</span><br><span class="line"> bookmarksopen=true,</span><br><span class="line"> pdfkeywords={Coffeelize},</span><br><span class="line"> colorlinks,</span><br><span class="line"> linkcolor=winered,</span><br><span class="line"> citecolor=winered,</span><br><span class="line"> urlcolor=winered,</span><br><span class="line"> plainpages=false,</span><br><span class="line"> pdfstartview=FitH,</span><br><span class="line"> pdfborder={0 0 0},</span><br><span class="line"> linktocpage</span><br><span class="line">}</span><br><span class="line">%  ====代码块样式设置====</span><br><span class="line">\usepackage{listings}</span><br><span class="line">\renewcommand{\ttdefault}{cmtt}</span><br><span class="line">\lstdefinestyle{mystyle}{</span><br><span class="line"> basicstyle=%</span><br><span class="line"> \ttfamily</span><br><span class="line"> \lst@ifdisplaystyle\small\fi</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">\lstset{basicstyle=\ttfamily,style=mystyle,breaklines=true}</span><br><span class="line"></span><br><span class="line">\definecolor{lightgrey}{rgb}{0.9,0.9,0.9}</span><br><span class="line">\definecolor{frenchplum}{RGB}{190,20,83}</span><br><span class="line">\lstset{language=[LaTeX]TeX,</span><br><span class="line"> texcsstyle=*\color{winered},</span><br><span class="line"> numbers=none,</span><br><span class="line"> mathescape,</span><br><span class="line"> breaklines=true,</span><br><span class="line"> keywordstyle=\color{winered},</span><br><span class="line"> commentstyle=\color{gray},</span><br><span class="line"> emph={elegantpaper,fontenc,fontspec,xeCJK,FiraMono,xunicode,newtxmath,figure,fig,image,img,table,itemize,enumerate,newtxtext,newtxtt,ctex,microtype,description,times,booktabs,tabular,PDFLaTeX,XeLaTeX,type1cm,BibTeX,device,color,mode,lang,amsthm,tcolorbox,titlestyle,cite,ctex,listings,base,math,scheme,toc,esint,chinesefont,amsmath,bibstyle,gbt7714,natbib},</span><br><span class="line"> emphstyle={\color{frenchplum}},</span><br><span class="line"> morekeywords={DeclareSymbolFont,SetSymbolFont,toprule,midrule,bottomrule,institute,version,includegraphics,setmainfont,setsansfont,setmonofont ,setCJKmainfont,setCJKsansfont,setCJKmonofont,RequirePackage,figref,tabref,email,maketitle,keywords,definecolor,extrainfo,logo,cover,subtitle,appendix,chapter,hypersetup,mainmatter,frontmatter,tableofcontents,elegantpar,heiti,kaishu,lstset,pagecolor,zhnumber,marginpar,part,equote,marginnote,bioinfo,datechange,listofchange,lvert,lastpage,songti,heiti,fangsong,setCJKfamilyfont,textbf},</span><br><span class="line"> frame=single,</span><br><span class="line"> tabsize=2,</span><br><span class="line"> rulecolor=\color{structurecolor},</span><br><span class="line"> framerule=0.2pt,</span><br><span class="line"> columns=flexible,</span><br><span class="line"> % backgroundcolor=\color{lightgrey}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Java-代码高亮"><a href="#Java-代码高亮" class="headerlink" title="Java 代码高亮"></a>Java 代码高亮</h3><p>参考资料：<a href="https://tex.stackexchange.com/questions/115467/listings-highlight-java-annotations#:~:text=You%20can%20use%20the%20option,all%20words%20starting%20with%20%40%20">Listings Highlight Java Annotations - TeX - LaTeX Stack Exchange</a></p>
<p>将以下代码添加到 coffeelize.sty 文件末尾即可</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">%%% Java代码高亮</span><br><span class="line">\usepackage[T1]{fontenc}</span><br><span class="line">\usepackage{inconsolata}</span><br><span class="line">\definecolor{pblue}{rgb}{0.13,0.13,1}</span><br><span class="line">\definecolor{pgreen}{rgb}{0,0.5,0}</span><br><span class="line">\definecolor{pred}{rgb}{0.9,0,0}</span><br><span class="line">\definecolor{pgrey}{rgb}{0.46,0.45,0.48}</span><br><span class="line">\lstset{language=Java,</span><br><span class="line"> showspaces=false,</span><br><span class="line"> showtabs=false,</span><br><span class="line"> breaklines=true,</span><br><span class="line"> showstringspaces=false,</span><br><span class="line"> breakatwhitespace=true,</span><br><span class="line"> commentstyle=\color{pgreen},</span><br><span class="line"> keywordstyle=\color{pblue},</span><br><span class="line"> stringstyle=\color{pred},</span><br><span class="line"> basicstyle=\ttfamily,</span><br><span class="line"> moredelim=[il][\textcolor{pgrey}]{$$},</span><br><span class="line"> moredelim=[is][\textcolor{pgrey}]{\%\%}{\%\%}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">\begin{lstlisting}</span><br><span class="line"> class Solution {</span><br><span class="line">  public int removeElement(int[] nums, int val) {</span><br><span class="line">   int slow = 0;</span><br><span class="line">   int fast = 0;</span><br><span class="line">   for (fast = 0; fast &lt; nums.length; fast++) {</span><br><span class="line">    //快指针指向的不是目标元素</span><br><span class="line">    if (nums[fast] != val) {</span><br><span class="line">     // 1、将快指针指向的元素赋值给慢指针位置</span><br><span class="line">     // 2、赋值完成后，slow++，慢指针向前移动一个位置</span><br><span class="line">     nums[slow++] = nums[fast];</span><br><span class="line">    }</span><br><span class="line">   }</span><br><span class="line">   return slow;</span><br><span class="line">  }</span><br><span class="line"> }</span><br><span class="line">\end{lstlisting}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2023/05/18/FPNauj9pWV1csXQ.png" alt="06-Java语法高亮.png"></p>
]]></content>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/posts/regular-expression.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>正则表达式在线学习网址：<a href="https://regexlearn-com.vercel.app/zh">正则表达式学习 - 逐步从零基础到高阶。</a></li>
<li>Github：<a href="https://github.com/aykutkardas/regexlearn.com">GitHub - aykutkardas/regexlearn.com: Learn RegEx step by step, from zero to advanced.</a></li>
<li> 菜鸟教程：<a href="https://www.runoob.com/regexp/regexp-example.html">正则表达式 – 示例 | 菜鸟教程</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>残余应力</title>
    <url>/posts/Residual-stresses.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.bilibili.com/video/BV16w411G7nJ/?spm_id_from=333.337.search-card.all.click&amp;vd_source=3ae7ae95fa254383ab9ae83f75abd29d">残余应力如何消除？说一说残余应力消除技术_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1yc411o7aH/?spm_id_from=333.337.search-card.all.click&amp;vd_source=3ae7ae95fa254383ab9ae83f75abd29d">简述什么是残余内应力_哔哩哔哩_bilibili</a></li>
</ul>
<h3 id="残余应力的概念"><a href="#残余应力的概念" class="headerlink" title="残余应力的概念"></a>残余应力的概念</h3><p>在无外力或外力矩的作用下，存在于材料内部，且达到自平衡状态的力。</p>
<p>从微观上看，残余应力的本质是晶格畸变，以 “畸变能” 到形式存在于材料内部。</p>
<p>这些能量不会随着加工过程中能量的交换或材料的变形与剥离而全部消散掉，其中一部分转换为势能，以残余应力及形变的形式存储在介质中。<br>一旦原有的平衡被打破，上述势能中的一部分转化为残余应力作用下发生形变所作的功，使工件整体进入新的平衡，从而造成各加工环节中由残余应力引起的不同程度的加工变形。</p>
<h3 id="残余应力的影响"><a href="#残余应力的影响" class="headerlink" title="残余应力的影响"></a>残余应力的影响</h3><p>残余应力是零件质量性能的关键指标，直接影响零件的加工精度、尺寸稳定性、腐蚀开裂、疲劳强度以及使用寿命等性能。</p>
<p>—&gt; 为使零件达到良好的质量状态，应对其残余应力加以控制和利用：</p>
<ul>
<li>对过高的残余应力进行消除；</li>
<li>对不均匀的残余应力进行均化处理；</li>
<li>对有特殊要求的零件进行表面强化，引入压应力。</li>
</ul>
<h3 id="残余应力消除的主要方法"><a href="#残余应力消除的主要方法" class="headerlink" title="残余应力消除的主要方法"></a>残余应力消除的主要方法</h3><h4 id="自然实效"><a href="#自然实效" class="headerlink" title="自然实效"></a>自然实效</h4><p>把工件露天放置于室外，经过几个月至几年的风吹、日晒、雨淋和季节的温度变化，给工件多次造成反复的温度应力，促使残余应力发生松弛，获得稳定的状态。</p>
<ul>
<li>特点：处理简单、进程缓慢</li>
<li>应用：<ul>
<li>结构或尺寸特殊的工件或原材料应用多</li>
<li>在加工过程中也有应用（装夹下，减少卸除夹具后的变形量）</li>
</ul>
</li>
</ul>
<h4 id="热实效"><a href="#热实效" class="headerlink" title="热实效"></a>热实效</h4><p>热实效是把工件放进热实效炉中进行热处理，由室温缓慢均匀加热至一定温度，保温一段时间后，再严格控制降温速度最终出炉。</p>
<p>热实效主要是利用材料在高温状态下，原子活动能力增强，而材料的屈服强度降低的特点，促进位错开动和原子回复，使得晶格畸变得到消除，残余应力得到消除。</p>
<p>典型应用为去应力退火，将材料加热至再结晶温度以下，保温一定时间后再缓慢冷却，以达到消除材料内部残余内应力的效果。（注意：材料热实效的工艺参数，可通过相关材料手册的热处理制度查得。由于材料成分、加工方法、内应力大小和分布不同，去应力退火的温度范围很广）</p>
<p>应用：热锻轧、铸造、各种冷变形加工、切削、焊接、热处理，甚至零部件装配后，都可以在不改变组织状态、保留冷作、热作或者表面硬化的条件下，加热到一定温度去除构件的内应力。</p>
<ul>
<li>优点：<ul>
<li>对于大多数材料能取得较好的效果，工程上有广泛、成熟的应用</li>
</ul>
</li>
<li>缺点：<ul>
<li>去应力效果与温度相关性大，温度影响材料组织和力学性能，处理过程中可能产生：氧化烧损、相变析出、热变形等情况</li>
<li>对于大型构件难以适用</li>
<li>能耗高</li>
</ul>
</li>
</ul>
<h4 id="振动时效"><a href="#振动时效" class="headerlink" title="振动时效"></a>振动时效</h4><p>工程材料常用的一种消除内部残余应力的方法，通过振动，使材料发生微量的塑性变形，从而使材料内部的应力得以松弛。分为亚共振实效、模态宽屏实效、频谱谐波实效、频谱谐波定位实效等方式。</p>
<p>以振动的形式给工件施加动应力，当动应力与工件残余应力叠加后，达到或超过材料的屈服极限时，工件发生微观或宏观塑性变形，从而使工件内部的残余应力得以松弛。</p>
<p>振动时效能够在一些场景下取代热实效。同时由于振动时效的机理与热实效不同，因此它也能够在热实效之后再次应用，并达到进一步消除残余应力的效果。</p>
<h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ul>
<li>机械拉伸发</li>
<li>爆炸法</li>
<li>超声冲击法</li>
</ul>
<p><img data-src="https://coffeelize-1307708315.cos.ap-beijing.myqcloud.com/20240618181955.png" alt="image.png"></p>
]]></content>
      <tags>
        <tag>mechanic</tag>
      </tags>
  </entry>
  <entry>
    <title>经验分享</title>
    <url>/posts/Research-Experience-Sharing.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="谷歌学术"><a href="#谷歌学术" class="headerlink" title="谷歌学术"></a>谷歌学术</h3><ul>
<li>站在巨人的肩膀上 &amp; 纯粹的学术网站</li>
<li>摘要甚至全文检索 —&gt; No.1</li>
<li> 邮件订阅领域作者 —&gt; 获取作者 / 文献引用最新进展</li>
<li> BibTeX 引用文献导出 —&gt; LaTeX 参考文献数据库</li>
</ul>
<p>检索词对比：<a href="https://www.cnki.net/#/">知网</a> | <a href="https://scholar.google.com.hk/?hl=zh-CN">Google 学术搜索</a></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Photovoltaic module recycling</span><br><span class="line">End-of-life</span><br><span class="line">Silicon PV modules</span><br><span class="line">Physical Recovery</span><br><span class="line">Low temperatures</span><br><span class="line">Aluminum back field</span><br><span class="line"></span><br><span class="line">青海省科技厅应用基础研究项目(2022-ZJ-768)</span><br><span class="line">西宁市科技计划项目(2021-Y-01)</span><br><span class="line"></span><br><span class="line">一种微晶多孔泡沫玻璃管的制备方法</span><br></pre></td></tr></tbody></table></figure>

<p>知网补充：</p>
<ul>
<li>基金号检索 —&gt; 相关主题</li>
<li>专利检索 —&gt; 开启搜索开关</li>
</ul>
<h3 id="谷歌专利"><a href="#谷歌专利" class="headerlink" title="谷歌专利"></a>谷歌专利</h3><ul>
<li><a href="https://patents.google.com/">Google Patents</a>：Search and read the <strong>full text of patents</strong> from around the world</li>
<li> 专利免费下载，PDF 格式</li>
<li>数据统计功能 </li>
</ul>
<p><img data-src="https://s2.loli.net/2023/10/14/5jBZ9fhWi4XyYkR.png" alt="image.png"></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">泡沫玻璃 制备</span><br><span class="line">光伏组件回收</span><br></pre></td></tr></tbody></table></figure>

<h3 id="文献管理"><a href="#文献管理" class="headerlink" title="文献管理"></a>文献管理</h3><p>Zotero：<a href="https://www.zotero.org/">Zotero | Your personal research assistant</a></p>
<ul>
<li> 开源 —&gt; 免费</li>
<li>流畅 —&gt; 不卡顿</li>
<li>可通过 Webdev 同步 —— 配置第三方云 ——&gt; 多端同步</li>
<li> Word 插件 —&gt; 插入文献<ul>
<li>引用文献编号问题</li>
</ul>
</li>
<li>浏览器插件 —&gt; 抓取文献<ul>
<li>抓取文献问题</li>
</ul>
</li>
<li>软件插件 —&gt; 丰富功能，例如 <a href="https://github.com/l0o0/jasminum">GitHub - l0o0/jasminum: A Zotero add-on to retrive CNKI meta data. 一个简单的 Zotero 插件，用于识别中文元数据</a></li>
<li>参考资料：<a href="https://coffeelize.top/posts/a6f9f7b7.html">Zotero 学习笔记 | 智朋的个人博客</a></li>
<li>拓展资料：<a href="https://zotero-chinese.com/">Zotero 中文小组 | Zotero 中文小组</a></li>
</ul>
<h3 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h3><h4 id="Figma-Sketch"><a href="#Figma-Sketch" class="headerlink" title="Figma / Sketch"></a>Figma / Sketch</h4><ul>
<li>定位：专业的前端美工绘图工具</li>
<li>矢量绘图 —&gt; 高清晰度示意图</li>
<li>图层管理 —&gt; 复杂绘图</li>
<li>插件丰富 —&gt; 丰富功能</li>
<li>参考资料：<a href="https://coffeelize.top/posts/82ded38b.html">sketch 绘图指南 | 智朋的个人博客</a></li>
</ul>
<h4 id="Visio"><a href="#Visio" class="headerlink" title="Visio"></a>Visio</h4><ul>
<li>排版布局组图方便</li>
<li>修改方便</li>
<li>微软套件，嵌入 Word 方便</li>
<li>导出高清图方法</li>
<li>参考资料：<a href="https://coffeelize.top/posts/659137c6.html">Visio 学习笔记 | 智朋的个人博客</a></li>
</ul>
<h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h3><ul>
<li>参考资料：<a href="https://coffeelize.top/posts/a9e583b4.html">LaTeX 相关资源汇总 | 智朋的个人博客</a></li>
</ul>
<h3 id="拓展资料"><a href="#拓展资料" class="headerlink" title="拓展资料"></a>拓展资料</h3><ul>
<li>Github：<a href="https://github.com/pengsida/learning_research">GitHub - pengsida/learning_research: 本人的科研经验</a></li>
<li> CSDN：<a href="https://blog.csdn.net/tmb8z9vdm66wh68vx1/article/details/103675995">PhD 养成记 | 于歆杰：如何有效获取、归档和阅读文献_数据派 THU-CSDN 博客</a></li>
<li> Github：<a href="https://github.com/shengyp/doing_the_PhD">GitHub - shengyp/doing_the_PhD</a></li>
</ul>
]]></content>
      <categories>
        <category>Research</category>
      </categories>
      <tags>
        <tag>Research</tag>
      </tags>
  </entry>
  <entry>
    <title>通过 thebibliography 环境处理参考文献</title>
    <url>/posts/Processing-references-through-thebibliography-environment.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>{thebibliography}{widest label}</span><br><span class="line"> <span class="comment">%\bibitem[item number]{citation}...</span></span><br><span class="line"> <span class="keyword">\bibitem</span>[1]{citation}参考文献内容</span><br><span class="line"> <span class="comment">%\bibitem[2]{...}...</span></span><br><span class="line"><span class="keyword">\end</span>{thebibliography}</span><br></pre></td></tr></tbody></table></figure>

<p>参数说明</p>
<ul>
<li>widest label ：参考文献序号的最大宽度。添加参考文献数量的一个宽度，当有两位数的参考文献时可以使用任意的两位数（比如文献小于 100 篇时，可以使用 99、10 等任意两位数字，习惯写 99）；超过 100 时，则任意填写一个三位数</li>
<li> item number ：可选参数，该条目的序号，如果省略，则按自然排序给定序号</li>
<li> citation ：与 <code>\cite{}</code> 命令中的标签匹配。和图、表环境中所使用的 <code>\label</code> 作用相同</li>
</ul>
<h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> text text text text text text text<span class="keyword">\cite</span>{ref1} text text text text text text text text text text text text text text text text text text text text text text text<span class="keyword">\cite</span>{Coffeelize} text text text text text text text text text text text text text text text text text text text<span class="keyword">\cite</span>{02} text text text text text text text text text text text text text text text text text text text text text text </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\begin</span>{thebibliography}{99} <span class="comment">%　添加参考文献数量的一个宽度，当有两位数的参考文献时可以使用任意的两位数；超过100时，则任意填写一个三位数</span></span><br><span class="line">  <span class="keyword">\bibitem</span>{ref1}KOVACIC I, BRENNAN M J, WATERS T P. A study of a nonlinear vibration isolator with a quasi-zero stiffness characteristic[J]. Journal of Sound and Vibration, 2008,315(3)：700-711.</span><br><span class="line">  <span class="keyword">\bibitem</span>{02}CARRELLA A, BRENNAN M J, WATERS T P. Static analysis of a passive vibration isolator with quasi-zero-stiffness characteristic[J]. Journal of Sound and Vibration, 2007, 301(3)：678-689.</span><br><span class="line">  <span class="keyword">\bibitem</span>{Coffeelize}这里是智朋的个人博客：<span class="keyword">\verb</span>|<span class="string">https://coffeelize.top</span>|</span><br><span class="line"> <span class="keyword">\end</span>{thebibliography}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/07/14/AdlFfsptjXHVW8b.png" alt="01-thebibliography环境插入参考文献.png"></p>
<p>查看 tex 原文件和输出的 PDF 可知</p>
<ol>
<li>该示例中使用的是 article（ctexart）文档类，thebibliography 环境生成不带编号的一节或一章（report、book 文档类）</li>
<li>尽管文献 3 插入在文献 2 的前面，但是其编号是按照 bibitem 的顺序自动排序的，而不是按照文献的插入顺序进行排序的</li>
<li>输出的参考文献列表中：并没有出现期刊名斜体，卷期号什么加粗，如果需要调整格式，需要在 tex 中手动调整╮(╯▽╰)╭</li>
</ol>
<h3 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h3><p>在 article 文档类中的节标题为 “Reference”，而在 report、book 等文档类中章节标题默认为 “Bibliography”</p>
<p>ctexart、ctexbook 等文档类对中文进行了适配，节标题均为 “参考文献”（如上图所示）</p>
<h3 id="上角标编号"><a href="#上角标编号" class="headerlink" title="上角标编号"></a>上角标编号</h3><p>Q：想一想，在 word 中，将 <code>[1]</code> 转变为上角标的 <code>[1]</code> 需要几步？<br>A：一步，选中 <code>[1]</code>，点击一下 “上标” 即可</p>
<p><img data-src="https://s2.loli.net/2022/07/14/HeFD7ECBoP1bJ6t.png" alt="01-Word中编号设置为上标.png"></p>
<p>在 LaTeX 中同样如此，即将原来的 “cite 命令” 和 “上标命令” 封装一下</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\upcite</span>}[1]{<span class="keyword">\textsuperscript</span>{<span class="keyword">\cite</span>{<span class="params">#1</span>}}} </span><br></pre></td></tr></tbody></table></figure>

<p>通过在导言区添加如上命令，需要添加引用的时候直接使用 <code>\upcite</code> 命令即可</p>
<figure class="highlight tex"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>{ctexart}</span><br><span class="line"><span class="keyword">\newcommand</span>{<span class="keyword">\upcite</span>}[1]{<span class="keyword">\textsuperscript</span>{<span class="keyword">\cite</span>{<span class="params">#1</span>}}} </span><br><span class="line"><span class="keyword">\begin</span>{document}</span><br><span class="line"> <span class="keyword">\begin</span>{itemize}</span><br><span class="line">  <span class="keyword">\item</span> 参考文献非上标编号<span class="keyword">\cite</span>{ref1}</span><br><span class="line">  <span class="keyword">\item</span> 参考文献上标编号<span class="keyword">\upcite</span>{Coffeelize}</span><br><span class="line"> <span class="keyword">\end</span>{itemize}</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">\begin</span>{thebibliography}{9}</span><br><span class="line">  <span class="keyword">\bibitem</span>{ref1}参考文献1</span><br><span class="line">  <span class="keyword">\bibitem</span>{Coffeelize}这里是智朋的个人博客</span><br><span class="line"> <span class="keyword">\end</span>{thebibliography}</span><br><span class="line"><span class="keyword">\end</span>{document}</span><br></pre></td></tr></tbody></table></figure>

<p><img data-src="https://s2.loli.net/2022/07/14/ahEjiuNzfSQnPey.png" alt="03-LaTeX参考文献上标标注.png"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li>LaTeX 工作室：<a href="https://www.latexstudio.net/index/details/index/mid/753.html">LaTeX 的参考文献处理</a></li>
<li> Bilibili：<a href="https://www.bilibili.com/video/BV1m64y1c7ZP?spm_id_from=333.337.search-card.all.click">LaTeX 直播之四 - LaTeX 参考文献自动化处理</a></li>
<li> LaTeX 官方入门手册：一份（不太）简短的 LaTeX2ε 介绍</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>给研究生的一些忠告</title>
    <url>/posts/Some-advice-for-graduate-students.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，密码输入错误" data-whm="抱歉，当前文章不能被校验">
  <script id="hbeData" type="hbeData" data-hmacdigest="f1f61bd165a8511c7c2b738f043cb291b0f77268413a0ef29025f16d819480c7">49f5d397cca217f02652b83d3a829717bc8084ad49a11604c9d054863110b6901c6ce12a7e52e99859285f45e3576fde1137dfa06cacb224e727396655765e622ca15b44b58f496861057bba4d8f73381cbd9c65da88c4509d92e7074a2e67c4e97c88512d49913ff5e551244ba159e3bb360071252cd6c7acbea616a3f89a079fc06a8f5ac7562017fa8f91b22561498757de6df00f2f49b8e49e37806b2a1c3651f7da68c7dd509590a933c0dc57e90b52122626a4f52acef19f88dfc1de5e989d6f2bb6c8376525abd9f07c39728531cd793a353d6483bcbe65a9fd17d1b965e3081f743178de784325fbe6cddc529f6e5f6e3ad27823abca17141dbec885b631e650bfc37f321fbd2a16129e7504e3bba1b71f22b46047ec8613e944294c4c673a262eaf212c8b5e10184e084d24ed3696da8b535f7c13b78829e1c47bebe3a2d5ecd68e4c8562d1da9476c70182a1b4394aa5db97dcbf78711f71fdd7166d06460e1acf9e3226b36a5a095e542eec522adb4197376096db1d8e06331b8ce517973e647e07e74ec1a88de5aa20533c45d0c4a6c021fec72848a8a7ed55843f56555e5c2476ed8bde011b24068ae3d97f2c7b15faaddf5c33e645d4a3abfbadd519fae1b8b1406f7947538f7efde43a0f39bf05c493517c1d82a507e73bda4d35e539a62d5a320688b3ea63dd1e8000e807573abac1b9d7fd9d4532f629bedcf446e10dd90828829267b78ab4ee0a7e1559294d8ef33c81c1855625e17d9e5534879b4a5f2bee943a8b23ca24a95f0dd8ab41e72df2c82341108d75578e1cef68753e5923b76ebf743f0380b60dd19cef61db6d82d6a4a1bdffec15c438367120156b7601cecc92ad26c62adc51bf9553442306c94335710bfc75af79799e7e4671fc94ab6ddb547af3dcf42a53648d44ab10749ccf2197c6b1c1d9a915691b07c6e56a0005368570d3ec4afb0cb00d0270603985280d4ad8648ef2cbec705140793e266cc71a65c08241660d94754c3e83d6fe6d834b009a5d68f4a7e1bba7f9eb79a6ad817b2751ff40b325a7c9efe284e91ab14575bb0cdcd164096f6edfc212e7f7f3e82423fd189a62743bd3d0b9cf911b34da9d7a2963529b43349ee2a293a7e9e501f25b52df748d0e66e68086969845c5e137a3553daa15daba1fd5f9b93616f16e701acad4e7635ba5ba79ef64db81d76d31a15b5505de60d23a3b0ac0a79851e3dd1804def9b6b2d6748fe83c1f41eb7b01f06f6fb76f50e470dcde875fa4ca347dd7bea02d63ab95d3fc0b144d3c1af9d12d0e9bd7ccdd0453fc69af1c7a7585b51b60d3c7eeaa7346516fb819400d3c62d4d421f98cd30b57903634eb44fd5dcd2985589ca77e0041613601b25bb41775abe0e55e2bafcc8322fca24cdf6e23e303baab7299b453da6ce25998d53eb01244f374b46f4659ba8829c8d014f865cc584d9b4fb89a5e178e25ff1ead0f98c0e08c58c6cc7c828d77641f7de6ca118aca29d1c9b3055bb621b5b27a3d98d3f20d74fc99ed239ffc4b37905ecd992c36e24fd4c22b5547e6a8bb42bcc2c801f27a0d59cbf0539de27993115486c8683271efc7938b8dfdae8e6e7db3755693d31b55645dfdfc7f4e1d556c016e111448f59b7855889b22089fcbdee2692adde751f875f75f8988f3956ded12bbce972ec1e1857c8513e871e223d5278d8f15c22732d8459619d825f83c78799b126b297971e58bea1e2f5fa9856f3774d52cf489d2e15ac8f2d0fd9f7922b7c66c4ed3d7819919f9e0a75048afebdc78af462a285e19b93652174cad19970a2f1839f63cf06a509b1e34d6398b92e115f0a05178ce273b52d312b4a17822034974cb1efe65098cd015f995b1d5a86425f98e1fa298c04f67c09e66704a1b95339fe7c7bb29875ac4cf73bab7f8b3816ff6d62ec5d5ac82e3518ab4ee43ce9f674aa387027960b6f520233eea3dbe0cacbd40002cf53f207274c553</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，见谅！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Research</category>
      </categories>
      <tags>
        <tag>coffeelize</tag>
      </tags>
  </entry>
  <entry>
    <title>论文投稿时间节点记录</title>
    <url>/posts/Record-of-time-points-for-thesis-submission.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，密码输入错误" data-whm="抱歉，当前文章不能被校验">
  <script id="hbeData" type="hbeData" data-hmacdigest="320603d776d58492d7ba4f2d821588ddd6ba01d397a7b472e5fa5882fc3f32e6"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，见谅！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Research</category>
      </categories>
      <tags>
        <tag>coffeelize</tag>
      </tags>
  </entry>
  <entry>
    <title>期刊审稿催稿信</title>
    <url>/posts/Reminder-letter-for-journal-review.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://zhuanlan.zhihu.com/p/88821975">审稿时间过长，怎么催？ - 知乎</a></li>
</ul>
<h3 id="催稿信"><a href="#催稿信" class="headerlink" title="催稿信"></a>催稿信</h3><p>Dear Editor,</p>
<p>I write concerning the progress of our paper. It was initially submitted on May 13, 2023 and was assigned the manuscript number: xxxx. Now I am worrying about whether it still works normally because the submission has been kept “Under Review” for about two months, as showed on editorial manager. Would you mind checking on the progress of it for me? Your reply would be highly appreciated.</p>
<p>Thanks very much for your attention to our paper.</p>
<p>Best Regards.</p>
<p>Yours sincerely,<br>xxxx</p>
<h3 id="修订稿催稿信"><a href="#修订稿催稿信" class="headerlink" title="修订稿催稿信"></a>修订稿催稿信</h3><p>Dear Editor,</p>
<p>I apologize for the inconvenience. I am a graduating master’s student with the intention of pursuing a Ph.D. However, I am concerned about this, as I require another accepted or published paper to strengthen my Ph.D. application. Regarding my revised manuscript with the manuscript number xx-xxxx, which was submitted on xxxx-xx-xx, it is still under review. Could you kindly expedite the review process for my manuscript? I sincerely appreciate your assistance in this matter.</p>
<p>I look forward to hearing from you soon.</p>
<p>Best Regards,<br>xxxx</p>
]]></content>
      <categories>
        <category>Research</category>
      </categories>
      <tags>
        <tag>research</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌拼音输入法</title>
    <url>/posts/Google-Pinyin-input-method.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>想要了解 Windows 上的谷歌拼音输入法？<br>可以试着阅读以下这篇文章： <a href="https://mp.weixin.qq.com/s/9-DMXTUqjBiaTjhJ8triiw">谷歌拼音输入法（PC）不完全使用指南</a></p>
<h3 id="优势-and-劣势"><a href="#优势-and-劣势" class="headerlink" title="优势 and 劣势"></a>优势 and 劣势</h3><ul>
<li>完全离线</li>
<li>已停止更新（实际上已经下架，Google 不在提供维护）</li>
<li>可导入 / 导出用户词典及自定义短语</li>
<li>体积超小（压缩包 15M）、最流畅、皮肤最简洁的输入法</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/06/17/sAp8lKJft4kINHQ.png" alt="03-皮肤.png"></p>
<h3 id="一些实用快捷键"><a href="#一些实用快捷键" class="headerlink" title="一些实用快捷键"></a>一些实用快捷键</h3><ul>
<li>删除误造词：<code>Ctrl + Shift + 数字</code></li>
<li>一键搜索：<code>Ctrl + G</code></li>
<li>中英文标点符号切换：<code>Ctrl + &gt;</code></li>
<li>打开属性面板：<code>Ctrl + Shift + O</code></li>
<li>全角 / 半角符号切换：<code>Shift+空格</code></li>
</ul>
<p><img data-src="https://s2.loli.net/2022/06/17/elU2bQER38XTCNj.gif" alt="03-一键搜索.gif"></p>
<p>注：虽然是中文输入法，但是标点符号可以切换成英文状态，在输入法的显示状态栏里面也有中英文标点符号的信息</p>
<h3 id="个人偏好配置"><a href="#个人偏好配置" class="headerlink" title="个人偏好配置"></a>个人偏好配置</h3><p><img data-src="https://s2.loli.net/2022/06/17/Civ7QbjfnohJm6L.png" alt="01-偏好设置.png"></p>
<p><img data-src="https://s2.loli.net/2022/06/17/7d2N9ASmW3UrYDq.png" alt="01-皮肤偏好设置.png"></p>
<h3 id="输入时间日期"><a href="#输入时间日期" class="headerlink" title="输入时间日期"></a>输入时间日期</h3><p>小鹤双拼对应 “时间”、“日期” 的双拼分别为 “uijm”、“riqi”</p>
<p><img data-src="https://s2.loli.net/2022/06/17/UcMJPebhdL5zwWi.gif" alt="01-输入当前时间和日期.gif"></p>
<h3 id="其他功能（I-模式，几乎用不到）"><a href="#其他功能（I-模式，几乎用不到）" class="headerlink" title="其他功能（I 模式，几乎用不到）"></a>其他功能（I 模式，几乎用不到）</h3><p><img data-src="https://s2.loli.net/2022/06/17/cD5Oh6EqUMsXQAC.gif" alt="02-开启功能模式插入搜索框.gif"></p>
<h3 id="参考资料-amp-了解更多"><a href="#参考资料-amp-了解更多" class="headerlink" title="参考资料&amp;了解更多"></a>参考资料 &amp; 了解更多</h3><ul>
<li>微信公众号： <a href="https://mp.weixin.qq.com/s/9-DMXTUqjBiaTjhJ8triiw">谷歌拼音输入法（PC）不完全使用指南</a></li>
<li>维基百科： <a href="https://zh.wikipedia.org/wiki/Google%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95">Google 拼音输入法</a></li>
</ul>
]]></content>
      <tags>
        <tag>APP</tag>
      </tags>
  </entry>
</search>
